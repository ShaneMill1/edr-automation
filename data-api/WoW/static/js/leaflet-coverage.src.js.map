{"version":3,"file":"leaflet-coverage.src.js","sources":["../../../../../\u0000babelHelpers","src/controls/utils.js","src/controls/DiscreteLegend.js","src/controls/ContinuousLegend.js","src/controls/Legend.js","src/util/EventMixin.js","src/controls/TimeAxis.js","src/controls/Dropdown.js","src/controls/VerticalAxis.js","../../../../../\u0000commonjsHelpers","node_modules/iota-array/iota.js","node_modules/is-buffer/index.js","node_modules/ndarray/ndarray.js","src/layers/palettes.js","src/layers/PaletteMixin.js","src/layers/CoverageMixin.js","src/layers/Grid.js","src/layers/CircleMarkerMixin.js","src/layers/Point.js","src/layers/Trajectory.js","src/layers/PointSeries.js","src/util/kdTree.js","src/layers/PointCollection.js","src/layers/VerticalProfile.js","src/layers/VerticalProfileCollection.js","src/layers/MultiPolygon.js","src/layers/PolygonSeries.js","src/util/constants.js","src/layers/factory.js","src/layers/ParameterSync.js","src/popups/VerticalProfilePlot.js","src/popups/TimeSeriesPlot.js","src/popups/DraggablePopupMixin.js","src/popups/ValuePopup.js","src/popups/DraggableValuePopup.js"],"sourcesContent":["var babelHelpers = {};\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nexport var jsx = function () {\n  var REACT_ELEMENT_TYPE = typeof Symbol === \"function\" && Symbol.for && Symbol.for(\"react.element\") || 0xeac7;\n  return function createRawReactElement(type, props, key, children) {\n    var defaultProps = type && type.defaultProps;\n    var childrenLength = arguments.length - 3;\n\n    if (!props && childrenLength !== 0) {\n      props = {};\n    }\n\n    if (props && defaultProps) {\n      for (var propName in defaultProps) {\n        if (props[propName] === void 0) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    } else if (!props) {\n      props = defaultProps || {};\n    }\n\n    if (childrenLength === 1) {\n      props.children = children;\n    } else if (childrenLength > 1) {\n      var childArray = Array(childrenLength);\n\n      for (var i = 0; i < childrenLength; i++) {\n        childArray[i] = arguments[i + 3];\n      }\n\n      props.children = childArray;\n    }\n\n    return {\n      $$typeof: REACT_ELEMENT_TYPE,\n      type: type,\n      key: key === undefined ? null : '' + key,\n      ref: null,\n      props: props,\n      _owner: null\n    };\n  };\n}();\n\nexport var asyncIterator = function (iterable) {\n  if (typeof Symbol === \"function\") {\n    if (Symbol.asyncIterator) {\n      var method = iterable[Symbol.asyncIterator];\n      if (method != null) return method.call(iterable);\n    }\n\n    if (Symbol.iterator) {\n      return iterable[Symbol.iterator]();\n    }\n  }\n\n  throw new TypeError(\"Object is not async iterable\");\n};\n\nexport var asyncGenerator = function () {\n  function AwaitValue(value) {\n    this.value = value;\n  }\n\n  function AsyncGenerator(gen) {\n    var front, back;\n\n    function send(key, arg) {\n      return new Promise(function (resolve, reject) {\n        var request = {\n          key: key,\n          arg: arg,\n          resolve: resolve,\n          reject: reject,\n          next: null\n        };\n\n        if (back) {\n          back = back.next = request;\n        } else {\n          front = back = request;\n          resume(key, arg);\n        }\n      });\n    }\n\n    function resume(key, arg) {\n      try {\n        var result = gen[key](arg);\n        var value = result.value;\n\n        if (value instanceof AwaitValue) {\n          Promise.resolve(value.value).then(function (arg) {\n            resume(\"next\", arg);\n          }, function (arg) {\n            resume(\"throw\", arg);\n          });\n        } else {\n          settle(result.done ? \"return\" : \"normal\", result.value);\n        }\n      } catch (err) {\n        settle(\"throw\", err);\n      }\n    }\n\n    function settle(type, value) {\n      switch (type) {\n        case \"return\":\n          front.resolve({\n            value: value,\n            done: true\n          });\n          break;\n\n        case \"throw\":\n          front.reject(value);\n          break;\n\n        default:\n          front.resolve({\n            value: value,\n            done: false\n          });\n          break;\n      }\n\n      front = front.next;\n\n      if (front) {\n        resume(front.key, front.arg);\n      } else {\n        back = null;\n      }\n    }\n\n    this._invoke = send;\n\n    if (typeof gen.return !== \"function\") {\n      this.return = undefined;\n    }\n  }\n\n  if (typeof Symbol === \"function\" && Symbol.asyncIterator) {\n    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {\n      return this;\n    };\n  }\n\n  AsyncGenerator.prototype.next = function (arg) {\n    return this._invoke(\"next\", arg);\n  };\n\n  AsyncGenerator.prototype.throw = function (arg) {\n    return this._invoke(\"throw\", arg);\n  };\n\n  AsyncGenerator.prototype.return = function (arg) {\n    return this._invoke(\"return\", arg);\n  };\n\n  return {\n    wrap: function (fn) {\n      return function () {\n        return new AsyncGenerator(fn.apply(this, arguments));\n      };\n    },\n    await: function (value) {\n      return new AwaitValue(value);\n    }\n  };\n}();\n\nexport var asyncGeneratorDelegate = function (inner, awaitWrap) {\n  var iter = {},\n      waiting = false;\n\n  function pump(key, value) {\n    waiting = true;\n    value = new Promise(function (resolve) {\n      resolve(inner[key](value));\n    });\n    return {\n      done: false,\n      value: awaitWrap(value)\n    };\n  }\n\n  ;\n\n  if (typeof Symbol === \"function\" && Symbol.iterator) {\n    iter[Symbol.iterator] = function () {\n      return this;\n    };\n  }\n\n  iter.next = function (value) {\n    if (waiting) {\n      waiting = false;\n      return value;\n    }\n\n    return pump(\"next\", value);\n  };\n\n  if (typeof inner.throw === \"function\") {\n    iter.throw = function (value) {\n      if (waiting) {\n        waiting = false;\n        throw value;\n      }\n\n      return pump(\"throw\", value);\n    };\n  }\n\n  if (typeof inner.return === \"function\") {\n    iter.return = function (value) {\n      return pump(\"return\", value);\n    };\n  }\n\n  return iter;\n};\n\nexport var asyncToGenerator = function (fn) {\n  return function () {\n    var gen = fn.apply(this, arguments);\n    return new Promise(function (resolve, reject) {\n      function step(key, arg) {\n        try {\n          var info = gen[key](arg);\n          var value = info.value;\n        } catch (error) {\n          reject(error);\n          return;\n        }\n\n        if (info.done) {\n          resolve(value);\n        } else {\n          return Promise.resolve(value).then(function (value) {\n            step(\"next\", value);\n          }, function (err) {\n            step(\"throw\", err);\n          });\n        }\n      }\n\n      return step(\"next\");\n    });\n  };\n};\n\nexport var classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nexport var createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nexport var defineEnumerableProperties = function (obj, descs) {\n  for (var key in descs) {\n    var desc = descs[key];\n    desc.configurable = desc.enumerable = true;\n    if (\"value\" in desc) desc.writable = true;\n    Object.defineProperty(obj, key, desc);\n  }\n\n  return obj;\n};\n\nexport var defaults = function (obj, defaults) {\n  var keys = Object.getOwnPropertyNames(defaults);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = Object.getOwnPropertyDescriptor(defaults, key);\n\n    if (value && value.configurable && obj[key] === undefined) {\n      Object.defineProperty(obj, key, value);\n    }\n  }\n\n  return obj;\n};\n\nexport var defineProperty = function (obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexport var get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nexport var inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar _instanceof = function (left, right) {\n  if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n    return right[Symbol.hasInstance](left);\n  } else {\n    return left instanceof right;\n  }\n};\n\nexport var interopRequireDefault = function (obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n};\n\nexport var interopRequireWildcard = function (obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n};\n\nexport var newArrowCheck = function (innerThis, boundThis) {\n  if (innerThis !== boundThis) {\n    throw new TypeError(\"Cannot instantiate an arrow function\");\n  }\n};\n\nexport var objectDestructuringEmpty = function (obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n};\n\nexport var objectWithoutProperties = function (obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n};\n\nexport var possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nexport var selfGlobal = typeof global === \"undefined\" ? self : global;\n\nexport var set = function set(object, property, value, receiver) {\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent !== null) {\n      set(parent, property, value, receiver);\n    }\n  } else if (\"value\" in desc && desc.writable) {\n    desc.value = value;\n  } else {\n    var setter = desc.set;\n\n    if (setter !== undefined) {\n      setter.call(receiver, value);\n    }\n  }\n\n  return value;\n};\n\nexport var slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nexport var slicedToArrayLoose = function (arr, i) {\n  if (Array.isArray(arr)) {\n    return arr;\n  } else if (Symbol.iterator in Object(arr)) {\n    var _arr = [];\n\n    for (var _iterator = arr[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) {\n      _arr.push(_step.value);\n\n      if (i && _arr.length === i) break;\n    }\n\n    return _arr;\n  } else {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n  }\n};\n\nexport var taggedTemplateLiteral = function (strings, raw) {\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n};\n\nexport var taggedTemplateLiteralLoose = function (strings, raw) {\n  strings.raw = raw;\n  return strings;\n};\n\nexport var temporalRef = function (val, name, undef) {\n  if (val === undef) {\n    throw new ReferenceError(name + \" is not defined - temporal dead zone\");\n  } else {\n    return val;\n  }\n};\n\nexport var temporalUndefined = {};\n\nexport var toArray = function (arr) {\n  return Array.isArray(arr) ? arr : Array.from(arr);\n};\n\nexport var toConsumableArray = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\nbabelHelpers;\n\nexport { _typeof as typeof, _extends as extends, _instanceof as instanceof }","/**\r\n * Returns the first child element of parent (fall-back to document if not given)\r\n * matching the given selector.\r\n * \r\n * @private\r\n */\r\nexport function $$ (selector, parent) {\r\n  if (typeof parent === 'string') {\r\n    parent = $$(parent)\r\n  }\r\n  parent = parent || document\r\n  return parent.querySelector(selector)\r\n}\r\n\r\n/**\r\n * Returns all child elements of parent (fall-back to document if not given)\r\n * matching the given selector as an array.\r\n * \r\n * @private\r\n */\r\nexport function $ (selector, parent) {\r\n  if (typeof parent === 'string') {\r\n    parent = $$(parent)\r\n  }\r\n  parent = parent || document\r\n  return [...parent.querySelectorAll(selector)]\r\n}\r\n\r\n/**\r\n * Turns an HTML string into a DOM element.\r\n * The HTML markup must have a single root node not prepended by any whitespace.\r\n * \r\n * @example \r\n * var s = '<li>text</li>'\r\n * var el = C.HTML(s)\r\n * document.body.appendChild(el)\r\n * \r\n * @private\r\n */\r\nexport function HTML (html) {\r\n  let div = document.createElement('div')\r\n  div.innerHTML = html\r\n  let element = div.firstChild\r\n  return element\r\n}\r\n\r\n/**\r\n * Inject HTML and CSS into the DOM.\r\n * \r\n * @param html The html to inject at the end of the body element. Must have a single root node without surrounding whitespace.\r\n * @param css The CSS styles to inject at the end of the head element.\r\n * \r\n * @private\r\n */\r\nexport function inject (html, css) {\r\n  // inject default template and CSS into DOM\r\n  if (html) {\r\n    document.body.appendChild(HTML(html))\r\n  }\r\n  \r\n  if (css) {\r\n    let style = document.createElement('style')\r\n    style.type = 'text/css'\r\n    if (style.styleSheet){\r\n      style.styleSheet.cssText = css\r\n    } else {\r\n      style.appendChild(document.createTextNode(css))\r\n    }\r\n    document.head.appendChild(style)\r\n  }\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function fromTemplate (id) {\r\n  let node = $$('#' + id)\r\n  // browsers without <template> support don't wrap everything in .content\r\n  if ('content' in node) {\r\n    node = node.content\r\n  }\r\n  return document.importNode(node, true).children[0]\r\n}","import L from 'leaflet'\r\n\r\nimport {inject, fromTemplate, $$} from './utils.js'\r\nimport {getLanguageTag, getLanguageString} from 'covutils'\r\n\r\nconst DEFAULT_TEMPLATE_ID = 'template-coverage-parameter-discrete-legend'\r\nconst DEFAULT_TEMPLATE = `<template id=\"${DEFAULT_TEMPLATE_ID}\">\r\n  <div class=\"leaflet-coverage-control legend discrete-legend\">\r\n    <div class=\"legend-title-container\"><strong class=\"legend-title\"></strong></div>\r\n    <div class=\"legend-palette discrete-legend-palette\"></div>\r\n  </div>\r\n</template>`\r\n\r\n/**\r\n * Displays a discrete palette legend for the parameter displayed by the given\r\n * Coverage layer. Supports category parameters only at the moment.\r\n * \r\n * @example <caption>Coverage data layer</caption>\r\n * new C.DiscreteLegend(covLayer).addTo(map)\r\n * // changing the palette of the layer automatically updates the legend \r\n * covLayer.palette = C.discretePalette(['red', 'blue'])\r\n * \r\n * @example <caption>Fake layer</caption>\r\n * var fakeLayer = {\r\n *   parameter: {\r\n *     observedProperty: {\r\n *       label: { en: 'Land cover' },\r\n *       categories: [{\r\n *         label: { en: 'Land' }\r\n *       }, {\r\n *         label: { en: 'Water' }\r\n *       }]\r\n *     }\r\n *   },\r\n *   palette: C.directPalette(['gray', 'blue']) // CSS colors in category order\r\n * }\r\n * var legend = new C.DiscreteLegend(fakeLayer).addTo(map)\r\n * \r\n * // change the palette and trigger a manual update\r\n * fakeLayer.palette = C.discretePalette(['red', 'blue'])\r\n * legend.update()\r\n * \r\n * @extends {L.Control}\r\n */\r\nexport class DiscreteLegend extends L.Control {\r\n  \r\n  /**\r\n   * Creates a discrete legend control.\r\n   * \r\n   * @param {object} covLayer \r\n   *   The coverage data layer, or any object with <code>palette</code>\r\n   *   and <code>parameter</code> properties.\r\n   *   If the object has <code>on</code>/<code>off</code> methods, then the legend will\r\n   *   listen for <code>\"paletteChange\"</code> events and update itself automatically.\r\n   *   If the layer fires a <code>\"remove\"</code> event, then the legend will remove itself\r\n   *   from the map. \r\n   * @param {object} [options] Legend options.\r\n   * @param {string} [options.position='bottomright'] The initial position of the control (see Leaflet docs).\r\n   * @param {string} [options.language] A language tag, indicating the preferred language to use for labels.\r\n   * @param {string} [options.templateId] Uses the HTML element with the given id as template.\r\n   */\r\n  constructor (covLayer, options = {}) {\r\n    super({position: options.position || 'bottomright'})\r\n    this._covLayer = covLayer\r\n    this._templateId = options.templateId || DEFAULT_TEMPLATE_ID\r\n    this._language = options.language\r\n    \r\n    if (!options.templateId && document.getElementById(DEFAULT_TEMPLATE_ID) === null) {\r\n      inject(DEFAULT_TEMPLATE)\r\n    }   \r\n\r\n    if (covLayer.on) {\r\n      this._remove = () => this.remove()\r\n      this._update = () => this._doUpdate(false)\r\n      covLayer.on('remove', this._remove)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Triggers a manual update of the legend.\r\n   * \r\n   * Useful if the supplied coverage data layer is not a real layer\r\n   * and won't fire the necessary events for automatic updates.\r\n   */\r\n  update () {\r\n    this._doUpdate(true)\r\n  }\r\n  \r\n  _doUpdate (fullUpdate) {\r\n    let el = this._el\r\n    \r\n    if (fullUpdate) {\r\n      let param = this._covLayer.parameter\r\n      // if requested language doesn't exist, use the returned one for all other labels\r\n      this._language = getLanguageTag(param.observedProperty.label, this._language) \r\n      let title = getLanguageString(param.observedProperty.label, this._language)\r\n      $$('.legend-title', el).innerHTML = title\r\n    }\r\n    \r\n    let palette = this._covLayer.palette\r\n    let param = this._covLayer.parameter\r\n    \r\n    let html = ''\r\n    for (let i=0; i < palette.steps; i++) {\r\n      let cat = getLanguageString(param.observedProperty.categories[i].label, this._language)\r\n      html += `\r\n        <i style=\"background:rgb(${palette.red[i]}, ${palette.green[i]}, ${palette.blue[i]})\"></i>\r\n        ${cat}\r\n        <br>`\r\n    }\r\n    \r\n    $$('.legend-palette', el).innerHTML = html\r\n  }\r\n  \r\n  /**\r\n   * @override\r\n   * @ignore\r\n   */\r\n  onAdd (map) {\r\n    this._map = map\r\n    \r\n    if (this._covLayer.on) {\r\n      this._covLayer.on('paletteChange', this._update)\r\n    }\r\n    \r\n    this._el = fromTemplate(this._templateId)\r\n    this.update()\r\n    return this._el\r\n  }\r\n  \r\n  /**\r\n   * @override\r\n   * @ignore\r\n   */\r\n  onRemove () {\r\n    if (this._covLayer.off) {\r\n      this._covLayer.off('remove', this._remove)\r\n      this._covLayer.off('paletteChange', this._update)\r\n    }\r\n  }\r\n}\r\n","import L from 'leaflet'\r\n\r\nimport {inject, fromTemplate, $$, $} from './utils.js'\r\nimport {getLanguageTag, getLanguageString, stringifyUnit} from 'covutils'\r\n\r\nconst DEFAULT_TEMPLATE_ID = 'template-coverage-parameter-continuous-legend'\r\nconst DEFAULT_TEMPLATE = `<template id=\"${DEFAULT_TEMPLATE_ID}\">\r\n  <div class=\"leaflet-coverage-control legend continuous-legend\">\r\n    <div style=\"margin-bottom:3px\" class=\"legend-title-container\">\r\n      <strong class=\"legend-title\"></strong>\r\n    </div>\r\n    <div style=\"display: inline-block; height: 144px; float:left\">\r\n      <span style=\"height: 136px; width: 18px; display: block; margin-top: 9px;\" class=\"legend-palette\"></span>\r\n    </div>\r\n    <div style=\"display: inline-block; float:left; height:153px\">\r\n      <table style=\"height: 100%;\">\r\n        <tr><td style=\"vertical-align:top\"><span class=\"legend-max\"></span> <span class=\"legend-uom\"></span></td></tr>\r\n        <tr><td><span class=\"legend-current\"></span></td></tr>\r\n        <tr><td style=\"vertical-align:bottom\"><span class=\"legend-min\"></span> <span class=\"legend-uom\"></span></td></tr>\r\n      </table>\r\n    </div>\r\n  </div>\r\n</template>`\r\n\r\n/**\r\n * Displays a continuous legend for the parameter displayed by the given\r\n * coverage data layer.\r\n * \r\n * Note that this class should only be used if the palette is continuous\r\n * by nature, typically having at least 100-200 color steps.\r\n * If there are only a few color steps (e.g. 10), then this class\r\n * will still show a continuous legend due to its rendering technique\r\n * (CSS gradient based).\r\n * \r\n * @example <caption>Coverage data layer</caption>\r\n * new C.ContinuousLegend(covLayer).addTo(map)\r\n * // changing the palette of the layer automatically updates the legend \r\n * covLayer.palette = C.linearPalette(['blue', 'red'])\r\n * \r\n * @example <caption>Fake layer</caption>\r\n * var fakeLayer = {\r\n *   parameter: {\r\n *     observedProperty: {\r\n *       label: { en: 'Temperature' }\r\n *     },\r\n *     unit: {\r\n *       symbol: { value: 'K' },\r\n *       label: { en: 'Kelvin' }\r\n *     }\r\n *   },\r\n *   palette: linearPalette(['#FFFFFF', '#000000']),\r\n *   paletteExtent: [0, 10]\r\n * }\r\n * var legend = new C.ContinuousLegend(fakeLayer).addTo(map)\r\n * \r\n * // change the palette and trigger a manual update\r\n * fakeLayer.palette = C.linearPalette(['blue', 'red'])\r\n * legend.update()\r\n * \r\n * @extends {L.Control}\r\n */\r\nexport class ContinuousLegend extends L.Control {\r\n  \r\n  /**\r\n   * Creates a continuous legend control.\r\n   * \r\n   * @param {object} covLayer \r\n   *   The coverage data layer, or any object with <code>palette</code>,\r\n   *   <code>paletteExtent</code>, and <code>parameter</code> properties.\r\n   *   If the object has <code>on</code>/<code>off</code> methods, then the legend will\r\n   *   listen for <code>\"paletteChange\"</code> and <code>\"paletteExtentChange\"</code>\r\n   *   events and update itself automatically.\r\n   *   If the layer fires a <code>\"remove\"</code> event, then the legend will remove itself\r\n   *   from the map. \r\n   * @param {object} [options] Legend options.\r\n   * @param {string} [options.position='bottomright'] The initial position of the control (see Leaflet docs).\r\n   * @param {string} [options.language] A language tag, indicating the preferred language to use for labels.\r\n   * @param {string} [options.templateId] Uses the HTML element with the given id as template.\r\n   */\r\n  constructor (covLayer, options = {}) {\r\n    super({position: options.position || 'bottomright'})\r\n    this._covLayer = covLayer\r\n    this._templateId = options.templateId || DEFAULT_TEMPLATE_ID\r\n    this._language = options.language\r\n    \r\n    if (!options.templateId && document.getElementById(DEFAULT_TEMPLATE_ID) === null) {\r\n      inject(DEFAULT_TEMPLATE)\r\n    }   \r\n\r\n    if (covLayer.on) {\r\n      this._remove = () => this.remove()\r\n      this._update = () => this._doUpdate(false)\r\n      covLayer.on('remove', this._remove)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Triggers a manual update of the legend.\r\n   * \r\n   * Useful if the supplied coverage data layer is not a real layer\r\n   * and won't fire the necessary events for automatic updates.\r\n   */\r\n  update () {\r\n    this._doUpdate(true)\r\n  }\r\n  \r\n  _doUpdate (fullUpdate) {\r\n    let el = this._el\r\n    \r\n    if (fullUpdate) {\r\n      let param = this._covLayer.parameter\r\n      // if requested language doesn't exist, use the returned one for all other labels\r\n      let language = getLanguageTag(param.observedProperty.label, this._language) \r\n      let title = getLanguageString(param.observedProperty.label, language)\r\n      let unit = stringifyUnit(param.unit, language)\r\n       $$('.legend-title', el).innerHTML = title\r\n       $('.legend-uom', el).forEach(u => u.innerHTML = unit)        \r\n    }\r\n    \r\n    let palette = this._covLayer.palette\r\n    let [low,high] = this._covLayer.paletteExtent\r\n    \r\n    $$('.legend-min', el).innerHTML = low.toFixed(2)\r\n    $$('.legend-max', el).innerHTML = high.toFixed(2)\r\n\r\n    let gradient = ''\r\n    for (let i = 0; i < palette.steps; i++) {\r\n      if (i > 0) gradient += ','\r\n      gradient += 'rgb(' + palette.red[i] + ',' + palette.green[i] + ',' + palette.blue[i] + ')'\r\n    }\r\n    \r\n    $$('.legend-palette', el).style.background = 'transparent linear-gradient(to top, ' + gradient + ') repeat scroll 0% 0%'\r\n  }\r\n  \r\n  /**\r\n   * @override\r\n   * @ignore\r\n   */\r\n  onAdd (map) {\r\n    this._map = map\r\n    \r\n    if (this._covLayer.on) {\r\n      this._covLayer.on('paletteChange', this._update)\r\n      this._covLayer.on('paletteExtentChange', this._update)\r\n    }\r\n    \r\n    this._el = fromTemplate(this._templateId)\r\n    this.update()\r\n    return this._el\r\n  }\r\n  \r\n  /**\r\n   * @override\r\n   * @ignore\r\n   */\r\n  onRemove () {\r\n    if (this._covLayer.off) {\r\n      this._covLayer.off('remove', this._remove)\r\n      this._covLayer.off('paletteChange', this._update)\r\n      this._covLayer.off('paletteExtentChange', this._update)\r\n    }\r\n  }\r\n  \r\n}\r\n","import {DiscreteLegend} from './DiscreteLegend.js'\r\nimport {ContinuousLegend} from './ContinuousLegend.js'\r\n\r\n/**\r\n * Convenience function that returns a legend control\r\n * based on the coverage parameter type.\r\n * For categorical parameters this returns a {@link DiscreteLegend},\r\n * otherwise a {@link ContinuousLegend} instance.\r\n * \r\n * Note that custom HTML templates cannot be used with this function.\r\n * If this is necessary, consider using the individual legend classes\r\n * instead. \r\n * \r\n * @example <caption>Coverage data layer</caption>\r\n * var legend = C.legend(covLayer).addTo(map)\r\n * \r\n * @example <caption>Fake layer</caption>\r\n * // see DiscreteLegend and ContinuousLegend docs\r\n * \r\n * @param {object} layer The coverage data layer.\r\n * @param {object} [options] Legend options.\r\n * @param {string} [options.position='bottomright'] The initial position of the control (see Leaflet docs).\r\n * @param {string} [options.language] A language tag, indicating the preferred language to use for labels.\r\n * @return {DiscreteLegend|ContinuousLegend}\r\n */\r\nexport function legend (layer, options = {}) {\r\n  options.position = options.position || 'bottomright'\r\n  if (layer.parameter.observedProperty.categories) {\r\n    return new DiscreteLegend(layer, options)\r\n  } else {\r\n    return new ContinuousLegend(layer, options)\r\n  }\r\n}\r\n","import L from 'leaflet'\r\n\r\nlet Evented = L.Evented.prototype\r\n\r\n/**\r\n * Wraps Leaflet's {@link L.Evented} for use within class expressions.\r\n * \r\n * @see http://justinfagnani.com/2015/12/21/real-mixins-with-javascript-classes/\r\n * \r\n * @param {class} base The base class.\r\n * @return {class} The base class with Leaflet's {@link L.Evented}.\r\n */\r\nexport function EventMixin (base) {\r\n  let clazz = class extends base {}\r\n  for (let key in Evented) {\r\n    clazz.prototype[key] = Evented[key]\r\n  }\r\n  return clazz\r\n}\r\n","import L from 'leaflet'\r\n\r\nimport {$$, fromTemplate, inject, HTML} from './utils.js'\r\nimport {EventMixin} from '../util/EventMixin.js'\r\n\r\nconst DEFAULT_TEMPLATE_ID = 'template-coverage-timeaxis'\r\nconst DEFAULT_TEMPLATE = `<template id=\"${DEFAULT_TEMPLATE_ID}\">\r\n<div class=\"leaflet-coverage-control form-inline\" style=\"clear:none\">\r\n  <strong class=\"title\">Time</strong><br>\r\n  <div class=\"form-group\">\r\n    <select name=\"date\" class=\"date form-control\"></select>\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <select name=\"time\" class=\"time form-control\"></select>\r\n  </div>\r\n</div>\r\n</template>`\r\n\r\n/**\r\n * The `change` event, signalling that a different time entry has been selected.\r\n * \r\n * @typedef {L.Event} TimeAxis#change\r\n * @property {Date} time The time that has been selected.\r\n */\r\n\r\n/**\r\n * Displays a simple date/time picker for a coverage data layer by grouping\r\n * time steps into dates and times.\r\n * \r\n * @example <caption>Coverage data layer</caption>\r\n * new C.TimeAxis(covLayer).addTo(map)\r\n * // Selecting a date/time automatically sets the 'time' property in the layer.\r\n * // Similarly, when the layer fires an 'axisChange' event with {axis: 'time'}\r\n * // the control reflects that change.\r\n * \r\n * @example <caption>Fake layer</caption>\r\n * var times = ['2000-01-01T00:00:00Z','2000-01-01T05:00:00Z'].map(s => new Date(s))\r\n * var fakeLayer = {\r\n *   timeSlices: times,\r\n *   time: times[1] // select the second time step initially\r\n * }\r\n * var timeAxis = new C.TimeAxis(fakeLayer).addTo(map)\r\n * \r\n * // change the time and trigger a manual update\r\n * fakeLayer.time = times[0]\r\n * timeAxis.update()\r\n * \r\n * @extends {L.Control}\r\n * @extends {EventMixin}\r\n * \r\n * @emits {TimeAxis#change} when a different time entry has been selected\r\n */\r\nexport class TimeAxis extends EventMixin(L.Control) {\r\n  \r\n  /**\r\n   * Creates a time axis control.\r\n   * \r\n   * @param {object} covLayer \r\n   *   The coverage data layer, or any object with `timeSlices` and `time` properties.\r\n   *   If the object has `on`/`off` methods, then the control will\r\n   *   listen for `axisChange` events with `{axis: 'time'}` and update itself automatically.\r\n   *   If the layer fires a `remove` event, then the control will remove itself from the map.\r\n   * @param {object} [options] Control options.\r\n   * @param {string} [options.position='topleft'] The initial position of the control (see Leaflet docs).\r\n   * @param {string} [options.title='Time'] The label to show above the date/time picker.\r\n   * @param {string} [options.templateId] Element ID of an alternative HTML `<template>` element to use.\r\n   */\r\n  constructor (covLayer, options = {}) {\r\n    super({position: options.position || 'topleft'})\r\n    this._templateId = options.templateId || DEFAULT_TEMPLATE_ID\r\n    this._title = options.title || 'Time'\r\n    this._covLayer = covLayer\r\n\r\n    if (!options.templateId && document.getElementById(DEFAULT_TEMPLATE_ID) === null) {\r\n      inject(DEFAULT_TEMPLATE)\r\n    } \r\n\r\n    if (covLayer.on) {\r\n      this._remove = () => this.remove()\r\n      covLayer.on('remove', this._remove)\r\n      \r\n      this._axisListener = e => {\r\n        if (e.axis === 'time') this.update()\r\n      }\r\n    }\r\n    \r\n    let timeSlices = this._covLayer.timeSlices\r\n    let dateMap = new Map() // UTC timestamp (representing the date only) -> array of Date objects\r\n    for (let t of timeSlices) {\r\n      let dateTimestamp = new Date(Date.UTC(t.getUTCFullYear(), t.getUTCMonth(), t.getUTCDate())).getTime()\r\n      if (!dateMap.has(dateTimestamp)) {\r\n        dateMap.set(dateTimestamp, [])\r\n      }\r\n      dateMap.get(dateTimestamp).push(t)\r\n    }\r\n    this._dateMap = dateMap\r\n  }\r\n  \r\n  /**\r\n   * @ignore\r\n   */\r\n  onAdd (map) {\r\n    this._map = map\r\n    \r\n    if (this._covLayer.on) {\r\n      this._covLayer.on('axisChange', this._axisListener)\r\n    }\r\n    \r\n    let el = fromTemplate(this._templateId)\r\n    this._el = el\r\n    L.DomEvent.disableClickPropagation(el)\r\n    \r\n    if (this._title) {\r\n      $$('.title', el).innerHTML = this._title\r\n    }\r\n    \r\n    for (let dateTimestamp of this._dateMap.keys()) {\r\n      let dateStr = getUTCDateString(dateTimestamp)\r\n      $$('.date', el).appendChild(HTML(`<option value=\"${dateStr}\">${dateStr}</option>`))\r\n    }\r\n    $$('.date', el).disabled = this._dateMap.size === 1\r\n    \r\n    $$('.date', el).addEventListener('change', event => {\r\n      let dateTimestamp = getUTCTimestampDateOnly(event.target.value)\r\n      let timeSlice = this._dateMap.get(dateTimestamp)[0]\r\n      this._covLayer.time = timeSlice\r\n      this._initTimeSelect(dateTimestamp)\r\n      this.fire('change', {time: timeSlice})\r\n    })\r\n    $$('.time', el).addEventListener('change', event => {\r\n      let dateStr = $$('.date', el).value\r\n      let timeStr = event.target.value\r\n      let time = new Date(dateStr + 'T' + timeStr)\r\n      this._covLayer.time = time\r\n      this.fire('change', {time: time})\r\n    })\r\n    \r\n    this.update()\r\n    \r\n    return el\r\n  }\r\n  \r\n  /**\r\n   * @ignore\r\n   */\r\n  onRemove () {\r\n    if (this._covLayer.off) {\r\n      this._covLayer.off('remove', this._remove)\r\n      this._covLayer.off('axisChange', this._axisListener)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Triggers a manual update of the date/time picker based on the\r\n   * `time` property of the layer.\r\n   * \r\n   * Useful if the supplied coverage data layer is not a real layer\r\n   * and won't fire the necessary events for automatic updates.\r\n   */\r\n  update () {\r\n    let covTime = this._covLayer.time\r\n    if (!covTime) return\r\n    let el = this._el\r\n    // selects the date set in the cov layer, populates the time select, and selects the time\r\n    let dateTimestamp = getUTCTimestampDateOnly(covTime.toISOString())\r\n    let dateStr = getUTCDateString(dateTimestamp)\r\n    $$('.date', el).value = dateStr \r\n    \r\n    this._initTimeSelect(dateTimestamp)\r\n    \r\n    let timeStr = covTime.toISOString().substr(11)\r\n    $$('.time', el).value = timeStr\r\n  }\r\n  \r\n  _initTimeSelect (dateTimestamp) {\r\n    let el = this._el\r\n    let timeSelect = $$('.time', el)\r\n    timeSelect.innerHTML = ''\r\n    let times = this._dateMap.get(dateTimestamp)\r\n    for (let timeSlice of times) {\r\n      let timeStr = timeSlice.toISOString().substr(11)\r\n      timeSelect.appendChild(HTML(`<option value=\"${timeStr}\">${timeStr}</option>`))\r\n    }\r\n    timeSelect.disabled = times.length === 1\r\n  }\r\n    \r\n}\r\n\r\nfunction getUTCTimestampDateOnly (dateStr) {\r\n  let year = parseInt(dateStr.substr(0, 4))\r\n  let month = parseInt(dateStr.substr(5, 2))\r\n  let day = parseInt(dateStr.substr(8, 2))\r\n  return Date.UTC(year, month-1, day)\r\n}\r\n\r\nfunction getUTCDateString (timestamp) {\r\n  let iso = new Date(timestamp).toISOString()\r\n  let date = iso.substr(0, 10)\r\n  return date\r\n}\r\n\r\n","import L from 'leaflet'\r\n\r\nimport {$$, fromTemplate, inject, HTML} from './utils.js'\r\nimport {EventMixin} from '../util/EventMixin.js'\r\n\r\nconst DEFAULT_TEMPLATE_ID = 'template-coverage-dropdown'\r\nconst DEFAULT_TEMPLATE = `<template id=\"${DEFAULT_TEMPLATE_ID}\">\r\n<div class=\"leaflet-coverage-control\" style=\"clear:none\">\r\n  <strong class=\"select-title\"></strong><br>\r\n  <select class=\"form-control\"></select>\r\n</div>\r\n</template>`\r\n\r\n/**\r\n * The `change` event, signalling that a different dropdown element has been selected.\r\n * \r\n * @typedef {L.Event} Dropdown#change\r\n * @property {string} value The value of the selected item.\r\n */\r\n\r\n/**\r\n * An event-enabled dropdown control with optional title.\r\n * \r\n * Used in {@link VerticalAxis}.\r\n * \r\n * @extends {L.Control}\r\n * @extends {EventMixin}\r\n * \r\n * @emits {Dropdown#change} when a different dropdown element has been selected\r\n */\r\nexport class Dropdown extends EventMixin(L.Control) {\r\n  /**\r\n   * @param {Array<Object>} choices The dropdown items given as an array of `{value, label}` objects.\r\n   * @param {Object} [options] The options object.\r\n   * @param {string} [options.position='topleft'] The position of the control (one of the map corners).\r\n   *    Possible values are 'topleft', 'topright', 'bottomleft' or 'bottomright'.\r\n   * @param {string} [options.title] The dropdown title that is displayed above the dropdown.\r\n   * @param {string} [options.value] Value of the item that should be initially selected.\r\n   * @param {string} [options.templateId] Element ID of an alternative HTML `<template>` element to use.\r\n   */\r\n  constructor (choices, options={}) {\r\n    super(options.position ? {position: options.position} : {position: 'topleft'})\r\n    this._templateId = options.templateId || DEFAULT_TEMPLATE_ID\r\n    this._title = options.title || ''\r\n    this._choices = choices\r\n    this._value = options.value || choices[0].value\r\n\r\n    if (!options.templateId && document.getElementById(DEFAULT_TEMPLATE_ID) === null) {\r\n      inject(DEFAULT_TEMPLATE)\r\n    } \r\n  }\r\n  \r\n  /**\r\n   * @override\r\n   * @ignore\r\n   */\r\n  onAdd (map) {\r\n    let el = fromTemplate(this._templateId)\r\n    this._el = el\r\n    \r\n    L.DomEvent.disableClickPropagation(el)\r\n    \r\n    $$('.select-title', el).innerHTML = this._title\r\n    \r\n    for (let {value, label} of this._choices) {\r\n      $$('select', el).appendChild(HTML(`<option value=\"${value}\">${label}</option>`))\r\n    }\r\n    $$('select', el).disabled = this._choices.length <= 1\r\n    this.value = this._value\r\n    \r\n    $$('select', el).addEventListener('change', event => {\r\n      this._value = event.target.value\r\n      this.fire('change', {value: event.target.value})\r\n    })\r\n    \r\n    return el\r\n  }\r\n  \r\n  /** \r\n   * Returns the value of the currently selected item.\r\n   * \r\n   * @type {string}\r\n   * \r\n   * @example\r\n   * let current = dropdown.value\r\n   */\r\n  get value () {\r\n    return this._value\r\n  }\r\n  \r\n  /** \r\n   * Selects the item with the given value.\r\n   * \r\n   * @type {string}\r\n   * \r\n   * @example\r\n   * dropdown.value = 'foobar'\r\n   */\r\n  set value (val) {\r\n    $$('select', this._el).value = val\r\n  }\r\n    \r\n}\r\n","import L from 'leaflet'\r\n\r\nimport {Dropdown} from './Dropdown.js'\r\nimport {EventMixin} from '../util/EventMixin.js'\r\nimport {getLanguageString, stringifyUnit} from 'covutils'\r\n\r\n/**\r\n * The `change` event, signalling that a different vertical coordinate value has been selected.\r\n * \r\n * @typedef {L.Event} VerticalAxis#change\r\n * @property {number} vertical The vertical coordinate value that has been selected.\r\n */\r\n\r\n/**\r\n * Displays a simple vertical coordinate dropdown selector for a coverage data layer.\r\n * \r\n * @example <caption>Coverage data layer</caption>\r\n * new C.VerticalAxis(covLayer).addTo(map)\r\n * // Selecting a vertical coordinate automatically sets the 'vertical' property in the layer.\r\n * // Similarly, when the layer fires an 'axisChange' event with {axis: 'vertical'}\r\n * // the control reflects that change.\r\n * \r\n * @example <caption>Fake layer</caption>\r\n * var heights = [0,10,20,50,100,500,1000]\r\n * var fakeLayer = {\r\n *   verticalSlices: heights,\r\n *   vertical: heights[1], // select the second height step initially\r\n *   crsVerticalAxis: {\r\n *     name: { \r\n *       en: 'Gravity-related height'\r\n *     },\r\n *     unit: {\r\n *       symbol: 'm'\r\n *     }\r\n *   }\r\n * }\r\n * var verticalAxis = new C.VerticalAxis(fakeLayer).addTo(map)\r\n * \r\n * // change the height and trigger a manual update\r\n * fakeLayer.vertical = heights[0]\r\n * verticalAxis.update()\r\n * \r\n * @extends {L.Layer}\r\n * \r\n * @emits {VerticalAxis#change} when a different entry has been selected\r\n */\r\nexport class VerticalAxis extends L.Layer {\r\n  \r\n  /**\r\n   * Creates a vertical axis control.\r\n   * \r\n   * @param {object} covLayer \r\n   *   The coverage data layer, or any object with `verticalSlices`\r\n   *   and `vertical` properties, optionally `crsVerticalAxis` property.\r\n   *   If the object has `on`/`off` methods, then the control will\r\n   *   listen for `axisChange` events with `{axis: 'vertical'}`\r\n   *   and update itself automatically.\r\n   *   If the layer fires a `remove` event, then the control will remove itself\r\n   *   from the map.\r\n   * @param {object} [options] Control options.\r\n   * @param {string} [options.position='topleft'] The initial position of the control (see Leaflet docs).\r\n   * @param {string} [options.title='Vertical'] \r\n   *   The label to show above the control if `covLayer.crsVerticalAxis.name` is missing.\r\n   * @param {string} [options.templateId] Element ID of an alternative HTML `<template>` element to use. \r\n   */\r\n  constructor (covLayer, options = {}) {\r\n    super()\r\n    this._templateId = options.templateId\r\n    this._covLayer = covLayer\r\n    this._title = options.title || 'Vertical'\r\n    this._position = options.position || 'topleft'\r\n\r\n    if (covLayer.on) {\r\n      this._remove = () => this.remove()\r\n      covLayer.on('remove', this._remove)\r\n      \r\n      this._axisListener = e => {\r\n        if (e.axis === 'vertical') this.update()\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * @ignore\r\n   * @override\r\n   */\r\n  onAdd (map) {\r\n    this._map = map\r\n    \r\n    if (this._covLayer.on) {\r\n      this._covLayer.on('axisChange', this._axisListener)\r\n    }\r\n    \r\n    let crsVertAxis = this._covLayer.crsVerticalAxis || {}\r\n    let title = crsVertAxis.name ? getLanguageString(crsVertAxis.name) : this._title\r\n    let unit = stringifyUnit(crsVertAxis.unit)\r\n    if (unit) {\r\n      unit = ' ' + unit\r\n    }\r\n    \r\n    let choices = []\r\n    let vals = this._covLayer.verticalSlices\r\n    for (let i=0; i < vals.length; i++) {\r\n      choices.push({\r\n        value: i.toString(),\r\n        label: vals[i] + unit\r\n      })\r\n    }\r\n      \r\n    this._dropdown = new Dropdown(choices, {\r\n      templateId: this._templateId,\r\n      position: this._position,\r\n      title,\r\n      value: this._getVerticalIndex().toString()\r\n    }).on('change', event => {\r\n      let i = parseInt(event.value)\r\n      let val = this._covLayer.verticalSlices[i]\r\n      this._covLayer.vertical = val\r\n      this.fire('change', {vertical: val})\r\n    }).addTo(map)\r\n  }\r\n  \r\n  /**\r\n   * @ignore\r\n   * @override\r\n   */\r\n  onRemove (map) {\r\n    this._dropdown.remove()\r\n    if (this._covLayer.off) {\r\n      this._covLayer.off('remove', this._remove)\r\n      this._covLayer.off('axisChange', this._axisListener)\r\n    }\r\n  }\r\n    \r\n  _getVerticalIndex () {\r\n    let vals = this._covLayer.verticalSlices\r\n    let i = vals.indexOf(this._covLayer.vertical)\r\n    return i\r\n  }\r\n  \r\n  /**\r\n   * Triggers a manual update of the vertical axis control based on the\r\n   * `vertical` property of the layer.\r\n   * \r\n   * Useful if the supplied coverage data layer is not a real layer\r\n   * and won't fire the necessary events for automatic updates.\r\n   */\r\n  update () {\r\n    let i = this._getVerticalIndex()\r\n    this._dropdown.value = i.toString()\r\n  }\r\n    \r\n}\r\n","\nexport var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {}\n\nexport function interopDefault(ex) {\n\treturn ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nexport function createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}","\"use strict\"\n\nfunction iota(n) {\n  var result = new Array(n)\n  for(var i=0; i<n; ++i) {\n    result[i] = i\n  }\n  return result\n}\n\nmodule.exports = iota","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n","var iota = require(\"iota-array\")\nvar isBuffer = require(\"is-buffer\")\n\nvar hasTypedArrays  = ((typeof Float64Array) !== \"undefined\")\n\nfunction compare1st(a, b) {\n  return a[0] - b[0]\n}\n\nfunction order() {\n  var stride = this.stride\n  var terms = new Array(stride.length)\n  var i\n  for(i=0; i<terms.length; ++i) {\n    terms[i] = [Math.abs(stride[i]), i]\n  }\n  terms.sort(compare1st)\n  var result = new Array(terms.length)\n  for(i=0; i<result.length; ++i) {\n    result[i] = terms[i][1]\n  }\n  return result\n}\n\nfunction compileConstructor(dtype, dimension) {\n  var className = [\"View\", dimension, \"d\", dtype].join(\"\")\n  if(dimension < 0) {\n    className = \"View_Nil\" + dtype\n  }\n  var useGetters = (dtype === \"generic\")\n\n  if(dimension === -1) {\n    //Special case for trivial arrays\n    var code =\n      \"function \"+className+\"(a){this.data=a;};\\\nvar proto=\"+className+\".prototype;\\\nproto.dtype='\"+dtype+\"';\\\nproto.index=function(){return -1};\\\nproto.size=0;\\\nproto.dimension=-1;\\\nproto.shape=proto.stride=proto.order=[];\\\nproto.lo=proto.hi=proto.transpose=proto.step=\\\nfunction(){return new \"+className+\"(this.data);};\\\nproto.get=proto.set=function(){};\\\nproto.pick=function(){return null};\\\nreturn function construct_\"+className+\"(a){return new \"+className+\"(a);}\"\n    var procedure = new Function(code)\n    return procedure()\n  } else if(dimension === 0) {\n    //Special case for 0d arrays\n    var code =\n      \"function \"+className+\"(a,d) {\\\nthis.data = a;\\\nthis.offset = d\\\n};\\\nvar proto=\"+className+\".prototype;\\\nproto.dtype='\"+dtype+\"';\\\nproto.index=function(){return this.offset};\\\nproto.dimension=0;\\\nproto.size=1;\\\nproto.shape=\\\nproto.stride=\\\nproto.order=[];\\\nproto.lo=\\\nproto.hi=\\\nproto.transpose=\\\nproto.step=function \"+className+\"_copy() {\\\nreturn new \"+className+\"(this.data,this.offset)\\\n};\\\nproto.pick=function \"+className+\"_pick(){\\\nreturn TrivialArray(this.data);\\\n};\\\nproto.valueOf=proto.get=function \"+className+\"_get(){\\\nreturn \"+(useGetters ? \"this.data.get(this.offset)\" : \"this.data[this.offset]\")+\n\"};\\\nproto.set=function \"+className+\"_set(v){\\\nreturn \"+(useGetters ? \"this.data.set(this.offset,v)\" : \"this.data[this.offset]=v\")+\"\\\n};\\\nreturn function construct_\"+className+\"(a,b,c,d){return new \"+className+\"(a,d)}\"\n    var procedure = new Function(\"TrivialArray\", code)\n    return procedure(CACHED_CONSTRUCTORS[dtype][0])\n  }\n\n  var code = [\"'use strict'\"]\n\n  //Create constructor for view\n  var indices = iota(dimension)\n  var args = indices.map(function(i) { return \"i\"+i })\n  var index_str = \"this.offset+\" + indices.map(function(i) {\n        return \"this.stride[\" + i + \"]*i\" + i\n      }).join(\"+\")\n  var shapeArg = indices.map(function(i) {\n      return \"b\"+i\n    }).join(\",\")\n  var strideArg = indices.map(function(i) {\n      return \"c\"+i\n    }).join(\",\")\n  code.push(\n    \"function \"+className+\"(a,\" + shapeArg + \",\" + strideArg + \",d){this.data=a\",\n      \"this.shape=[\" + shapeArg + \"]\",\n      \"this.stride=[\" + strideArg + \"]\",\n      \"this.offset=d|0}\",\n    \"var proto=\"+className+\".prototype\",\n    \"proto.dtype='\"+dtype+\"'\",\n    \"proto.dimension=\"+dimension)\n\n  //view.size:\n  code.push(\"Object.defineProperty(proto,'size',{get:function \"+className+\"_size(){\\\nreturn \"+indices.map(function(i) { return \"this.shape[\"+i+\"]\" }).join(\"*\"),\n\"}})\")\n\n  //view.order:\n  if(dimension === 1) {\n    code.push(\"proto.order=[0]\")\n  } else {\n    code.push(\"Object.defineProperty(proto,'order',{get:\")\n    if(dimension < 4) {\n      code.push(\"function \"+className+\"_order(){\")\n      if(dimension === 2) {\n        code.push(\"return (Math.abs(this.stride[0])>Math.abs(this.stride[1]))?[1,0]:[0,1]}})\")\n      } else if(dimension === 3) {\n        code.push(\n\"var s0=Math.abs(this.stride[0]),s1=Math.abs(this.stride[1]),s2=Math.abs(this.stride[2]);\\\nif(s0>s1){\\\nif(s1>s2){\\\nreturn [2,1,0];\\\n}else if(s0>s2){\\\nreturn [1,2,0];\\\n}else{\\\nreturn [1,0,2];\\\n}\\\n}else if(s0>s2){\\\nreturn [2,0,1];\\\n}else if(s2>s1){\\\nreturn [0,1,2];\\\n}else{\\\nreturn [0,2,1];\\\n}}})\")\n      }\n    } else {\n      code.push(\"ORDER})\")\n    }\n  }\n\n  //view.set(i0, ..., v):\n  code.push(\n\"proto.set=function \"+className+\"_set(\"+args.join(\",\")+\",v){\")\n  if(useGetters) {\n    code.push(\"return this.data.set(\"+index_str+\",v)}\")\n  } else {\n    code.push(\"return this.data[\"+index_str+\"]=v}\")\n  }\n\n  //view.get(i0, ...):\n  code.push(\"proto.get=function \"+className+\"_get(\"+args.join(\",\")+\"){\")\n  if(useGetters) {\n    code.push(\"return this.data.get(\"+index_str+\")}\")\n  } else {\n    code.push(\"return this.data[\"+index_str+\"]}\")\n  }\n\n  //view.index:\n  code.push(\n    \"proto.index=function \"+className+\"_index(\", args.join(), \"){return \"+index_str+\"}\")\n\n  //view.hi():\n  code.push(\"proto.hi=function \"+className+\"_hi(\"+args.join(\",\")+\"){return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return [\"(typeof i\",i,\"!=='number'||i\",i,\"<0)?this.shape[\", i, \"]:i\", i,\"|0\"].join(\"\")\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"this.stride[\"+i + \"]\"\n    }).join(\",\")+\",this.offset)}\")\n\n  //view.lo():\n  var a_vars = indices.map(function(i) { return \"a\"+i+\"=this.shape[\"+i+\"]\" })\n  var c_vars = indices.map(function(i) { return \"c\"+i+\"=this.stride[\"+i+\"]\" })\n  code.push(\"proto.lo=function \"+className+\"_lo(\"+args.join(\",\")+\"){var b=this.offset,d=0,\"+a_vars.join(\",\")+\",\"+c_vars.join(\",\"))\n  for(var i=0; i<dimension; ++i) {\n    code.push(\n\"if(typeof i\"+i+\"==='number'&&i\"+i+\">=0){\\\nd=i\"+i+\"|0;\\\nb+=c\"+i+\"*d;\\\na\"+i+\"-=d}\")\n  }\n  code.push(\"return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return \"a\"+i\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"c\"+i\n    }).join(\",\")+\",b)}\")\n\n  //view.step():\n  code.push(\"proto.step=function \"+className+\"_step(\"+args.join(\",\")+\"){var \"+\n    indices.map(function(i) {\n      return \"a\"+i+\"=this.shape[\"+i+\"]\"\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"b\"+i+\"=this.stride[\"+i+\"]\"\n    }).join(\",\")+\",c=this.offset,d=0,ceil=Math.ceil\")\n  for(var i=0; i<dimension; ++i) {\n    code.push(\n\"if(typeof i\"+i+\"==='number'){\\\nd=i\"+i+\"|0;\\\nif(d<0){\\\nc+=b\"+i+\"*(a\"+i+\"-1);\\\na\"+i+\"=ceil(-a\"+i+\"/d)\\\n}else{\\\na\"+i+\"=ceil(a\"+i+\"/d)\\\n}\\\nb\"+i+\"*=d\\\n}\")\n  }\n  code.push(\"return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return \"a\" + i\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"b\" + i\n    }).join(\",\")+\",c)}\")\n\n  //view.transpose():\n  var tShape = new Array(dimension)\n  var tStride = new Array(dimension)\n  for(var i=0; i<dimension; ++i) {\n    tShape[i] = \"a[i\"+i+\"]\"\n    tStride[i] = \"b[i\"+i+\"]\"\n  }\n  code.push(\"proto.transpose=function \"+className+\"_transpose(\"+args+\"){\"+\n    args.map(function(n,idx) { return n + \"=(\" + n + \"===undefined?\" + idx + \":\" + n + \"|0)\"}).join(\";\"),\n    \"var a=this.shape,b=this.stride;return new \"+className+\"(this.data,\"+tShape.join(\",\")+\",\"+tStride.join(\",\")+\",this.offset)}\")\n\n  //view.pick():\n  code.push(\"proto.pick=function \"+className+\"_pick(\"+args+\"){var a=[],b=[],c=this.offset\")\n  for(var i=0; i<dimension; ++i) {\n    code.push(\"if(typeof i\"+i+\"==='number'&&i\"+i+\">=0){c=(c+this.stride[\"+i+\"]*i\"+i+\")|0}else{a.push(this.shape[\"+i+\"]);b.push(this.stride[\"+i+\"])}\")\n  }\n  code.push(\"var ctor=CTOR_LIST[a.length+1];return ctor(this.data,a,b,c)}\")\n\n  //Add return statement\n  code.push(\"return function construct_\"+className+\"(data,shape,stride,offset){return new \"+className+\"(data,\"+\n    indices.map(function(i) {\n      return \"shape[\"+i+\"]\"\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"stride[\"+i+\"]\"\n    }).join(\",\")+\",offset)}\")\n\n  //Compile procedure\n  var procedure = new Function(\"CTOR_LIST\", \"ORDER\", code.join(\"\\n\"))\n  return procedure(CACHED_CONSTRUCTORS[dtype], order)\n}\n\nfunction arrayDType(data) {\n  if(isBuffer(data)) {\n    return \"buffer\"\n  }\n  if(hasTypedArrays) {\n    switch(Object.prototype.toString.call(data)) {\n      case \"[object Float64Array]\":\n        return \"float64\"\n      case \"[object Float32Array]\":\n        return \"float32\"\n      case \"[object Int8Array]\":\n        return \"int8\"\n      case \"[object Int16Array]\":\n        return \"int16\"\n      case \"[object Int32Array]\":\n        return \"int32\"\n      case \"[object Uint8Array]\":\n        return \"uint8\"\n      case \"[object Uint16Array]\":\n        return \"uint16\"\n      case \"[object Uint32Array]\":\n        return \"uint32\"\n      case \"[object Uint8ClampedArray]\":\n        return \"uint8_clamped\"\n    }\n  }\n  if(Array.isArray(data)) {\n    return \"array\"\n  }\n  return \"generic\"\n}\n\nvar CACHED_CONSTRUCTORS = {\n  \"float32\":[],\n  \"float64\":[],\n  \"int8\":[],\n  \"int16\":[],\n  \"int32\":[],\n  \"uint8\":[],\n  \"uint16\":[],\n  \"uint32\":[],\n  \"array\":[],\n  \"uint8_clamped\":[],\n  \"buffer\":[],\n  \"generic\":[]\n}\n\n;(function() {\n  for(var id in CACHED_CONSTRUCTORS) {\n    CACHED_CONSTRUCTORS[id].push(compileConstructor(id, -1))\n  }\n});\n\nfunction wrappedNDArrayCtor(data, shape, stride, offset) {\n  if(data === undefined) {\n    var ctor = CACHED_CONSTRUCTORS.array[0]\n    return ctor([])\n  } else if(typeof data === \"number\") {\n    data = [data]\n  }\n  if(shape === undefined) {\n    shape = [ data.length ]\n  }\n  var d = shape.length\n  if(stride === undefined) {\n    stride = new Array(d)\n    for(var i=d-1, sz=1; i>=0; --i) {\n      stride[i] = sz\n      sz *= shape[i]\n    }\n  }\n  if(offset === undefined) {\n    offset = 0\n    for(var i=0; i<d; ++i) {\n      if(stride[i] < 0) {\n        offset -= (shape[i]-1)*stride[i]\n      }\n    }\n  }\n  var dtype = arrayDType(data)\n  var ctor_list = CACHED_CONSTRUCTORS[dtype]\n  while(ctor_list.length <= d+1) {\n    ctor_list.push(compileConstructor(dtype, ctor_list.length-1))\n  }\n  var ctor = ctor_list[d+1]\n  return ctor(data, shape, stride, offset)\n}\n\nmodule.exports = wrappedNDArrayCtor\n","/**\r\n * The `change` event, signalling that a different vertical coordinate value has been selected.\r\n * \r\n * @typedef {Object} Palette\r\n * @property {number} steps The number of colors in the palette.\r\n * @property {Array<number>} red Array of integers in [0,255] of length `steps`.\r\n * @property {Array<number>} green Array of integers in [0,255] of length `steps`.\r\n * @property {Array<number>} blue Array of integers in [0,255] of length `steps`.\r\n */\r\n\r\n/**\r\n * Returns a linearly interpolated palette out of CSS colors.\r\n * \r\n * @example\r\n * var grayscale = C.linearPalette(['#FFFFFF', '#000000'])\r\n * var rainbow = C.linearPalette(['#0000FF', '#00FFFF', '#00FF00', '#FFFF00', '#FF0000'])\r\n * \r\n * @param {Array<string>} colors An array of CSS colors.\r\n * @param {number} [steps=256] The number of palette colors to generate.\r\n * @return {Palette}\r\n */\r\nexport function linearPalette (colors, steps=256) {\r\n  if (steps === 1) {\r\n    // work-around, a gradient with 1 pixel becomes black otherwise\r\n    return directPalette([colors[0]])\r\n  }\r\n  // draw the gradient in a canvas\r\n  var canvas = document.createElement('canvas')\r\n  canvas.width = steps\r\n  canvas.height = 1\r\n  var ctx = canvas.getContext('2d')\r\n  var gradient = ctx.createLinearGradient(0, 0, steps - 1, 0)\r\n  var num = colors.length\r\n  for (var i = 0; i < num; i++) {\r\n    gradient.addColorStop(i / (num - 1), colors[i])\r\n  }\r\n  ctx.fillStyle = gradient\r\n  ctx.fillRect(0, 0, steps, 1)\r\n\r\n  // now read back values into arrays\r\n  var red = new Uint8Array(steps)\r\n  var green = new Uint8Array(steps)\r\n  var blue = new Uint8Array(steps)\r\n\r\n  var pix = ctx.getImageData(0, 0, steps, 1).data\r\n  for (let i = 0, j = 0; i < pix.length; i += 4, j++) {\r\n    red[j] = pix[i]\r\n    green[j] = pix[i + 1]\r\n    blue[j] = pix[i + 2]\r\n  }\r\n\r\n  return {\r\n    steps: red.length,\r\n    red: red,\r\n    green: green,\r\n    blue: blue\r\n  }\r\n}\r\n\r\n/**\r\n * Converts an array of CSS colors to a palette of the same size.\r\n * \r\n * @example\r\n * var bw = C.directPalette(['#000000', '#FFFFFF'])\r\n * // bw.steps == 2\r\n * \r\n * @param {Array<string>} colors An array of CSS colors.\r\n * @return {Palette}\r\n */\r\nexport function directPalette (colors) {\r\n  var canvas = document.createElement('canvas')\r\n  canvas.width = 1\r\n  canvas.height = 1\r\n  var ctx = canvas.getContext('2d')\r\n  \r\n  var steps = colors.length\r\n  \r\n  var red = new Uint8Array(steps)\r\n  var green = new Uint8Array(steps)\r\n  var blue = new Uint8Array(steps)\r\n  \r\n  for (var i=0; i < colors.length; i++) {\r\n    ctx.fillStyle = colors[i]\r\n    ctx.fillRect(0, 0, 1, 1)\r\n    var pix = ctx.getImageData(0, 0, 1, 1).data\r\n    red[i] = pix[0]\r\n    green[i] = pix[1]\r\n    blue[i] = pix[2]\r\n  }\r\n  \r\n  return {\r\n    steps: red.length,\r\n    red: red,\r\n    green: green,\r\n    blue: blue\r\n  }\r\n}\r\n\r\n/**\r\n * Converts any CSS color to an `{r,g,b}` object.\r\n * \r\n * @param {string} cssColor The CSS color\r\n * @return {Object} An object with r,g,b members with each a number in [0,255].\r\n * \r\n * @example\r\n * let rgb = cssToRGB('white') // {r: 255, g: 255, b: 255}\r\n */\r\nexport function cssToRGB (cssColor) {\r\n  let palette = directPalette([cssColor])\r\n  return {\r\n    r: palette.red[0],\r\n    g: palette.green[0],\r\n    b: palette.blue[0],\r\n  }\r\n}\r\n\r\n/**\r\n * Create a palette from a description object.\r\n * \r\n * Currently, two forms are supported:\r\n * \r\n * {\r\n *   \"colors\": [\"red\", \"blue\", ..]\r\n *   \"interpolation\": \"linear\",\r\n *   \"steps\": 200\r\n * }\r\n * \r\n * {\r\n *   \"colors\": [\"red\", \"blue\", ..]\r\n * }\r\n * \r\n * @return {Palette}\r\n */\r\nexport function paletteFromObject (paletteSpec) {\r\n  if (!paletteSpec) {\r\n    return\r\n  }\r\n  let colors = paletteSpec.colors\r\n  let palette\r\n  if (paletteSpec.interpolation === 'linear') {\r\n    palette = linearPalette(colors, paletteSpec.steps)\r\n  } else {\r\n    palette = directPalette(colors)\r\n  }\r\n  return palette\r\n}\r\n\r\n/**\r\n * Linearly scales a value to a given palette and value extent.\r\n * \r\n * @example\r\n * var value = 20\r\n * var grayscale = C.linearPalette(['#FFFFFF', '#000000'], 50) // 50 steps\r\n * var scaled = C.scale(value, grayscale, [0,100])\r\n * // scaled == 10\r\n * \r\n * @param {number} val The value to scale.\r\n * @param {object} palette The palette onto which the value is scaled.\r\n * @param {Array} extent The lower and upper bound within which the value is scaled,\r\n *   typically the value extent of a legend.\r\n * @return {number} The scaled value.\r\n * \r\n * @private\r\n */\r\nexport function scale (val, palette, extent) {\r\n  // scale val to [0,paletteSize-1] using the palette extent\r\n  // (IDL bytscl formula: http://www.exelisvis.com/docs/BYTSCL.html)\r\n  let scaled = Math.trunc((palette.steps - 1 + 0.9999) * (val - extent[0]) / (extent[1] - extent[0]))\r\n  return scaled\r\n}\r\n\r\n/**\r\n * Return enlarged extent if start and end are the same value,\r\n * otherwise return unchanged.\r\n * \r\n * @param {Array<number>} extent The extent [min,max] to enlarge.\r\n * @param {number} [amount] The ratio by which to extend on each side.\r\n * @return {Array<number>} The enlarged extent.\r\n * \r\n * @private\r\n */\r\nexport function enlargeExtentIfEqual (extent, amount=0.1) {\r\n  if (extent[0] === extent[1]) {\r\n    let buffer = extent[0]*amount\r\n    return [extent[0]-buffer, extent[1]+buffer]\r\n  } else {\r\n    return extent\r\n  }\r\n}\r\n\r\n/**\r\n * Manages palettes under common names.\r\n *  \r\n * @example\r\n * var palettes = new C.PaletteManager({defaultSteps: 10})\r\n * palettes.addLinear('grayscale', ['#FFFFFF', '#000000']) // 10 steps\r\n * palettes.addLinear('grayscalehd', ['#FFFFFF', '#000000'], {steps: 200}) // high-resolution palette\r\n * palettes.add('breweroranges3', ['#fee6ce', '#fdae6b', '#e6550d']) // palette of those 3 colors\r\n * palettes.add('mycustom', {red: [0,255], green: [0,0], blue: [10,20]}) // different syntax\r\n */\r\nexport class PaletteManager {\r\n  \r\n  /**\r\n   * @param {Integer} defaultSteps The default number of steps when adding palettes with addLinear().\r\n   */\r\n  constructor({defaultSteps=256} = {}) {\r\n    this._defaultSteps = defaultSteps\r\n    this._palettes = new Map()\r\n  }\r\n  \r\n  /**\r\n   * Store a supplied generic palette under the given name.\r\n   * \r\n   * @example\r\n   * var palettes = new C.PaletteManager()\r\n   * palettes.add('breweroranges3', ['#fee6ce', '#fdae6b', '#e6550d']) // palette of those 3 colors\r\n   * palettes.add('mycustom', {red: [0,255], green: [0,0], blue: [10,20]}) // different syntax\r\n   * \r\n   * @param {string} name The unique name of the palette.\r\n   * @param {Palette|Array<string>} palette A palette object or an array of CSS colors.\r\n   */\r\n  add (name, palette) {\r\n    if (Array.isArray(palette)) {\r\n      palette = directPalette(palette)\r\n    }\r\n    \r\n    if (![palette.red, palette.green, palette.blue].every(arr => arr.length === palette.red.length)) {\r\n      throw new Error('The red, green, blue arrays of the palette must be of equal lengths')\r\n    }\r\n    if (!(palette.red instanceof Uint8Array)) {\r\n      palette.red = _asUint8Array(palette.red)\r\n      palette.green = _asUint8Array(palette.green)\r\n      palette.blue = _asUint8Array(palette.blue)\r\n    }\r\n    palette.steps = palette.red.length // for convenience in clients\r\n    this._palettes.set(name, palette)\r\n  }\r\n  \r\n  /**\r\n   * Store a linear palette under the given name created with the given CSS color specifications.\r\n   * \r\n   * @example\r\n   * var palettes = new C.PaletteManager()\r\n   * palettes.addLinear('grayscale', ['#FFFFFF', '#000000']) // 10 steps\r\n   * palettes.addLinear('grayscalehd', ['#FFFFFF', '#000000'], {steps: 200})\r\n   * \r\n   * @param {String} name The unique name of the palette\r\n   * @param {Array<string>} colors An array of CSS color specifications\r\n   * @param {number} steps Use a different number of steps than the default of this manager.\r\n   */\r\n  addLinear (name, colors, {steps} = {}) {\r\n    this.add(name, linearPalette(colors, steps ? steps : this._defaultSteps))\r\n  }\r\n  \r\n  /**\r\n   * Return the palette stored under the given name, or throw an error if not found.\r\n   * The palette is an object with properties steps, red, green, and blue.\r\n   * Each of the color arrays is an Uint8Array of length steps.\r\n   * \r\n   * @param {string} name The unique name of the palette\r\n   * @returns {Palette}\r\n   */\r\n  get (name) {\r\n    var palette = this._palettes.get(name)\r\n    if (palette === undefined) {\r\n      throw new Error('Palette \"' + name + '\" not found')\r\n    }\r\n    return palette\r\n  }\r\n  \r\n  get [Symbol.iterator] () {\r\n    return this._palettes[Symbol.iterator]\r\n  }\r\n}\r\n\r\nfunction _asUint8Array (arr) {\r\n  var ta = new Uint8Array(arr.length)\r\n  for (var i=0; i < arr.length; i++) {\r\n    let val = arr[i]\r\n    if (val < 0 || val > 255) {\r\n      throw new Error('Array value must be within [0,255], but is: ' + val)\r\n    }\r\n    ta[i] = val\r\n  }\r\n  return ta\r\n}\r\n","import {linearPalette, directPalette, paletteFromObject, scale} from './palettes.js'\r\n\r\nconst DEFAULT_CONTINUOUS_PALETTE = () => linearPalette(['#deebf7', '#3182bd']) // blues\r\nconst DEFAULT_CATEGORICAL_PALETTE = n => {\r\n  if (n > 12) {\r\n    throw new Error('not enough built-in categorical colors, must supply custom colors')\r\n  }\r\n  return directPalette(['#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99','#e31a1c',\r\n                        '#fdbf6f','#ff7f00','#cab2d6','#6a3d9a','#ffff99','#b15928'].slice(0,n))\r\n}\r\n\r\n/**\r\n * The `paletteChange` event, signalling that the palette has changed.\r\n * \r\n * @typedef {L.Event} PaletteMixin#paletteChange\r\n */\r\n\r\n/**\r\n * The `paletteExtentChange` event, signalling that the palette extent has changed.\r\n * \r\n * @typedef {L.Event} PaletteMixin#paletteExtentChange\r\n */\r\n\r\n/**\r\n * A mixin that encapsulates the palette logic of a coverage layer,\r\n * supporting categorical and continuous coverage parameters.\r\n * \r\n * The following functions/properties are supplied:\r\n * \r\n * - initializePalette() - to be called once data has been loaded so that computePaletteExtent can be called\r\n * - get/set palette\r\n * - get/set paletteExtent\r\n * - setPaletteExtent(extent) - like set paletteExtent, but returns a Promise to know when calculations etc. are done\r\n * - getPaletteIndex(val) - returns the color index for the given value\r\n * \r\n * The base class must supply the following functions/properties:\r\n * \r\n * - options.palette (optional)\r\n * - options.paletteExtent (optional) - initial value that computePaletteExtent is called with\r\n * - parameter\r\n * - redraw()\r\n * - computePaletteExtent(extent) - returns a Promise with the computed extent; gets called when .paletteExtent is set to a string value\r\n * - canUsePalette() (optional) - if this method exists and returns false, then .palette returns undefined\r\n * \r\n * @param {class} base The base class.\r\n * @return {class} The base class with PaletteMixin.\r\n */\r\nexport function PaletteMixin (base) {\r\n  return class extends base {\r\n    \r\n    initializePalette () {\r\n      let options = this.options\r\n      let parameter = this.parameter\r\n      if (!parameter) {\r\n        return Promise.resolve()\r\n      }\r\n      let categories = parameter.observedProperty.categories\r\n      \r\n      if (categories) {\r\n        this._initCategoryIdxMap()\r\n      }\r\n      \r\n      if (this._palette) {\r\n        // do nothing, already set\r\n      } else if (options.palette) {\r\n        this._palette = options.palette\r\n      } else if (parameter.preferredPalette) {\r\n        this._palette = paletteFromObject(parameter.preferredPalette)\r\n      } else if (categories) {\r\n        if (categories.every(cat => cat.preferredColor)) {\r\n          this._palette = directPalette(categories.map(cat => cat.preferredColor))\r\n        } else {\r\n          this._palette = DEFAULT_CATEGORICAL_PALETTE(categories.length)\r\n        }\r\n      } else {\r\n        this._palette = DEFAULT_CONTINUOUS_PALETTE()\r\n      }\r\n      \r\n      if (categories && categories.length !== this._palette.steps) {\r\n        throw new Error('Categorical palettes must match the number of categories of the parameter')\r\n      }\r\n            \r\n      this._paletteExtent = this._paletteExtent || options.paletteExtent\r\n      \r\n      if (this.parameter.categoryEncoding) {\r\n        // categorical parameter, does not depend on palette extent\r\n        let valIdxMap = this._categoryIdxMap\r\n        let max = valIdxMap.length - 1\r\n        this.getPaletteIndex = val => {\r\n          if (val === null || val < 0 || val > max) return\r\n          let idx = valIdxMap[val]\r\n          if (idx === 255) return\r\n          return idx\r\n        }\r\n      }\r\n      \r\n      if (!this.canUsePalette || this.canUsePalette()) {\r\n        return this.setPaletteExtent(this._paletteExtent, true)\r\n          .then(() => this._updatePaletteIndexFn())\r\n      } else {\r\n        return Promise.resolve()\r\n      }\r\n    }\r\n    \r\n    _updatePaletteIndexFn () {\r\n      if (!this.parameter.categoryEncoding) {\r\n        // continuous parameter\r\n        let palette = this.palette\r\n        let extent = this.paletteExtent\r\n        this.getPaletteIndex = val => {\r\n          if (val === null) return\r\n          let idx = scale(val, palette, extent)\r\n          return idx\r\n        }\r\n      }\r\n    }\r\n    \r\n    get palette () {\r\n      if (this.parameter && (!this.canUsePalette || this.canUsePalette())) {\r\n        return this._palette\r\n      }\r\n    }\r\n    \r\n    set palette (p) {\r\n      this._palette = p\r\n      this._updatePaletteIndexFn()\r\n      this.redraw()\r\n      this.fire('paletteChange')\r\n    }\r\n    \r\n    set paletteExtent (extent) {\r\n      this.setPaletteExtent(extent)\r\n    }\r\n    \r\n    get paletteExtent () {\r\n      return this._paletteExtent\r\n    }\r\n    \r\n    setPaletteExtent (extent, skipRedraw) {\r\n      if (this.parameter.observedProperty.categories) {\r\n        return Promise.resolve()\r\n      }\r\n      \r\n      let oldExtent = this.paletteExtent\r\n      let hasChanged = newExtent => {\r\n        if (!Array.isArray(oldExtent)) return true\r\n        if (oldExtent[0] !== newExtent[0] || oldExtent[1] !== newExtent[1]) return true\r\n        return false\r\n      }\r\n      let res = Array.isArray(extent) ? Promise.resolve(extent) : this.computePaletteExtent(extent)\r\n      return res.then(newExtent => {\r\n        // ignore invalid extents (may come from using ParameterSync)\r\n        if (Array.isArray(newExtent) && isNaN(newExtent[0])) return\r\n        if (!hasChanged(newExtent)) return\r\n        this._paletteExtent = newExtent\r\n        this._updatePaletteIndexFn()\r\n        if (!skipRedraw) {\r\n          this.redraw()\r\n        }\r\n        this.fire('paletteExtentChange')\r\n      })\r\n    }\r\n            \r\n    /**\r\n     * Sets up a lookup table from categorical range value to palette index.\r\n     */\r\n    _initCategoryIdxMap () {\r\n      let param = this.parameter\r\n      if (!param.categoryEncoding) return\r\n      \r\n      // categorical parameter with integer encoding\r\n      // Note: The palette order is equal to the categories array order.\r\n      let max = -Infinity\r\n      let min = Infinity\r\n      let categories = param.observedProperty.categories\r\n      let encoding = param.categoryEncoding\r\n      for (let category of categories) {\r\n        if (encoding.has(category.id)) {\r\n          for (let val of encoding.get(category.id)) {\r\n            max = Math.max(max, val)\r\n            min = Math.min(min, val)\r\n          }\r\n        }\r\n      }\r\n      let valIdxMap\r\n      if (categories.length < 256) {\r\n        if (max > 10000 || min < 0) {\r\n          // TODO implement fallback to Map implementation\r\n          throw new Error('category values too high (>10000) or low (<0)')\r\n        }\r\n        valIdxMap = new Uint8Array(max+1)\r\n        for (let i=0; i <= max; i++) {\r\n          // the above length < 256 check ensures that no palette index is ever 255\r\n          valIdxMap[i] = 255\r\n        }\r\n        \r\n        for (let idx=0; idx < categories.length; idx++) {\r\n          let category = categories[idx]\r\n          if (encoding.has(category.id)) {\r\n            for (let val of param.categoryEncoding.get(category.id)) {\r\n              valIdxMap[val] = idx\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        throw new Error('Too many categories: ' + categories.length)\r\n      }\r\n      this._categoryIdxMap = valIdxMap\r\n    }\r\n  }\r\n}\r\n","import {loadProjection, getHorizontalCRSComponents} from 'covutils'\r\n\r\n/**\r\n * A mixin that encapsulates loading of a single coverage for use in layers.\r\n * \r\n * The base class must supply the following functions/properties:\r\n * \r\n * .coverage\r\n * .parameter (optional)\r\n * ._loadCoverageSubset() (optional)\r\n * \r\n * The following functions/properties are supplied:\r\n * \r\n * .domain (after calling load())\r\n * .range (after calling load(); only if .parameter is set and ._loadCoverageSubset is undefined)\r\n * \r\n * @param {class} base The base class.\r\n * @return {class} The base class with CoverageMixin.\r\n */\r\nexport function CoverageMixin (base) {\r\n  return class extends base {\r\n    /**\r\n     * Load all data without adding anything to the map.\r\n     * After loading is done, all functions and properties can be accessed (like getLatLng()).\r\n     */\r\n    load () {\r\n      this.fire('dataLoading') // for supporting loading spinners\r\n      \r\n      let promise = this.coverage.loadDomain().then(domain => {\r\n        this.domain = domain\r\n        \r\n        ;[this._projX, this._projY] = getHorizontalCRSComponents(domain)\r\n        return loadProjection(domain)\r\n      }).then(proj => {\r\n        this.projection = proj\r\n      })\r\n      if (this._loadCoverageSubset) {\r\n        promise = promise.then(() => this._loadCoverageSubset())\r\n      } else if (this.parameter) {\r\n        promise = promise.then(() => this.coverage.loadRange(this.parameter.key)).then(range => {\r\n          this.range = range\r\n        })\r\n      }\r\n      \r\n      promise = promise.then(() => {\r\n        this.fire('dataLoad')\r\n      }).catch(e => {\r\n        console.error(e)\r\n        this.fire('error', e)\r\n        this.fire('dataLoad')\r\n      })\r\n      return promise\r\n    }\r\n  }\r\n}","import L from 'leaflet'\r\nimport ndarray from 'ndarray'\r\nimport {indexOfNearest, isDomain, fromDomain, minMaxOfRange, getReferenceObject, isEllipsoidalCRS} from 'covutils'\r\n\r\nimport {enlargeExtentIfEqual} from './palettes.js'\r\nimport {PaletteMixin} from './PaletteMixin.js'\r\nimport {CoverageMixin} from './CoverageMixin.js'\r\n  \r\n/**\r\n * Renderer for Coverages and Domains conforming to the `Grid` domain type of CovJSON.\r\n * For Domain objects, a dummy parameter and range data is created.\r\n * \r\n * @example\r\n * var cov = ... // get Coverage data\r\n * var layer = new C.Grid(cov, {\r\n *   parameter: 'salinity',\r\n *   time: new Date('2015-01-01T12:00:00Z'),\r\n *   vertical: 50,\r\n *   palette: C.linearPalette(['#FFFFFF', '#000000']),\r\n *   paletteExtent: 'subset'\r\n * })\r\n * \r\n * @see https://covjson.org/domain-types/#grid\r\n * \r\n * @emits {DataLayer#afterAdd} Layer is initialized and was added to the map\r\n * @emits {DataLayer#dataLoading} Data loading has started\r\n * @emits {DataLayer#dataLoad} Data loading has finished (also in case of errors)\r\n * @emits {DataLayer#error} Error when loading data\r\n * @emits {DataLayer#axisChange} Axis coordinate has changed (e.axis === 'time'|'vertical')\r\n * @emits {PaletteMixin#paletteChange} Palette has changed\r\n * @emits {PaletteMixin#paletteExtentChange} Palette extent has changed\r\n * \r\n * @extends {L.GridLayer}\r\n * @extends {CoverageMixin}\r\n * @extends {PaletteMixin}\r\n * @implements {DataLayer}\r\n */\r\nexport class Grid extends PaletteMixin(CoverageMixin(L.GridLayer)) {\r\n  \r\n  /**\r\n   * The key of the parameter to display must be given in the 'parameter' options property,\r\n   * except when the coverage data object is a Domain object.\r\n   * \r\n   * Optional time and vertical axis target values can be defined with the 'time' and\r\n   * 'vertical' options properties. The closest values on the respective axes are chosen.\r\n   * \r\n   * @param {Coverage|Domain} cov The coverage or domain object to visualize.\r\n   * @param {Object} [options] The options object.\r\n   * @param {string} [options.parameter] The key of the parameter to display, not needed for domain objects.\r\n   * @param {Date} [options.time] The initial time slice to display, defaults to the first one.\r\n   * @param {number} [options.vertical] The initial vertical slice to display, defaults to the first one.\r\n   * @param {Palette} [options.palette] The initial color palette to use, the default depends on the parameter type.\r\n   * @param {string} [options.paletteExtent='subset'] The initial palette extent, one of \r\n   *  `subset` (computed from data of current time/vertical slice),\r\n   *  `fov` (computed from data in map field of view; not implemented yet),\r\n   *  or specific: [-10,10].\r\n   */\r\n  constructor (cov, options={}) {\r\n    super()\r\n    \r\n    if (isDomain(cov)) {\r\n      cov = fromDomain(cov)\r\n      options.parameter = cov.parameters.keys().next().value\r\n      delete options.keys\r\n    }\r\n    \r\n    if (!options.paletteExtent) {\r\n      options.paletteExtent = 'subset'\r\n    }\r\n    \r\n    L.Util.setOptions(this, options)\r\n    \r\n    this._cov = cov\r\n    this._param = cov.parameters.get(options.keys ? options.keys[0] :options.parameter)\r\n    this._axesSubset = { // x and y are not subsetted\r\n        t: {coordPref: options.time ? options.time.toISOString() : undefined},\r\n        z: {coordPref: options.vertical}\r\n    }\r\n\r\n    /**\r\n     * The vertical reference system object, used by {@link VerticalAxis}.\r\n     * @type {Object}\r\n     */\r\n    this.crsVerticalAxis = undefined\r\n  }\r\n  \r\n  /**\r\n   * @ignore\r\n   * @override\r\n   */\r\n  onAdd (map) {\r\n    // \"loading\" and \"load\" events are provided by the underlying GridLayer class\r\n    this._map = map\r\n\r\n    this.load()\r\n      .then(() => this.initializePalette())\r\n      .then(() => {\r\n        // used in controls/VerticalAxis.js\r\n        let vertRef = getReferenceObject(this.domain, 'z')\r\n        if (vertRef && vertRef.coordinates.length === 1) {\r\n          let vertRefSys = vertRef.system\r\n          if (vertRefSys.cs && (vertRefSys.cs.csAxes || vertRefSys.cs.axes)) {\r\n            this.crsVerticalAxis = vertRefSys.cs.csAxes ? vertRefSys.cs.csAxes[0] : vertRefSys.cs.axes[0]\r\n          }\r\n        } else {\r\n          // TODO handle vertical axis part of 3D CRS\r\n        }\r\n      })\r\n      .then(() => {\r\n        this._errored = false\r\n        super.onAdd(map)\r\n        this.fire('afterAdd')\r\n      })\r\n      .catch(e => {\r\n        this._errored = true\r\n        console.log(e)\r\n        super.onAdd(map)\r\n      })\r\n  }\r\n  \r\n  /**\r\n   * @ignore\r\n   * @override\r\n   */\r\n  onRemove (map) {\r\n    delete this._map\r\n    // TODO delete references to domain/range, caching logic should happen elsewhere\r\n    super.onRemove(map)\r\n  }\r\n  \r\n  /**\r\n   * Returns the geographic bounds of the coverage.\r\n   * \r\n   * For projected coverages this is an approximation based on unprojecting the four bounding box corners\r\n   * and fitting all four points into a geographic bounding box.\r\n   * \r\n   * @returns {L.LatLngBounds}\r\n   */\r\n  getBounds () {\r\n    let bbox\r\n    if (this._cov.bbox) {\r\n      bbox = this._cov.bbox\r\n    } else {\r\n      bbox = this._getDomainBbox()\r\n      let proj = this.projection\r\n      // for projected CRSs this approximates the geographic bbox by unprojecting the projected bbox corners\r\n      // for geographic CRSs the result will be identical \r\n      let p1 = proj.unproject({x: bbox[0], y: bbox[1]})\r\n      let p2 = proj.unproject({x: bbox[0], y: bbox[3]})\r\n      let p3 = proj.unproject({x: bbox[2], y: bbox[1]})\r\n      let p4 = proj.unproject({x: bbox[2], y: bbox[3]})\r\n      return L.latLngBounds([p1, p2, p3, p4])\r\n    }\r\n    let southWest = L.latLng(bbox[1], bbox[0])\r\n    let northEast = L.latLng(bbox[3], bbox[2])\r\n    let bounds = L.latLngBounds(southWest, northEast)\r\n    return bounds\r\n  }\r\n  \r\n  /**\r\n   * Subsets the temporal and vertical axes based on the _axesSubset.*.coordPref property,\r\n   * which is regarded as a preference and does not have to exactly match a coordinate.\r\n   * \r\n   * The return value is a promise that succeeds with an empty result and\r\n   * sets this._subsetCov to the subsetted coverage.\r\n   * The subsetting always fixes a single time and vertical slice, choosing the first\r\n   * axis value if no preference was given.\r\n   * \r\n   * After calling this method, _axesSubset.*.idx and _axesSubset.*.coord have\r\n   * values from the actual axes.\r\n   */\r\n  _loadCoverageSubset () {        \r\n    let spec = {}\r\n    for (let axis of Object.keys(this._axesSubset)) {\r\n      let ax = this._axesSubset[axis]\r\n      if (!this.domain.axes.has(axis)) {\r\n        continue\r\n      }\r\n      if (ax.coordPref == undefined) { // == also handles null\r\n        spec[axis] = {target: this.domain.axes.get(axis).values[0]}\r\n      } else {\r\n        spec[axis] = {target: ax.coordPref}\r\n      }\r\n    }\r\n    \r\n    this.fire('dataLoading') // for supporting loading spinners\r\n    return this._cov.subsetByValue(spec)\r\n      .then(subsetCov => {\r\n        this._subsetCov = subsetCov\r\n        //  the goal is to avoid reloading data when approximating palette extent via subsetting\r\n        //  but: memory has to be freed when the layer is removed from the map\r\n        //      -> therefore cacheRanges is set on subsetCov whose reference is removed on onRemove\r\n        subsetCov.cacheRanges = true\r\n        return Promise.all([subsetCov.loadDomain(), subsetCov.loadRange(this._param.key)])\r\n      })\r\n      .then(([subsetDomain, subsetRange]) => {\r\n        this._subsetDomain = subsetDomain\r\n        this._subsetRange = subsetRange\r\n        this.fire('dataLoad')\r\n      })\r\n      .catch(e => {\r\n        this.fire('dataLoad')\r\n        throw e\r\n      })\r\n  }\r\n  \r\n  /**\r\n   * The coverage object associated to this layer.\r\n   * \r\n   * @type {Coverage}\r\n   */\r\n  get coverage () {\r\n    return this._cov\r\n  }\r\n  \r\n  /**\r\n   * The parameter that is visualized.\r\n   * \r\n   * @type {Parameter}\r\n   */\r\n  get parameter () {\r\n    return this._param\r\n  }\r\n  \r\n  /**\r\n   * Sets the currently active time to the one closest to the given Date object.\r\n   * Throws an exception if there is no time axis.\r\n   * \r\n   * @type {Date}\r\n   */\r\n  set time (val) {\r\n    if (!this.domain.axes.has('t')) {\r\n      throw new Error('No time axis found')\r\n    }\r\n    let old = this.time\r\n    this._axesSubset.t.coordPref = val.toISOString()\r\n    this._loadCoverageSubset().then(() => {\r\n      if (old === this.time) return\r\n      this.redraw()\r\n      this.fire('axisChange', {axis: 'time'})\r\n    })\r\n  }\r\n  \r\n  /**\r\n   * The currently active time on the temporal axis as Date object, \r\n   * or undefined if the grid has no time axis.\r\n   * \r\n   * @type {Date|undefined}\r\n   */\r\n  get time () {\r\n    if (this.domain.axes.has('t')) {\r\n      let time = this._subsetDomain.axes.get('t').values[0]\r\n      return new Date(time)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * The time slices that make up the coverage, or undefined if the grid has no time axis .\r\n   * \r\n   * @type {Array<Date>|undefined}\r\n   */\r\n  get timeSlices () {\r\n    if (this.domain.axes.has('t')) {\r\n      return this.domain.axes.get('t').values.map(t => new Date(t))\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Sets the currently active vertical coordinate to the one closest to the given value.\r\n   * \r\n   * @type {number}\r\n   */\r\n  set vertical (val) {\r\n    if (!this.domain.axes.has('z')) {\r\n      throw new Error('No vertical axis found')\r\n    }\r\n    let old = this.vertical\r\n    this._axesSubset.z.coordPref = val\r\n    this._loadCoverageSubset().then(() => {\r\n      if (old === this.vertical) return\r\n      this.redraw()\r\n      this.fire('axisChange', {axis: 'vertical'}) \r\n    })  \r\n  }\r\n  \r\n  /**\r\n   * The currently active vertical coordinate as a number, \r\n   * or undefined if the grid has no vertical axis.\r\n   * \r\n   * @type {number|undefined}\r\n   */\r\n  get vertical () {\r\n    if (this.domain.axes.has('z')) {\r\n      let val = this._subsetDomain.axes.get('z').values[0]\r\n      return val\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * The vertical slices that make up the coverage, or undefined if the grid has no vertical axis .\r\n   * \r\n   * @type {Array<number>|undefined}\r\n   */\r\n  get verticalSlices () {\r\n    if (this.domain.axes.has('z')) {\r\n      let vals = this.domain.axes.get('z').values\r\n      if (ArrayBuffer.isView(vals)) {\r\n        // convert to plain Array to allow easier use\r\n        vals = [...vals]\r\n      }\r\n      return vals\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * See {@link PaletteMixin}.\r\n   * \r\n   * @ignore\r\n   */\r\n  computePaletteExtent (extent) {\r\n    if (extent === 'subset') {\r\n      // scan the current subset for min/max values\r\n      \r\n      let xlen = this._subsetRange.shape.get(this._projX)\r\n      let ylen = this._subsetRange.shape.get(this._projY)\r\n\r\n      // check if subsetted size is manageable\r\n      if (xlen * ylen < 1000*1000) {\r\n        extent = minMaxOfRange(this._subsetRange)\r\n        extent = enlargeExtentIfEqual(extent)\r\n        return Promise.resolve(extent)\r\n      } else {\r\n        // subset x and y to get a fast estimate of the palette extent\r\n        // since it is an estimate, the lower and upper bound needs a small buffer\r\n        // (to prevent out-of-bounds colours)\r\n        let xconstraint = {start: 0, stop: xlen, step: Math.max(Math.round(xlen/1000), 1)}\r\n        let yconstraint = {start: 0, stop: ylen, step: Math.max(Math.round(ylen/1000), 1)}\r\n        \r\n        return this._subsetCov.subsetByIndex({[this._projX]: xconstraint, [this._projY]: yconstraint})        \r\n          .then(subsetCov => {\r\n            return subsetCov.loadRange(this._param.key).then(subsetRange => {\r\n               let [min,max] = minMaxOfRange(subsetRange)\r\n               let buffer = (max-min)*0.1 // 10% buffer on each side\r\n               extent = [min-buffer, max+buffer]\r\n               return extent\r\n            })\r\n          })\r\n      }\r\n    } else if (extent === 'fov') {\r\n      // scan the values that are currently in field of view on the map for min/max\r\n      // this implies using the current subset\r\n      let bounds = this._map.getBounds()\r\n\r\n      // TODO implement\r\n      throw new Error('NOT IMPLEMENTED YET')      \r\n    } else {\r\n      throw new Error('Unknown extent specification: ' + extent)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Return the displayed value at a given geographic position.\r\n   * If out of bounds, then undefined is returned, otherwise a number or null (for no data).\r\n   * \r\n   * @param {L.LatLng} latlng\r\n   * @returns {number|null|undefined}\r\n   */\r\n  getValueAt (latlng) {\r\n    let X = this.domain.axes.get(this._projX).values\r\n    let Y = this.domain.axes.get(this._projY).values\r\n    let bbox = this._getDomainBbox()\r\n\r\n    let {lat, lng} = latlng\r\n    let {x,y} = this.projection.project({lat, lon: lng})\r\n\r\n    // we first check whether the tile pixel is outside the domain bounding box\r\n    // in that case we skip it as we do not want to extrapolate\r\n    if (x < bbox[0] || x > bbox[2] || y < bbox[1] || y > bbox[3]) {\r\n      return\r\n    }\r\n    \r\n    let iy = indexOfNearest(Y, y)\r\n    let ix = indexOfNearest(X, x)\r\n\r\n    return this._subsetRange.get({[this._projY]: iy, [this._projX]: ix})\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   * @override\r\n   * \r\n   * @param {L.Point} coords The tile coordinates (with z being zoom level).\r\n   * @return {HTMLCanvasElement}\r\n   */\r\n  createTile (coords) {\r\n    let tile = L.DomUtil.create('canvas', 'leaflet-tile')\r\n\r\n    // setup tile width and height according to the options\r\n    var size = this.getTileSize()\r\n    tile.width = size.x\r\n    tile.height = size.y\r\n\r\n    this.drawTile(tile, coords)\r\n\r\n    return tile\r\n  }\r\n  \r\n  /**\r\n   * @ignore\r\n   * \r\n   * @param {HTMLCanvasElement} The canvas to draw on.\r\n   * @param {L.Point} coords The tile coordinates (with z being zoom level).\r\n   */\r\n  drawTile (canvas, coords) {\r\n    if (this._errored) return\r\n    \r\n    let ctx = canvas.getContext('2d')\r\n    let tileSize = this.getTileSize()\r\n    \r\n    let imgData = ctx.getImageData(0, 0, tileSize.x, tileSize.y)\r\n    // Uint8ClampedArray, 1-dimensional, in order R,G,B,A,R,G,B,A,... row-major\r\n    let rgba = ndarray(imgData.data, [tileSize.y, tileSize.x, 4])\r\n    \r\n    let {red, green, blue} = this.palette\r\n        \r\n    let getPaletteIndex = this.getPaletteIndex\r\n    let setPixel = (tileY, tileX, val) => {\r\n      let idx = getPaletteIndex(val)\r\n      if (idx !== undefined) {\r\n        rgba.set(tileY, tileX, 0, red[idx])\r\n        rgba.set(tileY, tileX, 1, green[idx])\r\n        rgba.set(tileY, tileX, 2, blue[idx])\r\n        rgba.set(tileY, tileX, 3, 255)\r\n      }\r\n    }\r\n    \r\n    let vals = this._subsetRange.get\r\n    \r\n    if (this._isDomainUsingEllipsoidalCRS()) {\r\n      if (this._isRectilinearGeodeticMap()) {\r\n        // here we can apply heavy optimizations as the map CRS matches the domain CRS \r\n        this._drawGeodeticCRSWithRectilinearMapProjection(setPixel, coords, vals)\r\n      } else {\r\n        // this is for any random map projection\r\n        // here we have to unproject each map pixel individually and find the matching domain index coordinates\r\n        this._drawGeodeticCRSWithAnyMapProjection(setPixel, coords, vals)\r\n      }\r\n    } else {\r\n      // here we have to unproject each map pixel individually, \r\n      // project it into domain projection coordinates, and find the domain index coordinates\r\n      if (this._isRectilinearGeodeticMap()) {\r\n        this._drawProjectedCRSWithRectilinearMapProjection(setPixel, coords, vals)\r\n      } else {\r\n        this._drawProjectedCRSWithAnyMapProjection(setPixel, coords, vals)\r\n      }\r\n    }\r\n    \r\n    ctx.putImageData(imgData, 0, 0)    \r\n  }\r\n  \r\n  /**\r\n   * Derives the bounding box of the x,y CRS axes in domain CRS coordinates.\r\n   * \r\n   * @return {Array} [xmin,ymin,xmax,ymax]\r\n   */\r\n  _getDomainBbox () {\r\n    let extent = (x, xBounds) => {\r\n      let xend = x.length - 1\r\n      let xmin, xmax\r\n      if (xBounds) {\r\n        [xmin,xmax] = [xBounds.get(0)[0], xBounds.get(xend)[1]]\r\n      } else {\r\n        [xmin,xmax] = [x[0], x[xend]]\r\n      }\r\n      let xDescending = xmin > xmax\r\n      if (xDescending) {\r\n        [xmin,xmax] = [xmax,xmin]\r\n      }\r\n      if (!xBounds && x.length > 1) {\r\n        if (xDescending) {\r\n          xmin -= (x[xend - 1] - x[xend]) / 2\r\n          xmax += (x[0] - x[1]) / 2\r\n        } else {\r\n          xmin -= (x[1] - x[0]) / 2\r\n          xmax += (x[xend] - x[xend - 1]) / 2 \r\n        }\r\n      }\r\n      return [xmin, xmax]\r\n    }\r\n    \r\n    let xAxis = this.domain.axes.get(this._projX)\r\n    let yAxis = this.domain.axes.get(this._projY)\r\n    let [xmin, xmax] = extent(xAxis.values, xAxis.bounds)\r\n    let [ymin, ymax] = extent(yAxis.values, yAxis.bounds)\r\n\r\n    return [xmin,ymin,xmax,ymax]\r\n  }\r\n  \r\n  /**\r\n   * Draws a geodetic rectilinear domain grid on a map with arbitrary projection.\r\n   * \r\n   * @param {Function} setPixel A function with parameters (y,x,val) which \r\n   *                            sets the color of a pixel on a tile.\r\n   * @param {L.Point} coords The tile coordinates.\r\n   * @param {function(idx: Object): number|null} vals Range value function.\r\n   */\r\n  _drawGeodeticCRSWithAnyMapProjection (setPixel, coords, vals) {\r\n    // usable for any map projection, but computationally more intensive\r\n    // there are two hotspots in the loops: map.unproject and indexOfNearest\r\n    \r\n    // Note that this function is slightly more specialized and optimized than _drawProjectedCRSWithAnyMapProjection().\r\n    // It targets the case when the domain is lat/lon, whereas _drawProjectedCRSWithAnyMapProjection() works\r\n    // with any projected CRS in the grid domain.\r\n\r\n    let tileSize = this.getTileSize()\r\n    let startX = coords.x * tileSize.x\r\n    let startY = coords.y * tileSize.y\r\n    let zoom = coords.z\r\n\r\n    let map = this._map\r\n    let x = this.domain.axes.get('x').values\r\n    let y = this.domain.axes.get('y').values\r\n    let bbox = this._getDomainBbox()\r\n    \r\n    // a bit hacky\r\n    if (this._projX === 'y') {\r\n      bbox = [bbox[1], bbox[0], bbox[3], bbox[2]]\r\n    }\r\n    \r\n    let lonRange = [bbox[0], bbox[0] + 360]\r\n\r\n    \r\n    \r\n    for (let tileX = 0; tileX < tileSize.x; tileX++) {\r\n      for (let tileY = 0; tileY < tileSize.y; tileY++) {\r\n        let {lat,lng} = map.unproject(L.point(startX + tileX, startY + tileY), zoom)\r\n\r\n        // we first check whether the tile pixel is outside the domain bounding box\r\n        // in that case we skip it as we do not want to extrapolate\r\n        if (lat < bbox[1] || lat > bbox[3]) {\r\n          continue\r\n        }\r\n\r\n        lng = wrapLongitude(lng, lonRange)\r\n        if (lng < bbox[0] || lng > bbox[2]) {\r\n          continue\r\n        }\r\n\r\n        // now we find the closest grid cell using simple binary search\r\n        // for finding the closest latitude/longitude we use a simple binary search\r\n        // (as there is no discontinuity)\r\n        let iLat = indexOfNearest(y, lat)\r\n        let iLon = indexOfNearest(x, lng)\r\n\r\n        setPixel(tileY, tileX, vals({y: iLat, x: iLon}))\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Draws a domain with projected CRS on a map with arbitrary projection.\r\n   * \r\n   * @param {Function} setPixel A function with parameters (y,x,val) which \r\n   *                            sets the color of a pixel on a tile.\r\n   * @param {L.Point} coords The tile coordinates.\r\n   * @param {function(idx: Object): number|null} vals Range value function.\r\n   */\r\n  _drawProjectedCRSWithAnyMapProjection (setPixel, coords, vals) {\r\n    let map = this._map\r\n    let X = this.domain.axes.get(this._projX).values\r\n    let Y = this.domain.axes.get(this._projY).values\r\n    let bbox = this._getDomainBbox()\r\n    \r\n    let proj = this.projection\r\n\r\n    let tileSize = this.getTileSize()\r\n    let startX = coords.x * tileSize.x\r\n    let startY = coords.y * tileSize.y\r\n    let zoom = coords.z\r\n    \r\n    for (let tileX = 0; tileX < tileSize.x; tileX++) {\r\n      for (let tileY = 0; tileY < tileSize.y; tileY++) {\r\n        let {lat,lng} = map.unproject(L.point(startX + tileX, startY + tileY), zoom)\r\n        let {x,y} = proj.project({lat, lon: lng})\r\n\r\n        // we first check whether the tile pixel is outside the domain bounding box\r\n        // in that case we skip it as we do not want to extrapolate\r\n        if (x < bbox[0] || x > bbox[2] || y < bbox[1] || y > bbox[3]) {\r\n          continue\r\n        }\r\n\r\n        // now we find the closest grid cell using simple binary search\r\n        let iy = indexOfNearest(Y, y)\r\n        let ix = indexOfNearest(X, x)\r\n\r\n        setPixel(tileY, tileX, vals({y: iy, x: ix}))\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Draws a domain with projected CRS on a map with rectilinear lon/lat projection.\r\n   * \r\n   * @param {Function} setPixel A function with parameters (y,x,val) which \r\n   *                            sets the color of a pixel on a tile.\r\n   * @param {L.Point} coords The tile coordinates.\r\n   * @param {function(idx: Object): number|null} vals Range value function.\r\n   */\r\n  _drawProjectedCRSWithRectilinearMapProjection (setPixel, coords, vals) {\r\n    let map = this._map\r\n    let X = this.domain.axes.get(this._projX).values\r\n    let Y = this.domain.axes.get(this._projY).values\r\n    let bbox = this._getDomainBbox()\r\n    \r\n    let proj = this.projection\r\n\r\n    let tileSize = this.getTileSize()\r\n    let startX = coords.x * tileSize.x\r\n    let startY = coords.y * tileSize.y\r\n    let zoom = coords.z\r\n    \r\n    // since the map projection is a rectilinear lat/lon grid,\r\n    // we only have to unproject the the first row and column to get the lat/lon coordinates of all tile pixels\r\n    let lons = new Float64Array(tileSize.x)\r\n    for (let tileX = 0; tileX < tileSize.x; tileX++) {\r\n      let {lng} = map.unproject(L.point(startX + tileX, startY), zoom)\r\n      lons[tileX] = lng\r\n    }\r\n    let lats = new Float64Array(tileSize.y)\r\n    for (let tileY = 0; tileY < tileSize.y; tileY++) {\r\n      let {lat} = map.unproject(L.point(startX, startY + tileY), zoom)\r\n      lats[tileY] = lat\r\n    }    \r\n    \r\n    for (let tileX = 0; tileX < tileSize.x; tileX++) {\r\n      for (let tileY = 0; tileY < tileSize.y; tileY++) {\r\n        let lat = lats[tileY]\r\n        let lon = lons[tileX]\r\n        let {x,y} = proj.project({lat, lon})\r\n\r\n        // we first check whether the tile pixel is outside the domain bounding box\r\n        // in that case we skip it as we do not want to extrapolate\r\n        if (x < bbox[0] || x > bbox[2] || y < bbox[1] || y > bbox[3]) {\r\n          continue\r\n        }\r\n\r\n        // now we find the closest grid cell using simple binary search\r\n        let iy = indexOfNearest(Y, y)\r\n        let ix = indexOfNearest(X, x)\r\n\r\n        setPixel(tileY, tileX, vals({y: iy, x: ix}))\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Draws a geodetic rectilinear domain grid on a map whose grid is, or can be directly\r\n   * mapped to, a geodetic rectilinear grid.\r\n   * \r\n   * @param {Function} setPixel A function with parameters (y,x,val) which \r\n   *                            sets the color of a pixel on a tile.\r\n   * @param {L.Point} coords The tile coordinates.\r\n   * @param {function(idx: Object): number|null} vals Range value function.\r\n   */\r\n  _drawGeodeticCRSWithRectilinearMapProjection (setPixel, coords, vals) {\r\n    // optimized version for map projections that are equal to a rectilinear geodetic grid\r\n    // this can be used when lat and lon can be computed independently for a given pixel\r\n\r\n    let map = this._map\r\n    let x = this.domain.axes.get('x').values\r\n    let y = this.domain.axes.get('y').values\r\n    let bbox = this._getDomainBbox()\r\n    \r\n    // a bit hacky\r\n    if (this._projX === 'y') {\r\n      bbox = [bbox[1], bbox[0], bbox[3], bbox[2]]\r\n    }\r\n      \r\n    let lonRange = [bbox[0], bbox[0] + 360]\r\n\r\n    let tileSize = this.getTileSize()\r\n    let startX = coords.x * tileSize.x\r\n    let startY = coords.y * tileSize.y\r\n    let zoom = coords.z\r\n    \r\n    var latCache = new Float64Array(tileSize.y)\r\n    var iLatCache = new Uint32Array(tileSize.y)\r\n    for (let tileY = 0; tileY < tileSize.y; tileY++) {\r\n      var lat = map.unproject(L.point(startX, startY + tileY), zoom).lat\r\n      latCache[tileY] = lat\r\n      // find the index of the closest latitude in the grid using simple binary search\r\n      iLatCache[tileY] = indexOfNearest(y, lat)\r\n    }\r\n\r\n    for (let tileX = 0; tileX < tileSize.x; tileX++) {\r\n      let lon = map.unproject(L.point(startX + tileX, startY), zoom).lng\r\n      lon = wrapLongitude(lon, lonRange)\r\n      if (lon < bbox[0] || lon > bbox[2]) {\r\n        continue\r\n      }\r\n\r\n      // find the index of the closest longitude in the grid using simple binary search\r\n      // (as there is no discontinuity)\r\n      let iLon = indexOfNearest(x, lon)\r\n\r\n      for (let tileY = 0; tileY < tileSize.y; tileY++) {\r\n        // get geographic coordinates of tile pixel\r\n        let lat = latCache[tileY]\r\n\r\n        // we first check whether the tile pixel is outside the domain bounding box\r\n        // in that case we skip it as we do not want to extrapolate\r\n        if (lat < bbox[1] || lat > bbox[3]) {\r\n          continue\r\n        }\r\n\r\n        let iLat = iLatCache[tileY]\r\n\r\n        setPixel(tileY, tileX, vals({y: iLat, x: iLon}))\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Return true if the map projection grid can be mapped to a rectilinear\r\n   * geodetic grid. For that, it must satisfy:\r\n   * for all x, there is a longitude lon, for all y, unproject(x,y).lon = lon\r\n   * for all y, there is a latitude lat, for all x, unproject(x,y).lat = lat\r\n   * \r\n   * Returns false if this is not the case or unknown.\r\n   */\r\n  _isRectilinearGeodeticMap () {\r\n    let crs = this._map.options.crs\r\n    // these are the ones included in Leaflet\r\n    let recti = [L.CRS.EPSG3857, L.CRS.EPSG4326, L.CRS.EPSG3395, L.CRS.Simple]\r\n    let isRecti = recti.indexOf(crs) !== -1\r\n    // TODO for unknown ones, how do we test that?\r\n    return isRecti\r\n  }\r\n  \r\n  /**\r\n   * Return whether the coverage domain is using a geodetic CRS with WGS84 datum.\r\n   */\r\n  _isDomainUsingEllipsoidalCRS () {\r\n    return this.domain.referencing.some(ref => isEllipsoidalCRS(ref.system))\r\n  }\r\n  \r\n  /**\r\n   * @ignore\r\n   * @override\r\n   */\r\n  redraw () {\r\n    // we check getContainer() to prevent errors when trying to redraw when the layer has not\r\n    // fully initialized yet\r\n    if (this.getContainer()) {\r\n      L.GridLayer.prototype.redraw.call(this)\r\n    }\r\n  }\r\n}\r\n\r\nfunction wrapLongitude (lon, range) {\r\n  return L.Util.wrapNum(lon, range, true)\r\n}\r\n","import L from 'leaflet'\r\nimport {cssToRGB} from './palettes.js'\r\n\r\n/**\r\n * A mixin that encapsulates the creation, update, and removal\r\n * of a CircleMarker.\r\n * \r\n * It provides the public methods `bindPopup`, `openPopup`, `closePopup`, and `redraw`.\r\n * \r\n * See {@link Point} and {@link VerticalProfile} for usage.\r\n * \r\n * @param {PointDataLayer} base The base class implementing the {@link PointDataLayer} interface.\r\n * @return {class} The base class with CircleMarkerMixin.\r\n */\r\nexport function CircleMarkerMixin (base) {\r\n  return class extends base {\r\n   \r\n    _addMarker () {\r\n      let val = this.getValue()\r\n      if (val === null && !this.showNoData) {\r\n        return\r\n      }\r\n      let color = this._getColor(val)\r\n      let {r,g,b} = typeof color === 'string' ? cssToRGB(color) : color    \r\n      let latlng = this.getLatLng()\r\n      \r\n      let strokeBrightness = 0.7\r\n      \r\n      this._marker = L.circleMarker(latlng, {\r\n        fillColor: 'rgb(' + r + ',' + g + ',' + b + ')',\r\n        fillOpacity: 1,\r\n        radius: 5,\r\n        stroke: true,\r\n        opacity: 1,\r\n        weight: 1,\r\n        color: 'rgb(' + Math.round(r*strokeBrightness) + ',' + \r\n                        Math.round(g*strokeBrightness) + ',' + \r\n                        Math.round(b*strokeBrightness) + ')'\r\n      }).on('click', e => {\r\n        e.coverage = this.coverage\r\n        this.fire('click', e)\r\n      }).addTo(this._map)\r\n      \r\n      if (this._popup) {\r\n        this._marker.bindPopup(...this._popup)\r\n      }\r\n    }\r\n    \r\n    _removeMarker () {\r\n      if (this._marker) {\r\n        this._map.removeLayer(this._marker)\r\n        delete this._marker\r\n      }\r\n    }\r\n    \r\n    __updateMarker () {\r\n      let color = this._getColor(val)\r\n      let {r,g,b} = typeof color === 'string' ? cssToRGB(color) : color\r\n      this._marker.options.color = 'rgb(' + r + ',' + g + ',' + b + ')'\r\n    }\r\n    \r\n    bindPopup (...args) {\r\n      this._popup = args\r\n      if (this._marker) {\r\n        this._marker.bindPopup(...args)\r\n      }\r\n    }\r\n    \r\n    openPopup () {\r\n      this._marker.openPopup()\r\n      return this\r\n    }\r\n    \r\n    closePopup () {\r\n      this._marker.closePopup()\r\n      return this\r\n    }\r\n    \r\n    redraw () {\r\n      if (this._marker) {\r\n        this.__updateMarker()\r\n        this._marker.redraw() \r\n      }\r\n    }\r\n  }\r\n}\r\n","import L from 'leaflet'\r\nimport {enlargeExtentIfEqual} from './palettes.js'\r\n\r\nimport {CoverageMixin} from './CoverageMixin.js'\r\nimport {CircleMarkerMixin} from './CircleMarkerMixin.js'\r\nimport {PaletteMixin} from './PaletteMixin.js'\r\nimport {EventMixin} from '../util/EventMixin.js'\r\n\r\nimport {isDomain, fromDomain} from 'covutils'\r\n\r\n/** @ignore */\r\nexport const DEFAULT_COLOR = 'black'\r\n\r\n/**\r\n * The `click` event, signalling that the point has been clicked.\r\n * \r\n * @typedef {L.MouseEvent} Point#click\r\n * @property {Coverage} coverage\r\n * @property {L.LatLng} latlng The geographical point where the click event occured.\r\n */\r\n\r\n/**\r\n * Renderer for Coverages and Domains conforming to CovJSON domain type `Point`.\r\n * \r\n * This will simply display a dot on the map and fire a click event when a user clicks on it.\r\n * The dot either has a defined standard color, or it uses a palette if a parameter is chosen.\r\n * \r\n * @example\r\n * var cov = ... // get Coverage data\r\n * var layer = new C.Point(cov, {\r\n *   parameter: 'salinity',\r\n *   defaultColor: 'black',\r\n *   palette: C.linearPalette(['#FFFFFF', '#000000'])\r\n * })\r\n * \r\n * @see https://covjson.org/domain-types/#point\r\n * \r\n * @emits {DataLayer#afterAdd} Layer is initialized and was added to the map\r\n * @emits {DataLayer#dataLoading} Data loading has started\r\n * @emits {DataLayer#dataLoad} Data loading has finished (also in case of errors)\r\n * @emits {DataLayer#error} Error when loading data\r\n * @emits {PaletteMixin#paletteChange} Palette has changed\r\n * @emits {PaletteMixin#paletteExtentChange} Palette extent has changed\r\n * @emits {Point#click} when the point was clicked\r\n * \r\n * @extends {L.Layer}\r\n * @extends {CoverageMixin}\r\n * @extends {CircleMarkerMixin}\r\n * @extends {PaletteMixin}\r\n * @implements {DataLayer}\r\n * @implements {PointDataLayer}\r\n */\r\nexport class Point extends PaletteMixin(CircleMarkerMixin(CoverageMixin(L.Layer))) {\r\n  \r\n  /**\r\n   * @param {Coverage|Domain} cov The coverage or domain object to visualize.\r\n   * @param {Object} [options] The options object.\r\n   * @param {string} [options.parameter] The key of the parameter to display, not needed for domain objects.\r\n   * @param {Palette} [options.palette] The initial color palette to use, the default depends on the parameter type.\r\n   * @param {string} [options.paletteExtent='full'] The initial palette extent, either 'full' or specific: [-10,10].\r\n   * @param {string} [options.defaultColor='black'] The color to use for missing data or if no parameter is set.\r\n   * @param {boolean} [options.showNoData=false] Whether to draw the point if there is no data.\r\n   */\r\n  constructor (cov, options) {\r\n    super()\r\n    \r\n    if (isDomain(cov)) {\r\n      cov = fromDomain(cov)\r\n      delete options.keys\r\n      options.parameter = cov.parameters.keys().next().value\r\n    }\r\n    \r\n    if (!options.paletteExtent) {\r\n      options.paletteExtent = 'full'\r\n    }\r\n    \r\n    L.Util.setOptions(this, options)\r\n\r\n    this._cov = cov\r\n    let paramKey = options.keys ? options.keys[0] : options.parameter\r\n    this._param = paramKey ? cov.parameters.get(paramKey) : null\r\n    this._defaultColor = options.defaultColor || DEFAULT_COLOR\r\n\r\n    /** @ignore */\r\n    this.showNoData = options.showNoData // if true, draw with default color\r\n  }\r\n  \r\n  /**\r\n   * @ignore\r\n   * @override\r\n   */\r\n  onAdd (map) {\r\n    this._map = map\r\n\r\n    this.load()\r\n      .then(() => this.initializePalette())\r\n      .then(() => {\r\n        this._addMarker()\r\n        this.fire('afterAdd')\r\n      })\r\n  }\r\n  \r\n  /**\r\n   * @ignore\r\n   * @override\r\n   */\r\n  onRemove () {\r\n    this._removeMarker()\r\n  }\r\n  \r\n  /**\r\n   * Returns the geographic bounds of the coverage, which is a degenerate box collapsed to a point.\r\n   * \r\n   * @return {L.LatLngBounds}\r\n   */\r\n  getBounds () {\r\n    return L.latLngBounds([this.getLatLng()])\r\n  }\r\n  \r\n  /**\r\n   * Returns the geographical position of the coverage.\r\n   * \r\n   * @return {L.LatLng}\r\n   */\r\n  getLatLng () {\r\n    let x = this.domain.axes.get(this._projX).values[0]\r\n    let y = this.domain.axes.get(this._projY).values[0]\r\n    let latlng = this.projection.unproject({x,y})\r\n    return L.latLng(latlng)\r\n  }\r\n  \r\n  /**\r\n   * The coverage object associated to this layer.\r\n   * \r\n   * @type {Coverage}\r\n   */\r\n  get coverage () {\r\n    return this._cov\r\n  }\r\n    \r\n  /**\r\n   * The parameter that is visualized.\r\n   * \r\n   * @type {Parameter}\r\n   */\r\n  get parameter () {\r\n    return this._param\r\n  }\r\n      \r\n  /**\r\n   * See {@link PaletteMixin}.\r\n   * \r\n   * @ignore\r\n   */\r\n  computePaletteExtent (extent) {\r\n    if (extent === 'full') {\r\n      if (!this.parameter) {\r\n        throw new Error('palette extent cannot be computed when no parameter has been chosen')\r\n      }\r\n  \r\n      let val = this.getValue()\r\n      extent = enlargeExtentIfEqual([val, val])\r\n      return Promise.resolve(extent)\r\n    } else {\r\n      throw new Error('Unknown extent specification: ' + extent)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Return the displayed value (number, or null for no-data),\r\n   * or undefined if no parameter is set.\r\n   * \r\n   * @returns {number|null|undefined}\r\n   */\r\n  getValue () {\r\n    if (this._param) {\r\n      return this.range.get({})\r\n    }    \r\n  }\r\n  \r\n  /**\r\n   * Return the displayed value if within the given distance of the reference point.\r\n   * If out of bounds, then undefined is returned, otherwise a number or null (for no data).\r\n   * \r\n   * @param {L.LatLng} latlng\r\n   * @param {number} maxDistance Maximum distance in meters between both points.\r\n   * @returns {number|null|undefined}\r\n   */\r\n  getValueAt (latlng, maxDistance) {\r\n    let point = this.getLatLng()\r\n    if (point.distanceTo(latlng) <= maxDistance) {\r\n      return this.getValue()\r\n    }\r\n  }\r\n  \r\n  _getColor (val) {\r\n    if (val === null) {\r\n      // no-data\r\n      return this._defaultColor\r\n    } else if (val === undefined) {\r\n      // not fixed to a param\r\n      return this._defaultColor\r\n    } else {\r\n      // use a palette\r\n      let idx = this.getPaletteIndex(val)\r\n      let {red, green, blue} = this.palette\r\n      return {r: red[idx], g: green[idx], b: blue[idx]}\r\n    }\r\n  }\r\n}\r\n","import L from 'leaflet'\r\nimport {isDomain, fromDomain, minMaxOfRange} from 'covutils'\r\n\r\nimport {enlargeExtentIfEqual} from './palettes.js'\r\nimport {CoverageMixin} from './CoverageMixin.js'\r\nimport {PaletteMixin} from './PaletteMixin.js'\r\n\r\nimport {DEFAULT_COLOR} from './Point.js'\r\n  \r\n/**\r\n * Renderer for Coverages and Domains conforming to the CovJSON domain type `Trajectory`.\r\n * \r\n * Displays the trajectory as a path with coloured points using\r\n * a given palette for a given parameter.\r\n * \r\n * @example\r\n * var cov = ... // get Coverage data\r\n * var layer = new C.Trajectory(cov, {\r\n *   parameter: 'salinity',\r\n *   defaultColor: 'black',\r\n *   palette: C.linearPalette(['#FFFFFF', '#000000'])\r\n * })\r\n * \r\n * @see https://covjson.org/domain-types/#trajectory\r\n * \r\n * @emits {DataLayer#afterAdd} Layer is initialized and was added to the map\r\n * @emits {DataLayer#dataLoading} Data loading has started\r\n * @emits {DataLayer#dataLoad} Data loading has finished (also in case of errors)\r\n * @emits {DataLayer#error} Error when loading data\r\n * @emits {PaletteMixin#paletteChange} Palette has changed\r\n * @emits {PaletteMixin#paletteExtentChange} Palette extent has changed\r\n * @emits {Point#click} when a point was clicked\r\n * \r\n * @extends {L.FeatureGroup}\r\n * @extends {CoverageMixin}\r\n * @extends {PaletteMixin}\r\n * @implements {DataLayer}\r\n * \r\n */\r\nexport class Trajectory extends PaletteMixin(CoverageMixin(L.FeatureGroup)) {\r\n  \r\n  // TODO FeatureGroup is not ideal since click events etc should not be blindly propagated\r\n  //    (we use it for now to have getBounds() which LayerGroup misses)\r\n  \r\n  /**\r\n   * @param {Coverage|Domain} cov The coverage or domain object to visualize.\r\n   * @param {Object} [options] The options object.\r\n   * @param {string} [options.parameter] The key of the parameter to display, not needed for domain objects.\r\n   * @param {Palette} [options.palette] The initial color palette to use, the default depends on the parameter type.\r\n   * @param {string} [options.paletteExtent='full'] The initial palette extent, either 'full' or specific: [-10,10].\r\n   * @param {string} [options.defaultColor='black'] The color to use for missing data or if no parameter is set.\r\n   */\r\n  constructor (cov, options) {\r\n    super()\r\n    \r\n    if (isDomain(cov)) {\r\n      cov = fromDomain(cov)\r\n      delete options.keys\r\n      options.parameter = cov.parameters.keys().next().value\r\n    }\r\n    \r\n    if (!options.paletteExtent) {\r\n      options.paletteExtent = 'full'\r\n    }\r\n    \r\n    L.Util.setOptions(this, options)\r\n    \r\n    this._cov = cov\r\n    let paramKey = options.keys ? options.keys[0] : options.parameter\r\n    this._param = paramKey ? cov.parameters.get(paramKey) : null\r\n    this._defaultColor = options.defaultColor || DEFAULT_COLOR\r\n  }\r\n  \r\n  /**\r\n   * @ignore\r\n   * @override\r\n   */\r\n  onAdd (map) {\r\n    this._map = map\r\n    \r\n    this.load()\r\n      .then(() => this.initializePalette())\r\n      .then(() => {\r\n        this._addTrajectoryLayers()\r\n        this.fire('afterAdd')\r\n      })\r\n  }\r\n    \r\n  /**\r\n   * The coverage object associated to this layer.\r\n   * \r\n   * @type {Coverage}\r\n   */\r\n  get coverage () {\r\n    return this._cov\r\n  }\r\n  \r\n  /**\r\n   * The parameter that is visualized.\r\n   * \r\n   * @type {Parameter}\r\n   */\r\n  get parameter () {\r\n    return this._param\r\n  }\r\n  \r\n  /**\r\n   * See {@link PaletteMixin}.\r\n   * \r\n   * @ignore\r\n   */\r\n  computePaletteExtent (extent) {\r\n    let range = this.range\r\n        \r\n    if (extent === 'full') {\r\n      // scan the whole range for min/max values\r\n      \r\n    } else if (extent === 'fov') {\r\n      // scan the values that are currently in field of view on the map for min/max\r\n      let bounds = this._map.getBounds()\r\n\r\n      // TODO implement\r\n      throw new Error('NOT IMPLEMENTED YET')      \r\n    } else {\r\n      throw new Error('Unknown extent specification: ' + extent)\r\n    }\r\n\r\n    extent = minMaxOfRange(range)\r\n    extent = enlargeExtentIfEqual(extent)    \r\n    return Promise.resolve(extent)\r\n  }\r\n  \r\n  _addTrajectoryLayers () {\r\n    // add a Polyline in black, and coloured CircleMarker's for each domain point\r\n    let points = this.getLatLngs()\r\n    for (let i=0; i < points.length; i++) {\r\n      let marker = new L.CircleMarker(points[i], {\r\n        color: this._getColor(this._getValue(i)),\r\n        opacity: 1,\r\n        fillOpacity: 1\r\n      })\r\n      this.addLayer(marker)\r\n    }\r\n    \r\n    let polyline = L.polyline(points, {\r\n      color: 'black',\r\n      weight: 3\r\n    })\r\n    \r\n    this.addLayer(polyline)\r\n  }\r\n  \r\n  /**\r\n   * Returns the trajectory points as LatLng objects in the order they appear in the composite domain axis.\r\n   * \r\n   * @return {Array<L.LatLng>}\r\n   */\r\n  getLatLngs () {\r\n    let axis = this.domain.axes.get('composite')\r\n    let ix = axis.coordinates.indexOf(this._projX)\r\n    let iy = axis.coordinates.indexOf(this._projY)\r\n    let coords = []\r\n    for (let i=0; i < axis.values.length; i++) {\r\n      let x = axis.values[i][ix]\r\n      let y = axis.values[i][iy]\r\n      let latlng = this.projection.unproject({x,y})\r\n      let coord = L.latLng(latlng)\r\n      coords.push(coord)\r\n    }\r\n    return coords\r\n  }\r\n  \r\n  /**\r\n   * Return the displayed value closest to the circle centre.\r\n   * If no point exists within the circle, undefined is returned,\r\n   * otherwise a number or null (for no-data).\r\n   * \r\n   * @param {L.LatLng} latlng\r\n   * @param {number} maxDistance Maximum distance in meters between both points.\r\n   * @returns {number|null|undefined}\r\n   */\r\n  getValueAt (latlng, maxDistance) {\r\n    let points = this.getLatLngs()\r\n    let distances = points.map(p => p.distanceTo(latlng))\r\n    let minDistance = Infinity\r\n    let minIdx\r\n    for (let i=0; i < points.length; i++) {\r\n      let distance = distances[i]\r\n      if (distance <= maxDistance && distance < minDistance) {\r\n        minDistance = distance\r\n        minIdx = i\r\n      }\r\n    }\r\n    if (minIdx !== undefined) {\r\n      return this._getValue(minIdx)\r\n    }\r\n  }\r\n  \r\n  _getValue (index) {\r\n    if (this._param) {\r\n      return this.range.get({composite: index})\r\n    }\r\n  }\r\n  \r\n  // NOTE: this returns a string, not an {r,g,b} object as in other classes!\r\n  _getColor (val) {\r\n    if (val === null) {\r\n      // no-data\r\n      return this._defaultColor\r\n    } else if (val === undefined) {\r\n      // not fixed to a param\r\n      return this._defaultColor\r\n    } else {\r\n      // use a palette\r\n      let idx = this.getPaletteIndex(val)\r\n      let {red, green, blue} = this.palette\r\n      return `rgb(${red[idx]}, ${green[idx]}, ${blue[idx]})`\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Redraw the layer.\r\n   */\r\n  redraw () {\r\n    this.clearLayers()\r\n    this._addTrajectoryLayers()\r\n  }\r\n  \r\n}\r\n","import L from 'leaflet'\r\nimport {isDomain, fromDomain, indexOfNearest, minMaxOfRange} from 'covutils'\r\n\r\nimport {enlargeExtentIfEqual} from './palettes.js'\r\nimport {CoverageMixin} from './CoverageMixin.js'\r\nimport {CircleMarkerMixin} from './CircleMarkerMixin.js'\r\nimport {PaletteMixin} from './PaletteMixin.js'\r\nimport {EventMixin} from '../util/EventMixin.js'\r\n\r\nimport {DEFAULT_COLOR} from './Point.js'\r\n\r\n// TODO nearly identical to VerticalProfile\r\n\r\n/**\r\n * Renderer for Coverages conforming to the CovJSON domain type `PointSeries`.\r\n * \r\n * This will simply display a dot on the map and fire a click event when a user clicks on it.\r\n * The dot either has a defined standard color, or it uses a palette if a parameter is chosen.\r\n * \r\n * @example\r\n * var cov = ... // get Coverage data\r\n * var layer = new C.PointSeries(cov, {\r\n *   parameter: 'salinity',\r\n *   time: new Date('2015-01-01T12:00:00Z'),\r\n *   defaultColor: 'black',\r\n *   palette: C.linearPalette(['#FFFFFF', '#000000'])\r\n * })\r\n * \r\n * @see https://covjson.org/domain-types/#pointseries\r\n * \r\n * @emits {DataLayer#afterAdd} Layer is initialized and was added to the map\r\n * @emits {DataLayer#dataLoading} Data loading has started\r\n * @emits {DataLayer#dataLoad} Data loading has finished (also in case of errors)\r\n * @emits {DataLayer#error} Error when loading data\r\n * @emits {PaletteMixin#paletteChange} Palette has changed\r\n * @emits {PaletteMixin#paletteExtentChange} Palette extent has changed\r\n * @emits {Point#click} when the point was clicked\r\n * \r\n * @extends {L.Layer}\r\n * @extends {CoverageMixin}\r\n * @extends {CircleMarkerMixin}\r\n * @extends {PaletteMixin}\r\n * @implements {DataLayer}\r\n * @implements {PointDataLayer}\r\n */\r\nexport class PointSeries extends PaletteMixin(CircleMarkerMixin(CoverageMixin(L.Layer))) {\r\n  \r\n  /**\r\n   * An optional time axis target value can be defined with the 'time' property.\r\n   * The closest values on the time axis is chosen.\r\n   * \r\n   * @param {Coverage|Domain} cov The coverage or domain object to visualize.\r\n   * @param {Object} [options] The options object.\r\n   * @param {string} [options.parameter] The key of the parameter to display, not needed for domain objects.\r\n   * @param {Date} [options.time] The initial time step to display.\r\n   * @param {Palette} [options.palette] The initial color palette to use, the default depends on the parameter type.\r\n   * @param {string} [options.paletteExtent='full'] The initial palette extent, either 'full' or specific: [-10,10].\r\n   * @param {string} [options.defaultColor='black'] The color to use for missing data or if no parameter is set.\r\n   * @param {boolean} [options.showNoData=false] Whether to draw the point if there is no data.\r\n   */\r\n  constructor (cov, options) {\r\n    super()\r\n    \r\n    if (isDomain(cov)) {\r\n      cov = fromDomain(cov)\r\n      delete options.keys\r\n      options.parameter = cov.parameters.keys().next().value\r\n    }\r\n    \r\n    if (!options.paletteExtent) {\r\n      options.paletteExtent = 'full'\r\n    }\r\n    \r\n    L.Util.setOptions(this, options)\r\n\r\n    this._cov = cov\r\n    let paramKey = options.keys ? options.keys[0] : options.parameter\r\n    this._param = paramKey ? cov.parameters.get(paramKey) : null\r\n    this._axesSubset = {\r\n      t: {coordPref: options.time}\r\n    }\r\n    this._defaultColor = options.defaultColor || DEFAULT_COLOR\r\n\r\n    /** @ignore */\r\n    this.showNoData = options.showNoData // if true, draw with default color\r\n  }\r\n  \r\n  /**\r\n   * @ignore\r\n   * @override\r\n   */\r\n  onAdd (map) {\r\n    this._map = map\r\n\r\n    this.load()\r\n      .then(() => this.initializePalette())\r\n      .then(() => {\r\n        this._addMarker()\r\n        this.fire('afterAdd')\r\n      })\r\n  }\r\n  \r\n  _loadCoverageSubset () {\r\n    // adapted from Grid.js\r\n    let t = this._axesSubset.t\r\n    if (t.coordPref == undefined) {\r\n      t.idx = t.coord = undefined\r\n    } else {\r\n      let vals = this.domain.axes.get('t').values.map(v => v.getTime())\r\n      t.idx = indexOfNearest(vals, t.coordPref.getTime())\r\n      t.coord = vals[t.idx]\r\n    }\r\n    \r\n    // Note that we don't subset the coverage currently, since there is no real need for it\r\n  }\r\n  \r\n  /**\r\n   * @ignore\r\n   * @override\r\n   */\r\n  onRemove () {\r\n    this._removeMarker()\r\n  }\r\n  \r\n  /**\r\n   * Returns the geographic bounds of the coverage, which is a degenerate box collapsed to a point.\r\n   * \r\n   * @return {L.LatLngBounds}\r\n   */\r\n  getBounds () {\r\n    return L.latLngBounds([this.getLatLng()])\r\n  }\r\n  \r\n  /**\r\n   * Returns the geographical position of the coverage.\r\n   * \r\n   * @return {L.LatLng}\r\n   */\r\n  getLatLng () {\r\n    let x = this.domain.axes.get(this._projX).values[0]\r\n    let y = this.domain.axes.get(this._projY).values[0]\r\n    let latlng = this.projection.unproject({x,y})\r\n    return L.latLng(latlng)\r\n  }\r\n  \r\n  /**\r\n   * The coverage object associated to this layer.\r\n   * \r\n   * @type {Coverage}\r\n   */\r\n  get coverage () {\r\n    return this._cov\r\n  }\r\n    \r\n  /**\r\n   * The parameter that is visualized.\r\n   * \r\n   * @type {Parameter}\r\n   */\r\n  get parameter () {\r\n    return this._param\r\n  }\r\n  \r\n  /**\r\n   * Sets the currently active time to the one closest to the given Date object.\r\n   * \r\n   * @type {Date|undefined}\r\n   */\r\n  set time (val) {\r\n    let old = this.time\r\n    this._axesSubset.t.coordPref = val ? val.toISOString() : undefined\r\n    \r\n    this._loadCoverageSubset()\r\n    if (old === this.time) return\r\n    this.redraw()\r\n    this.fire('axisChange', {axis: 'time'})\r\n  }\r\n  \r\n  /**\r\n   * The currently active time on the temporal axis as Date object, \r\n   * or undefined if no time is set.\r\n   * \r\n   * @type {Date|undefined}\r\n   */\r\n  get time () {\r\n    if (!this._axesSubset.t.coord) {\r\n      return\r\n    }\r\n    let time = this.domain.axes.get('t').values[this._axesSubset.t.idx]\r\n    return new Date(time)\r\n  }\r\n  \r\n  /**\r\n   * The time slices that make up the coverage.\r\n   * \r\n   * @type {Array<Date>}\r\n   */\r\n  get timeSlices () {\r\n    return this.domain.axes.get('t').values.map(t => new Date(t))\r\n  }\r\n  \r\n  /**\r\n   * See {@link PaletteMixin}.\r\n   * \r\n   * @ignore\r\n   */\r\n  canUsePalette () {\r\n    return this.time !== undefined\r\n  }\r\n  \r\n  /**\r\n   * See {@link PaletteMixin}.\r\n   * \r\n   * @ignore\r\n   */\r\n  computePaletteExtent (extent) {\r\n    if (extent === 'full') {\r\n      if (!this.parameter) {\r\n        throw new Error('palette extent cannot be set when no parameter has been chosen')\r\n      }\r\n      \r\n      extent = minMaxOfRange(this.range)\r\n      extent = enlargeExtentIfEqual(extent)\r\n      return Promise.resolve(extent)\r\n    } else {\r\n      throw new Error('Unknown extent specification: ' + extent)\r\n    }\r\n  }\r\n    \r\n  /**\r\n   * Return the displayed value (number, or null for no-data),\r\n   * or undefined if not fixed to a t-coordinate or parameter.\r\n   * \r\n   * @returns {number|null|undefined}\r\n   */\r\n  getValue () {\r\n    if (this._param && this._axesSubset.t.coord !== undefined) {\r\n      let val = this.range.get({t: this._axesSubset.t.idx})\r\n      return val\r\n    }    \r\n  }\r\n  \r\n  /**\r\n   * Return the displayed value if within the given distance of the reference point.\r\n   * If out of bounds, then undefined is returned, otherwise a number or null (for no data).\r\n   * \r\n   * @param {L.LatLng} latlng\r\n   * @param {number} maxDistance Maximum distance in meters between both points.\r\n   * @returns {number|null|undefined}\r\n   */\r\n  getValueAt (latlng, maxDistance) {\r\n    let point = this.getLatLng()\r\n    if (point.distanceTo(latlng) <= maxDistance) {\r\n      return this.getValue()\r\n    }\r\n  }\r\n  \r\n  _getColor () {\r\n    let val = this.getValue()\r\n    if (val === null) {\r\n      // no-data\r\n      return this._defaultColor\r\n    } else if (val === undefined) {\r\n      // not fixed to a param or z-coordinate\r\n      return this._defaultColor\r\n    } else {\r\n      // use a palette\r\n      let idx = this.getPaletteIndex(val)\r\n      let {red, green, blue} = this.palette\r\n      return {r: red[idx], g: green[idx], b: blue[idx]}\r\n    }\r\n  }\r\n}\r\n","// 2016-02-23 Maik Riechert - adjust boilerplate to make it node compatible\r\n\r\n/**\r\n * k-d Tree JavaScript - V 1.01\r\n *\r\n * https://github.com/ubilabs/kd-tree-javascript\r\n *\r\n * @author Mircea Pricop <pricop@ubilabs.net>, 2012\r\n * @author Martin Kleppe <kleppe@ubilabs.net>, 2012\r\n * @author Ubilabs http://ubilabs.net, 2012\r\n * @license MIT License <http://www.opensource.org/licenses/mit-license.php>\r\n */\r\n\r\n\r\n\r\n  function Node(obj, dimension, parent) {\r\n    this.obj = obj;\r\n    this.left = null;\r\n    this.right = null;\r\n    this.parent = parent;\r\n    this.dimension = dimension;\r\n  }\r\n\r\n  function kdTree(points, metric, dimensions) {\r\n\r\n    var self = this;\r\n    \r\n    function buildTree(points, depth, parent) {\r\n      var dim = depth % dimensions.length,\r\n        median,\r\n        node;\r\n\r\n      if (points.length === 0) {\r\n        return null;\r\n      }\r\n      if (points.length === 1) {\r\n        return new Node(points[0], dim, parent);\r\n      }\r\n\r\n      points.sort(function (a, b) {\r\n        return a[dimensions[dim]] - b[dimensions[dim]];\r\n      });\r\n\r\n      median = Math.floor(points.length / 2);\r\n      node = new Node(points[median], dim, parent);\r\n      node.left = buildTree(points.slice(0, median), depth + 1, node);\r\n      node.right = buildTree(points.slice(median + 1), depth + 1, node);\r\n\r\n      return node;\r\n    }\r\n\r\n    // Reloads a serialied tree\r\n    function loadTree (data) {\r\n      // Just need to restore the `parent` parameter\r\n      self.root = data;\r\n\r\n      function restoreParent (root) {\r\n        if (root.left) {\r\n          root.left.parent = root;\r\n          restoreParent(root.left);\r\n        }\r\n\r\n        if (root.right) {\r\n          root.right.parent = root;\r\n          restoreParent(root.right);\r\n        }\r\n      }\r\n\r\n      restoreParent(self.root);\r\n    }\r\n    \r\n    // If points is not an array, assume we're loading a pre-built tree\r\n    if (!Array.isArray(points)) loadTree(points, metric, dimensions);\r\n    else this.root = buildTree(points, 0, null);\r\n\r\n    // Convert to a JSON serializable structure; this just requires removing \r\n    // the `parent` property\r\n    this.toJSON = function (src) {\r\n      if (!src) src = this.root;\r\n      var dest = new Node(src.obj, src.dimension, null);\r\n      if (src.left) dest.left = self.toJSON(src.left);\r\n      if (src.right) dest.right = self.toJSON(src.right);\r\n      return dest;\r\n    };\r\n\r\n    this.insert = function (point) {\r\n      function innerSearch(node, parent) {\r\n\r\n        if (node === null) {\r\n          return parent;\r\n        }\r\n\r\n        var dimension = dimensions[node.dimension];\r\n        if (point[dimension] < node.obj[dimension]) {\r\n          return innerSearch(node.left, node);\r\n        } else {\r\n          return innerSearch(node.right, node);\r\n        }\r\n      }\r\n\r\n      var insertPosition = innerSearch(this.root, null),\r\n        newNode,\r\n        dimension;\r\n\r\n      if (insertPosition === null) {\r\n        this.root = new Node(point, 0, null);\r\n        return;\r\n      }\r\n\r\n      newNode = new Node(point, (insertPosition.dimension + 1) % dimensions.length, insertPosition);\r\n      dimension = dimensions[insertPosition.dimension];\r\n\r\n      if (point[dimension] < insertPosition.obj[dimension]) {\r\n        insertPosition.left = newNode;\r\n      } else {\r\n        insertPosition.right = newNode;\r\n      }\r\n    };\r\n\r\n    this.remove = function (point) {\r\n      var node;\r\n\r\n      function nodeSearch(node) {\r\n        if (node === null) {\r\n          return null;\r\n        }\r\n\r\n        if (node.obj === point) {\r\n          return node;\r\n        }\r\n\r\n        var dimension = dimensions[node.dimension];\r\n\r\n        if (point[dimension] < node.obj[dimension]) {\r\n          return nodeSearch(node.left, node);\r\n        } else {\r\n          return nodeSearch(node.right, node);\r\n        }\r\n      }\r\n\r\n      function removeNode(node) {\r\n        var nextNode,\r\n          nextObj,\r\n          pDimension;\r\n\r\n        function findMin(node, dim) {\r\n          var dimension,\r\n            own,\r\n            left,\r\n            right,\r\n            min;\r\n\r\n          if (node === null) {\r\n            return null;\r\n          }\r\n\r\n          dimension = dimensions[dim];\r\n\r\n          if (node.dimension === dim) {\r\n            if (node.left !== null) {\r\n              return findMin(node.left, dim);\r\n            }\r\n            return node;\r\n          }\r\n\r\n          own = node.obj[dimension];\r\n          left = findMin(node.left, dim);\r\n          right = findMin(node.right, dim);\r\n          min = node;\r\n\r\n          if (left !== null && left.obj[dimension] < own) {\r\n            min = left;\r\n          }\r\n          if (right !== null && right.obj[dimension] < min.obj[dimension]) {\r\n            min = right;\r\n          }\r\n          return min;\r\n        }\r\n\r\n        if (node.left === null && node.right === null) {\r\n          if (node.parent === null) {\r\n            self.root = null;\r\n            return;\r\n          }\r\n\r\n          pDimension = dimensions[node.parent.dimension];\r\n\r\n          if (node.obj[pDimension] < node.parent.obj[pDimension]) {\r\n            node.parent.left = null;\r\n          } else {\r\n            node.parent.right = null;\r\n          }\r\n          return;\r\n        }\r\n\r\n        // If the right subtree is not empty, swap with the minimum element on the\r\n        // node's dimension. If it is empty, we swap the left and right subtrees and\r\n        // do the same.\r\n        if (node.right !== null) {\r\n          nextNode = findMin(node.right, node.dimension);\r\n          nextObj = nextNode.obj;\r\n          removeNode(nextNode);          \r\n          node.obj = nextObj;\r\n        } else {\r\n          nextNode = findMin(node.left, node.dimension);\r\n          nextObj = nextNode.obj;\r\n          removeNode(nextNode);\r\n          node.right = node.left;\r\n          node.left = null;\r\n          node.obj = nextObj;\r\n        }\r\n\r\n      }\r\n\r\n      node = nodeSearch(self.root);\r\n\r\n      if (node === null) { return; }\r\n\r\n      removeNode(node);\r\n    };\r\n\r\n    this.nearest = function (point, maxNodes, maxDistance) {\r\n      var i,\r\n        result,\r\n        bestNodes;\r\n\r\n      bestNodes = new BinaryHeap(\r\n        function (e) { return -e[1]; }\r\n      );\r\n\r\n      function nearestSearch(node) {\r\n        var bestChild,\r\n          dimension = dimensions[node.dimension],\r\n          ownDistance = metric(point, node.obj),\r\n          linearPoint = {},\r\n          linearDistance,\r\n          otherChild,\r\n          i;\r\n\r\n        function saveNode(node, distance) {\r\n          bestNodes.push([node, distance]);\r\n          if (bestNodes.size() > maxNodes) {\r\n            bestNodes.pop();\r\n          }\r\n        }\r\n\r\n        for (i = 0; i < dimensions.length; i += 1) {\r\n          if (i === node.dimension) {\r\n            linearPoint[dimensions[i]] = point[dimensions[i]];\r\n          } else {\r\n            linearPoint[dimensions[i]] = node.obj[dimensions[i]];\r\n          }\r\n        }\r\n\r\n        linearDistance = metric(linearPoint, node.obj);\r\n\r\n        if (node.right === null && node.left === null) {\r\n          if (bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) {\r\n            saveNode(node, ownDistance);\r\n          }\r\n          return;\r\n        }\r\n\r\n        if (node.right === null) {\r\n          bestChild = node.left;\r\n        } else if (node.left === null) {\r\n          bestChild = node.right;\r\n        } else {\r\n          if (point[dimension] < node.obj[dimension]) {\r\n            bestChild = node.left;\r\n          } else {\r\n            bestChild = node.right;\r\n          }\r\n        }\r\n\r\n        nearestSearch(bestChild);\r\n\r\n        if (bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) {\r\n          saveNode(node, ownDistance);\r\n        }\r\n\r\n        if (bestNodes.size() < maxNodes || Math.abs(linearDistance) < bestNodes.peek()[1]) {\r\n          if (bestChild === node.left) {\r\n            otherChild = node.right;\r\n          } else {\r\n            otherChild = node.left;\r\n          }\r\n          if (otherChild !== null) {\r\n            nearestSearch(otherChild);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (maxDistance) {\r\n        for (i = 0; i < maxNodes; i += 1) {\r\n          bestNodes.push([null, maxDistance]);\r\n        }\r\n      }\r\n\r\n      if(self.root)\r\n        nearestSearch(self.root);\r\n\r\n      result = [];\r\n\r\n      for (i = 0; i < Math.min(maxNodes, bestNodes.content.length); i += 1) {\r\n        if (bestNodes.content[i][0]) {\r\n          result.push([bestNodes.content[i][0].obj, bestNodes.content[i][1]]);\r\n        }\r\n      }\r\n      return result;\r\n    };\r\n\r\n    this.balanceFactor = function () {\r\n      function height(node) {\r\n        if (node === null) {\r\n          return 0;\r\n        }\r\n        return Math.max(height(node.left), height(node.right)) + 1;\r\n      }\r\n\r\n      function count(node) {\r\n        if (node === null) {\r\n          return 0;\r\n        }\r\n        return count(node.left) + count(node.right) + 1;\r\n      }\r\n\r\n      return height(self.root) / (Math.log(count(self.root)) / Math.log(2));\r\n    };\r\n  }\r\n\r\n  // Binary heap implementation from:\r\n  // http://eloquentjavascript.net/appendix2.html\r\n\r\n  function BinaryHeap(scoreFunction){\r\n    this.content = [];\r\n    this.scoreFunction = scoreFunction;\r\n  }\r\n\r\n  BinaryHeap.prototype = {\r\n    push: function(element) {\r\n      // Add the new element to the end of the array.\r\n      this.content.push(element);\r\n      // Allow it to bubble up.\r\n      this.bubbleUp(this.content.length - 1);\r\n    },\r\n\r\n    pop: function() {\r\n      // Store the first element so we can return it later.\r\n      var result = this.content[0];\r\n      // Get the element at the end of the array.\r\n      var end = this.content.pop();\r\n      // If there are any elements left, put the end element at the\r\n      // start, and let it sink down.\r\n      if (this.content.length > 0) {\r\n        this.content[0] = end;\r\n        this.sinkDown(0);\r\n      }\r\n      return result;\r\n    },\r\n\r\n    peek: function() {\r\n      return this.content[0];\r\n    },\r\n\r\n    remove: function(node) {\r\n      var len = this.content.length;\r\n      // To remove a value, we must search through the array to find\r\n      // it.\r\n      for (var i = 0; i < len; i++) {\r\n        if (this.content[i] == node) {\r\n          // When it is found, the process seen in 'pop' is repeated\r\n          // to fill up the hole.\r\n          var end = this.content.pop();\r\n          if (i != len - 1) {\r\n            this.content[i] = end;\r\n            if (this.scoreFunction(end) < this.scoreFunction(node))\r\n              this.bubbleUp(i);\r\n            else\r\n              this.sinkDown(i);\r\n          }\r\n          return;\r\n        }\r\n      }\r\n      throw new Error(\"Node not found.\");\r\n    },\r\n\r\n    size: function() {\r\n      return this.content.length;\r\n    },\r\n\r\n    bubbleUp: function(n) {\r\n      // Fetch the element that has to be moved.\r\n      var element = this.content[n];\r\n      // When at 0, an element can not go up any further.\r\n      while (n > 0) {\r\n        // Compute the parent element's index, and fetch it.\r\n        var parentN = Math.floor((n + 1) / 2) - 1,\r\n            parent = this.content[parentN];\r\n        // Swap the elements if the parent is greater.\r\n        if (this.scoreFunction(element) < this.scoreFunction(parent)) {\r\n          this.content[parentN] = element;\r\n          this.content[n] = parent;\r\n          // Update 'n' to continue at the new position.\r\n          n = parentN;\r\n        }\r\n        // Found a parent that is less, no need to move it further.\r\n        else {\r\n          break;\r\n        }\r\n      }\r\n    },\r\n\r\n    sinkDown: function(n) {\r\n      // Look up the target element and its score.\r\n      var length = this.content.length,\r\n          element = this.content[n],\r\n          elemScore = this.scoreFunction(element);\r\n\r\n      while(true) {\r\n        // Compute the indices of the child elements.\r\n        var child2N = (n + 1) * 2, child1N = child2N - 1;\r\n        // This is used to store the new position of the element,\r\n        // if any.\r\n        var swap = null;\r\n        // If the first child exists (is inside the array)...\r\n        if (child1N < length) {\r\n          // Look it up and compute its score.\r\n          var child1 = this.content[child1N],\r\n              child1Score = this.scoreFunction(child1);\r\n          // If the score is less than our element's, we need to swap.\r\n          if (child1Score < elemScore)\r\n            swap = child1N;\r\n        }\r\n        // Do the same checks for the other child.\r\n        if (child2N < length) {\r\n          var child2 = this.content[child2N],\r\n              child2Score = this.scoreFunction(child2);\r\n          if (child2Score < (swap == null ? elemScore : child1Score)){\r\n            swap = child2N;\r\n          }\r\n        }\r\n\r\n        // If the element needs to be moved, swap it, and continue.\r\n        if (swap != null) {\r\n          this.content[n] = this.content[swap];\r\n          this.content[swap] = element;\r\n          n = swap;\r\n        }\r\n        // Otherwise, we are done.\r\n        else {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  };\r\n  \r\nexport {kdTree, BinaryHeap}\r\n","import L from 'leaflet'\r\n\r\nimport {PaletteMixin} from './PaletteMixin.js'\r\nimport {EventMixin} from '../util/EventMixin.js'\r\nimport {Point, DEFAULT_COLOR} from './Point.js'\r\nimport {enlargeExtentIfEqual} from './palettes.js'\r\nimport {kdTree} from '../util/kdTree.js'\r\n\r\n/**\r\n * A collection of points sharing the same parameters and coordinate referencing system.\r\n * \r\n * @see https://covjson.org/domain-types/#point\r\n * \r\n * @emits {DataLayer#afterAdd} Layer is initialized and was added to the map\r\n * @emits {DataLayer#error} Error when loading data\r\n * @emits {PaletteMixin#paletteChange} Palette has changed\r\n * @emits {PaletteMixin#paletteExtentChange} Palette extent has changed\r\n * @emits {Point#click} when the point was clicked\r\n * \r\n * @extends {L.Layer}\r\n * @extends {PaletteMixin} \r\n */\r\nexport class PointCollection extends PaletteMixin(L.Layer) {\r\n  /**\r\n   * @param {CoverageCollection} covcoll The coverage collection to visualize.\r\n   * @param {Object} [options] The options object.\r\n   * @param {string} [options.parameter] The key of the parameter to display.\r\n   * @param {Palette} [options.palette] The initial color palette to use, the default depends on the parameter type.\r\n   * @param {string} [options.paletteExtent='full'] The initial palette extent, either 'full', 'fov', or specific: [-10,10].\r\n   * @param {string} [options.defaultColor='black'] The color to use for missing data or if no parameter is set.\r\n   * @param {class} [options.pointClass=Point] The {@link PointDataLayer} class to use for the individual points.\r\n   * @param {function} [options.pointOptionsFn] A function that returns additional options to apply for each point class instance.  \r\n   */\r\n  constructor (covcoll, options={}) {\r\n    super()\r\n    \r\n    // TODO how should we handle collection paging?\r\n    \r\n    if (!options.paletteExtent) {\r\n      options.paletteExtent = 'full'\r\n    }\r\n    \r\n    L.Util.setOptions(this, options)\r\n\r\n    this._covcoll = covcoll\r\n    let paramKey = options.keys ? options.keys[0] : options.parameter\r\n    this._param = paramKey ? covcoll.parameters.get(paramKey) : null\r\n    this._defaultColor = options.defaultColor || DEFAULT_COLOR\r\n    this._pointClass = options.pointClass || Point\r\n        \r\n    this._layerGroup = L.layerGroup()\r\n    this._layers = []\r\n    this._kdtree = undefined\r\n    \r\n    this.on('paletteChange', () => {\r\n      for (let layer of this._layers) {\r\n        layer.palette = this.palette\r\n      }\r\n    })\r\n    this.on('paletteExtentChange', () => {\r\n      for (let layer of this._layers) {\r\n        layer.paletteExtent = this.paletteExtent\r\n      }\r\n    })\r\n  }\r\n  \r\n  /**\r\n   * @ignore\r\n   * @override\r\n   */\r\n  onAdd (map) {\r\n    this._map = map\r\n    this._layerLoadCount = 0\r\n    this._layerErrors = []\r\n    \r\n    let options = {\r\n      keys: this._param ? [this._param.key] : undefined,\r\n      defaultColor: this._defaultColor,\r\n      palette: this.palette,\r\n      paletteExtent: this.paletteExtent\r\n    }\r\n    if (this.options.pointOptionsFn) {\r\n      let opts = this.options.pointOptionsFn()\r\n      for (let key in opts) {\r\n        options[key] = opts[key]\r\n      }\r\n    }\r\n    for (let cov of this._covcoll.coverages) {\r\n      let layer = new this._pointClass(cov, options)\r\n      this._attachListeners(layer, cov)\r\n      this._layerGroup.addLayer(layer)\r\n      this._layers.push(layer)\r\n      layer.load()\r\n      if (this._popupFn) {\r\n        let popup = this._popupFn(layer.coverage)\r\n        layer.bindPopup(popup)\r\n      }\r\n    }\r\n    \r\n  }\r\n  \r\n  /**\r\n   * @ignore\r\n   * @override\r\n   */\r\n  onRemove (map) {\r\n    map.removeLayer(this._layerGroup)\r\n    this._layerGroup = L.layerGroup()\r\n    this._layers = []\r\n  }\r\n  \r\n  /**\r\n   * Binds a popup to each point instance.\r\n   * \r\n   * @param {function(cov: Coverage):String|HTMLElement|L.Popup} fn Returns the popup for a given point coverage. \r\n   */\r\n  bindPopupEach (fn) {\r\n    this._popupFn = fn\r\n  }\r\n  \r\n  _attachListeners (layer, cov) {\r\n    layer.once('dataLoad', () => {\r\n      ++this._layerLoadCount\r\n      this._fireIfOnAddDone()\r\n    }).once('error', e => {\r\n      this._layerErrors.push(e)\r\n    }).on('click', e => {\r\n      e.coverage = cov\r\n      this.fire('click', e)\r\n    })\r\n  }\r\n  \r\n  _fireIfOnAddDone () {\r\n    if (this._layerLoadCount === this._layers.length) {\r\n      if (this._layerErrors.length > 0) {\r\n        this.fire('error', {errors: this._layerErrors})\r\n      } else {\r\n        this._initKdtree()\r\n        this.initializePalette().then(() => {\r\n          this._layerGroup.addTo(this._map)\r\n          this.fire('afterAdd')\r\n        })\r\n      }\r\n    }\r\n  }\r\n  \r\n  _initKdtree () {\r\n    let points = this._layers.map(layer => {\r\n      let point = layer.getLatLng()\r\n      point.layer = layer\r\n      return point\r\n    })\r\n    let distance = (point1, point2) => L.LatLng.prototype.distanceTo.call(point1, point2)\r\n    let dimensions = ['lat', 'lng']\r\n    this._kdtree = new kdTree(points, distance, dimensions)\r\n  }\r\n  \r\n  /**\r\n   * Returns the geographic bounds of the coverage collection.\r\n   * \r\n   * @return {L.LatLngBounds}\r\n   */\r\n  getBounds () {\r\n    return L.latLngBounds(this._layers.map(layer => layer.getLatLng()))\r\n  }\r\n  \r\n  /**\r\n   * Return the displayed value of the point coverage closest to\r\n   * the given position and within the given maximum distance.\r\n   * If no coverage is found, undefined is returned, otherwise\r\n   * a number or null (no-data).\r\n   * \r\n   * @param {L.LatLng} latlng reference position\r\n   * @param {number} maxDistance\r\n   *   Maximum distance in meters that the point coverage may be\r\n   *   apart from the given position.\r\n   * @return {number|null|undefined}\r\n   */\r\n  getValueAt (latlng, maxDistance) {\r\n    let points = this._kdtree.nearest(latlng, 1, maxDistance)\r\n    if (points.length > 0) {\r\n      let point = points[0][0]\r\n      let val = point.layer.getValue()\r\n      return val\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * The parameter that is visualized.\r\n   * \r\n   * @type {Parameter}\r\n   */\r\n  get parameter () {\r\n    return this._param\r\n  }\r\n    \r\n  /**\r\n   * See {@link PaletteMixin}.\r\n   * \r\n   * @ignore\r\n   */\r\n  computePaletteExtent (extent) {\r\n    if (!this._param) {\r\n      throw new Error('palette extent cannot be set when no parameter has been chosen')\r\n    }\r\n    \r\n    let layers\r\n    if (extent === 'full') {\r\n      layers = this._layers\r\n    } else if (extent === 'fov') {\r\n      let bounds = this._map.getBounds()\r\n      layers = this._layers.filter(layer => bounds.contains(layer.getLatLng()))\r\n    } else {\r\n      throw new Error('Unsupported: ' + extent)\r\n    }\r\n    \r\n    let min = Infinity\r\n    let max = -Infinity\r\n    for (let layer of layers) {\r\n      let val = layer.getValue()\r\n      if (val != null) {\r\n        min = Math.min(min, val)\r\n        max = Math.max(max, val)\r\n      }\r\n    }\r\n    extent = enlargeExtentIfEqual([min, max])\r\n    return Promise.resolve(extent)\r\n  }\r\n  \r\n  /**\r\n   * Redraw each point layer.\r\n   */\r\n  redraw () {\r\n    for (let layer of this._layers) {\r\n      layer.redraw()\r\n    }\r\n  }\r\n}\r\n","import L from 'leaflet'\r\nimport {isDomain, fromDomain, indexOfNearest, minMaxOfRange} from 'covutils'\r\n\r\nimport {enlargeExtentIfEqual} from './palettes.js'\r\nimport {CoverageMixin} from './CoverageMixin.js'\r\nimport {CircleMarkerMixin} from './CircleMarkerMixin.js'\r\nimport {PaletteMixin} from './PaletteMixin.js'\r\nimport {EventMixin} from '../util/EventMixin.js'\r\n\r\nimport {DEFAULT_COLOR} from './Point.js'\r\n\r\n/**\r\n * Renderer for Coverages conforming to the CovJSON domain type `VerticalProfile`.\r\n * \r\n * This will simply display a dot on the map and fire a click event when a user clicks on it.\r\n * The dot either has a defined standard color, or it uses\r\n * a palette together with a target depth if a parameter is chosen.\r\n * \r\n * @example\r\n * var cov = ... // get Coverage data\r\n * var layer = new C.VerticalProfile(cov, {\r\n *   parameter: 'salinity',\r\n *   vertical: 30,\r\n *   defaultColor: 'black',\r\n *   palette: C.linearPalette(['#FFFFFF', '#000000'])\r\n * })\r\n * \r\n * @see https://covjson.org/domain-types/#verticalprofile\r\n * \r\n * @emits {DataLayer#afterAdd} Layer is initialized and was added to the map\r\n * @emits {DataLayer#dataLoading} Data loading has started\r\n * @emits {DataLayer#dataLoad} Data loading has finished (also in case of errors)\r\n * @emits {DataLayer#error} Error when loading data\r\n * @emits {DataLayer#axisChange} Axis coordinate has changed (e.axis === 'vertical')\r\n * @emits {PaletteMixin#paletteChange} Palette has changed\r\n * @emits {PaletteMixin#paletteExtentChange} Palette extent has changed\r\n * @emits {Point#click} when the point was clicked\r\n * \r\n * @extends {L.Layer}\r\n * @extends {CoverageMixin}\r\n * @extends {CircleMarkerMixin}\r\n * @extends {PaletteMixin}\r\n * @implements {DataLayer}\r\n * @implements {PointDataLayer}\r\n */\r\nexport class VerticalProfile extends PaletteMixin(CircleMarkerMixin(CoverageMixin(L.Layer))) {\r\n  \r\n  /**\r\n   * An optional vertical axis target value can be defined with the 'vertical' property.\r\n   * The closest values on the vertical axis is chosen.\r\n   * \r\n   * @param {Coverage|Domain} cov The coverage or domain object to visualize.\r\n   * @param {Object} [options] The options object.\r\n   * @param {string} [options.parameter] The key of the parameter to display, not needed for domain objects.\r\n   * @param {number} [options.vertical] The initial vertical slice to display.\r\n   * @param {Palette} [options.palette] The initial color palette to use, the default depends on the parameter type.\r\n   * @param {string} [options.paletteExtent='full'] The initial palette extent, either 'full' or specific: [-10,10].\r\n   * @param {string} [options.defaultColor='black'] The color to use for missing data or if no parameter is set.\r\n   * @param {boolean} [options.showNoData=false] Whether to draw the point if there is no data.\r\n   */\r\n  constructor (cov, options) {\r\n    super()\r\n    \r\n    if (isDomain(cov)) {\r\n      cov = fromDomain(cov)\r\n      delete options.keys\r\n      options.parameter = cov.parameters.keys().next().value\r\n    }\r\n    \r\n    if (!options.paletteExtent) {\r\n      options.paletteExtent = 'full'\r\n    }\r\n    \r\n    L.Util.setOptions(this, options)\r\n\r\n    this._cov = cov\r\n    let paramKey = options.keys ? options.keys[0] : options.parameter\r\n    this._param = paramKey ? cov.parameters.get(paramKey) : null\r\n    this._axesSubset = {\r\n      z: {coordPref: options.vertical}\r\n    }\r\n    this._defaultColor = options.defaultColor || DEFAULT_COLOR\r\n\r\n    /** @ignore */\r\n    this.showNoData = options.showNoData // if true, draw with default color\r\n  }\r\n  \r\n  /**\r\n   * @ignore\r\n   * @override\r\n   */\r\n  onAdd (map) {\r\n    this._map = map\r\n\r\n    this.load()\r\n      .then(() => this.initializePalette())\r\n      .then(() => {\r\n        this._addMarker()\r\n        this.fire('afterAdd')\r\n      })\r\n  }\r\n    \r\n  _loadCoverageSubset () {\r\n    // adapted from Grid.js\r\n    let z = this._axesSubset.z\r\n    if (z.coordPref == undefined) {\r\n      z.idx = z.coord = undefined\r\n    } else {\r\n      let vals = this.domain.axes.get('z').values\r\n      z.idx = indexOfNearest(vals, z.coordPref)\r\n      z.coord = vals[z.idx]\r\n    }\r\n    \r\n    // Note that we don't subset the coverage currently, since there is no real need for it\r\n  }\r\n  \r\n  /**\r\n   * @ignore\r\n   * @override\r\n   */\r\n  onRemove () {\r\n    this._removeMarker()\r\n  }\r\n  \r\n  /**\r\n   * Returns the geographic bounds of the coverage, which is a degenerate box collapsed to a point.\r\n   * \r\n   * @return {L.LatLngBounds}\r\n   */\r\n  getBounds () {\r\n    return L.latLngBounds([this.getLatLng()])\r\n  }\r\n  \r\n  /**\r\n   * Returns the geographical position of the coverage.\r\n   * \r\n   * @return {L.LatLng}\r\n   */\r\n  getLatLng () {\r\n    let x = this.domain.axes.get(this._projX).values[0]\r\n    let y = this.domain.axes.get(this._projY).values[0]\r\n    let latlng = this.projection.unproject({x,y})\r\n    return L.latLng(latlng)\r\n  }\r\n  \r\n  /**\r\n   * The coverage object associated to this layer.\r\n   * \r\n   * @type {Coverage}\r\n   */\r\n  get coverage () {\r\n    return this._cov\r\n  }\r\n    \r\n  /**\r\n   * The parameter that is visualized.\r\n   * \r\n   * @type {Parameter}\r\n   */\r\n  get parameter () {\r\n    return this._param\r\n  }\r\n  \r\n  /**\r\n   * The currently active vertical coordinate, or undefined if no coordinate is set.\r\n   * \r\n   * @type {number|undefined}\r\n   */\r\n  get vertical () {\r\n    return this._axesSubset.z.coord\r\n  }\r\n  \r\n  /**\r\n   * Sets the currently active vertical coordinate to the one closest to the given value.\r\n   * \r\n   * @type {number|undefined}\r\n   */\r\n  set vertical (val) {\r\n    this._axesSubset.z.coordPref = val\r\n    this._loadCoverageSubset()\r\n    this.redraw()\r\n    this.fire('axisChange', {axis: 'vertical'}) \r\n  }\r\n  \r\n  /**\r\n   * The vertical slices that make up the coverage.\r\n   * \r\n   * @type {Array<number>}\r\n   */\r\n  get verticalSlices () {\r\n    let vals = this.domain.axes.get('z').values\r\n    if (ArrayBuffer.isView(vals)) {\r\n      // convert to plain Array to allow easier use\r\n      vals = [...vals]\r\n    }\r\n    return vals\r\n  }\r\n    \r\n  /**\r\n   * See {@link PaletteMixin}.\r\n   * \r\n   * @ignore\r\n   */\r\n  canUsePalette () {\r\n    return this.vertical !== undefined\r\n  }\r\n    \r\n  /**\r\n   * See {@link PaletteMixin}.\r\n   * \r\n   * @ignore\r\n   */\r\n  computePaletteExtent (extent) {\r\n    if (extent === 'full') {\r\n      if (!this.parameter) {\r\n        throw new Error('palette extent cannot be set when no parameter has been chosen')\r\n      }\r\n      \r\n      extent = minMaxOfRange(this.range)\r\n      extent = enlargeExtentIfEqual(extent)\r\n      return Promise.resolve(extent)\r\n    } else {\r\n      throw new Error('Unknown extent specification: ' + extent)\r\n    }\r\n  }\r\n    \r\n  /**\r\n   * Return the displayed value (number, or null for no-data),\r\n   * or undefined if not fixed to a z-coordinate or parameter.\r\n   * \r\n   * @returns {number|null|undefined}\r\n   */\r\n  getValue () {\r\n    if (this._param && this._axesSubset.z.coord !== undefined) {\r\n      let val = this.range.get({z: this._axesSubset.z.idx})\r\n      return val\r\n    }    \r\n  }\r\n  \r\n  /**\r\n   * Return the displayed value if within the given distance of the reference point.\r\n   * If out of bounds, then undefined is returned, otherwise a number or null (for no data).\r\n   * \r\n   * @param {L.LatLng} latlng\r\n   * @param {number} maxDistance Maximum distance in meters between both points.\r\n   * @returns {number|null|undefined}\r\n   */\r\n  getValueAt (latlng, maxDistance) {\r\n    let point = this.getLatLng()\r\n    if (point.distanceTo(latlng) <= maxDistance) {\r\n      return this.getValue()\r\n    }\r\n  }\r\n  \r\n  _getColor (val) {\r\n    if (val === null) {\r\n      // no-data\r\n      return this._defaultColor\r\n    } else if (val === undefined) {\r\n      // not fixed to a param or z-coordinate\r\n      return this._defaultColor\r\n    } else {\r\n      // use a palette\r\n      let idx = this.getPaletteIndex(val)\r\n      let {red, green, blue} = this.palette\r\n      return {r: red[idx], g: green[idx], b: blue[idx]}\r\n    }\r\n  }\r\n}\r\n","import {PointCollection} from './PointCollection.js'\r\nimport {VerticalProfile} from './VerticalProfile.js'\r\n\r\n/**\r\n * A collection of vertical profiles sharing the same parameters and coordinate referencing system.\r\n * \r\n * @see https://covjson.org/domain-types/#verticalprofile\r\n * \r\n * @emits {DataLayer#afterAdd} Layer is initialized and was added to the map\r\n * @emits {DataLayer#error} Error when loading data\r\n * @emits {PaletteMixin#paletteChange} Palette has changed\r\n * @emits {PaletteMixin#paletteExtentChange} Palette extent has changed\r\n * @emits {Point#click} when the point was clicked\r\n */\r\nexport class VerticalProfileCollection extends PointCollection {\r\n\r\n  /**\r\n   * @param {CoverageCollection} covcoll The coverage collection to visualize.\r\n   * @param {Object} [options] The options object.\r\n   * @param {string} [options.parameter] The key of the parameter to display.\r\n   * @param {Palette} [options.palette] The initial color palette to use, the default depends on the parameter type.\r\n   * @param {string} [options.paletteExtent='full'] The initial palette extent, either 'full', 'fov', or specific: [-10,10].\r\n   * @param {string} [options.defaultColor='black'] The color to use for missing data or if no parameter is set.  \r\n   */\r\n  constructor (covcoll, options) {\r\n    options.pointClass = VerticalProfile\r\n    super(covcoll, options)\r\n    // has to be after super() as it references 'this'    \r\n    options.pointOptionsFn = () => ({\r\n      vertical: this._vertical\r\n    })\r\n    \r\n    this._vertical = options.vertical\r\n  }\r\n  \r\n  /**\r\n   * Sets the currently active vertical coordinate for all vertical profiles to the one closest to the given value.\r\n   * \r\n   * @type {number|undefined}\r\n   */\r\n  set vertical (val) {\r\n    this._vertical = val\r\n    for (let layer of this._layers) {\r\n      layer.vertical = val\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * See {@link PaletteMixin}.\r\n   * \r\n   * @ignore\r\n   */\r\n  canUsePalette () {\r\n    return this._vertical !== undefined\r\n  }\r\n}\r\n","import L from 'leaflet'\r\nimport {isDomain, fromDomain, minMaxOfRange, ensureClockwisePolygon, getPointInPolygonsFn} from 'covutils'\r\n\r\nimport {enlargeExtentIfEqual} from './palettes.js'\r\nimport {PaletteMixin} from './PaletteMixin.js'\r\nimport {CoverageMixin} from './CoverageMixin.js'\r\nimport {EventMixin} from '../util/EventMixin.js'\r\n  \r\n/** @ignore */\r\nexport const DEFAULT_COLOR = 'black'\r\n\r\n/**\r\n * The `click` event, signalling that a polygon has been clicked.\r\n * \r\n * @typedef {L.MouseEvent} MultiPolygon#click\r\n * @property {number} index The axis index of the polygon that was clicked.\r\n * @property {L.LatLng} latlng The geographical point where the click event occured.\r\n */\r\n\r\n/**\r\n * Renderer for Coverages and Domains conforming to CovJSON domain type `MultiPolygon`.\r\n *\r\n * @example\r\n * var cov = ... // get Coverage data\r\n * var layer = new C.MultiPolygon(cov, {\r\n *   parameter: 'salinity',\r\n *   defaultColor: 'black',\r\n *   palette: C.linearPalette(['#FFFFFF', '#000000'])\r\n * })\r\n * \r\n * @see https://covjson.org/domain-types/#multipolygon\r\n * \r\n * @emits {DataLayer#afterAdd} Layer is initialized and was added to the map\r\n * @emits {DataLayer#dataLoading} Data loading has started\r\n * @emits {DataLayer#dataLoad} Data loading has finished (also in case of errors)\r\n * @emits {DataLayer#error} Error when loading data\r\n * @emits {PaletteMixin#paletteChange} Palette has changed\r\n * @emits {PaletteMixin#paletteExtentChange} Palette extent has changed\r\n * @emits {MultiPolygon#click} when a polygon was clicked\r\n * \r\n * @extends {L.Layer}\r\n * @extends {CoverageMixin}\r\n * @extends {PaletteMixin}\r\n * @implements {DataLayer}\r\n */\r\nexport class MultiPolygon extends PaletteMixin(CoverageMixin(L.Layer)) {\r\n  \r\n  /**\r\n   * The key of the parameter to display can be given in the 'parameter' options property,\r\n   * it will be ignored if the coverage data object is a Domain object.\r\n   * \r\n   * @param {Coverage|Domain} cov The coverage or domain object to visualize.\r\n   * @param {Object} [options] The options object.\r\n   * @param {string} [options.parameter] The key of the parameter to display, not needed for domain objects.\r\n   * @param {Palette} [options.palette] The initial color palette to use, the default depends on the parameter type.\r\n   * @param {string} [options.paletteExtent='full'] The initial palette extent, either 'full' or specific: [-10,10].\r\n   * @param {string} [options.defaultColor='black'] The color to use for missing data or if no parameter is set.\r\n   */\r\n  constructor (cov, options) {\r\n    super()\r\n    \r\n    if (isDomain(cov)) {\r\n      cov = fromDomain(cov)\r\n      options.parameter = cov.parameters.keys().next().value\r\n      delete options.keys\r\n    }\r\n    \r\n    if (!options.paletteExtent) {\r\n      options.paletteExtent = 'full'\r\n    }\r\n    \r\n    L.Util.setOptions(this, options)\r\n    \r\n    this._cov = cov\r\n    let paramKey = options.keys ? options.keys[0] : options.parameter\r\n    this._param = paramKey ? cov.parameters.get(paramKey) : null\r\n    this._defaultColor = options.defaultColor || DEFAULT_COLOR\r\n  }\r\n  \r\n  /**\r\n   * @ignore\r\n   * @override\r\n   */\r\n  onAdd (map) {\r\n    this._map = map\r\n    \r\n    this.load()\r\n      .then(() => this.initializePalette())\r\n      .then(() => {\r\n        this._unproject()\r\n        this._addPolygons()\r\n        this._pointInPolygonPreprocess()\r\n        this.fire('afterAdd')\r\n    })\r\n  }\r\n  \r\n  _unproject () {\r\n    let unproject = this.projection.unproject\r\n    let axis = this.domain.axes.get('composite')\r\n    let ix = axis.coordinates.indexOf(this._projX)\r\n    let iy = axis.coordinates.indexOf(this._projY)\r\n\r\n    this._polygonsLonLat = axis.values.map(polygon => polygon.map(ring => ring.map(coords => {\r\n      let {lat,lon} = unproject({x: coords[ix], y: coords[iy]})\r\n      return [lon,lat]\r\n    })))\r\n  }\r\n  \r\n  /**\r\n   * @ignore\r\n   * @override\r\n   */\r\n  onRemove (map) {\r\n    this._removePolygons()\r\n  }\r\n  \r\n  \r\n  /**\r\n   * Returns the geographic bounds of the coverage.\r\n   * \r\n   * @return {L.LatLngBounds}\r\n   */\r\n  getBounds () {\r\n    return this._geojson.getBounds()\r\n  }\r\n  \r\n  /**\r\n   * Returns the geographical center position of the coverage based on its bounding box.\r\n   * \r\n   * @return {L.LatLng}\r\n   */\r\n  getLatLng () {\r\n    return this.getBounds().getCenter()\r\n  }\r\n  \r\n\r\n  /**\r\n   * The coverage object associated to this layer.\r\n   * \r\n   * @type {Coverage}\r\n   */\r\n  get coverage () {\r\n    return this._cov\r\n  }\r\n  \r\n  /**\r\n   * The parameter that is visualized.\r\n   * \r\n   * @type {Parameter}\r\n   */\r\n  get parameter () {\r\n    return this._param\r\n  }\r\n      \r\n  /**\r\n   * See {@link PaletteMixin}.\r\n   * \r\n   * @ignore\r\n   */\r\n  computePaletteExtent (extent) {\r\n    if (extent === 'full') {\r\n      if (!this.parameter) {\r\n        throw new Error('palette extent cannot be computed when no parameter has been chosen')\r\n      }\r\n    \r\n      extent = minMaxOfRange(this.range)\r\n      extent = enlargeExtentIfEqual(extent)\r\n      return Promise.resolve(extent)\r\n    } else {\r\n      throw new Error('Unknown extent specification: ' + extent)\r\n    }\r\n  }\r\n  \r\n  _pointInPolygonPreprocess () {\r\n    let polygons = this._polygonsLonLat\r\n    // TODO we assume spherical coordinates for now\r\n    let isCartesian = false\r\n    // A bit evil since this modifies in-place, but nothing bad should happen.\r\n    polygons.forEach(p => ensureClockwisePolygon(p, isCartesian))\r\n    this._pointInPolygons = getPointInPolygonsFn(polygons)\r\n  }\r\n  \r\n  _addPolygons () {\r\n    let polygons = this._polygonsLonLat\r\n    \r\n    let geojson = []\r\n    for (let i=0; i < polygons.length; i++) {\r\n      geojson.push({\r\n        \"type\": \"Feature\",\r\n        \"properties\": {\r\n          \"index\": i,\r\n          \"color\": this._getColor(this._getValue(i))\r\n        },\r\n        \"geometry\": {\r\n          \"type\": \"Polygon\",\r\n          \"coordinates\": polygons[i]\r\n        }\r\n      })\r\n    }\r\n    \r\n    this._geojson = L.geoJson(geojson, {\r\n      style: feature => ({\r\n        color: feature.properties.color,\r\n        fillOpacity: 1,\r\n        stroke: false\r\n      }),\r\n      onEachFeature: (feature, layer) => {\r\n        layer.on('click', e => {\r\n          e.index = feature.properties.index\r\n          this.fire('click', e)\r\n        })\r\n      }\r\n    })\r\n    \r\n    this._geojson.addTo(this._map)\r\n  }\r\n  \r\n  _removePolygons () {\r\n    this._map.removeLayer(this._geojson)\r\n    delete this._geojson\r\n  }\r\n  \r\n  _getValue (index) {\r\n    if (this._param) {\r\n      return this.range.get({composite: index})\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Return the displayed value at a given geographic position.\r\n   * If out of bounds, then undefined is returned, otherwise a number or null (for no data).\r\n   * \r\n   * @param {L.LatLng} latlng\r\n   * @returns {number|null|undefined}\r\n   */\r\n  getValueAt (latlng) {\r\n    // TODO longitude wrapping\r\n    let i = this._pointInPolygons([latlng.lng, latlng.lat])\r\n    if (i >= 0) {\r\n      return this._getValue(i)\r\n    }    \r\n  }\r\n  \r\n  // NOTE: this returns a string, not an {r,g,b} object as in other classes!\r\n  _getColor (val) {\r\n    if (val === null) {\r\n      // no-data\r\n      return this._defaultColor\r\n    } else if (val === undefined) {\r\n      // not fixed to a param\r\n      return this._defaultColor\r\n    } else {\r\n      // use a palette\r\n      let idx = this.getPaletteIndex(val)\r\n      let {red, green, blue} = this.palette\r\n      return `rgb(${red[idx]}, ${green[idx]}, ${blue[idx]})`\r\n    }\r\n  }\r\n  \r\n  _updatePolygons () {\r\n    this._removePolygons()\r\n    this._addPolygons()\r\n  }\r\n  \r\n  /**\r\n   * Redraw the layer.\r\n   */\r\n  redraw () {\r\n    this._updatePolygons()\r\n    this._geojson.redraw()\r\n  }\r\n  \r\n}\r\n","import L from 'leaflet'\r\nimport {indexOfNearest, minMaxOfRange, isDomain, fromDomain, ensureClockwisePolygon, getPointInPolygonsFn} from 'covutils'\r\n\r\nimport {enlargeExtentIfEqual} from './palettes.js'\r\nimport {CoverageMixin} from './CoverageMixin.js'\r\nimport {EventMixin} from '../util/EventMixin.js'\r\nimport {PaletteMixin} from './PaletteMixin.js'\r\n\r\nimport {DEFAULT_COLOR} from './Point.js'\r\n\r\n// TODO nearly identical to VerticalProfile\r\n\r\n/**\r\n * Renderer for Coverages conforming to the CovJSON domain type `PolygonSeries`.\r\n * \r\n * @example\r\n * var cov = ... // get Coverage data\r\n * var layer = new C.PolygonSeries(cov, {\r\n *   parameter: 'salinity',\r\n *   time: new Date('2015-01-01T12:00:00Z'),\r\n *   defaultColor: 'black',\r\n *   palette: C.linearPalette(['#FFFFFF', '#000000'])\r\n * })\r\n * \r\n * @see https://covjson.org/domain-types/#polygonseries\r\n * \r\n * @emits {DataLayer#afterAdd} Layer is initialized and was added to the map\r\n * @emits {DataLayer#dataLoading} Data loading has started\r\n * @emits {DataLayer#dataLoad} Data loading has finished (also in case of errors)\r\n * @emits {DataLayer#error} Error when loading data\r\n * @emits {DataLayer#axisChange} Axis coordinate has changed (e.axis === 'time')\r\n * @emits {PaletteMixin#paletteChange} Palette has changed\r\n * @emits {PaletteMixin#paletteExtentChange} Palette extent has changed\r\n * @emits {Point#click} when the polygon was clicked\r\n * \r\n * @extends {L.Layer}\r\n * @extends {CoverageMixin}\r\n * @extends {PaletteMixin}\r\n * @implements {DataLayer}\r\n */\r\nexport class PolygonSeries extends PaletteMixin(CoverageMixin(L.Layer)) {\r\n  \r\n  /**\r\n   * An optional time axis target value can be defined with the 'time' property.\r\n   * The closest values on the time axis is chosen.\r\n   * \r\n   * @param {Coverage|Domain} cov The coverage or domain object to visualize.\r\n   * @param {Object} [options] The options object.\r\n   * @param {string} [options.parameter] The key of the parameter to display, not needed for domain objects.\r\n   * @param {Date} [options.time] The initial time step to display.\r\n   * @param {Palette} [options.palette] The initial color palette to use, the default depends on the parameter type.\r\n   * @param {string} [options.paletteExtent='full'] The initial palette extent, either 'full' or specific: [-10,10].\r\n   * @param {string} [options.defaultColor='black'] The color to use for missing data or if no parameter is set.\r\n   */\r\n  constructor (cov, options) {\r\n    super()\r\n    \r\n    if (isDomain(cov)) {\r\n      cov = fromDomain(cov)\r\n      delete options.keys\r\n      options.parameter = cov.parameters.keys().next().value\r\n    }\r\n    \r\n    if (!options.paletteExtent) {\r\n      options.paletteExtent = 'full'\r\n    }\r\n    \r\n    L.Util.setOptions(this, options)\r\n\r\n    this._cov = cov\r\n    let paramKey = options.keys ? options.keys[0] : options.parameter\r\n    this._param = paramKey ? cov.parameters.get(paramKey) : null\r\n    this._axesSubset = {\r\n      t: {coordPref: options.time}\r\n    }\r\n    this._defaultColor = options.defaultColor || DEFAULT_COLOR\r\n  }\r\n  \r\n  /**\r\n   * @ignore\r\n   * @override\r\n   */\r\n  onAdd (map) {\r\n    this._map = map\r\n\r\n    this.load()\r\n      .then(() => this.initializePalette())\r\n      .then(() => {\r\n        this._unproject()\r\n        this._addPolygon()\r\n        this._pointInPolygonPreprocess()\r\n        this.fire('afterAdd')\r\n      })\r\n  }\r\n  \r\n  _unproject () {\r\n    let unproject = this.projection.unproject\r\n    let axis = this.domain.axes.get('composite')\r\n    let ix = axis.coordinates.indexOf(this._projX)\r\n    let iy = axis.coordinates.indexOf(this._projY)\r\n    \r\n    this._polygonLonLat = axis.values[0].map(ring => ring.map(coords => {\r\n      let {lat,lon} = unproject({x: coords[ix], y: coords[iy]})\r\n      return [lon,lat]\r\n    }))\r\n  }\r\n    \r\n  _loadCoverageSubset () {\r\n    // adapted from Grid.js\r\n    let t = this._axesSubset.t\r\n    if (t.coordPref == undefined) {\r\n      t.idx = t.coord = undefined\r\n    } else {\r\n      let vals = this.domain.axes.get('t').values.map(v => v.getTime())\r\n      t.idx = indexOfNearest(vals, t.coordPref.getTime())\r\n      t.coord = vals[t.idx]\r\n    }\r\n    \r\n    // Note that we don't subset the coverage currently, since there is no real need for it\r\n  }\r\n  \r\n  /**\r\n   * @ignore\r\n   * @override\r\n   */\r\n  onRemove () {\r\n    this._removePolygon()\r\n  }\r\n  \r\n  /**\r\n   * Returns the geographic bounds of the coverage.\r\n   * \r\n   * @return {L.LatLngBounds}\r\n   */\r\n  getBounds () {\r\n    return this._geojson.getBounds()\r\n  }\r\n  \r\n  /**\r\n   * Returns the geographical center position of the coverage based on its bounding box.\r\n   * \r\n   * @return {L.LatLng}\r\n   */\r\n  getLatLng () {\r\n    return this.getBounds().getCenter()\r\n  }\r\n  \r\n  /**\r\n   * @ignore\r\n   * @override\r\n   */\r\n  bindPopup (...args) {\r\n    this._popup = args\r\n    if (this._geojson) {\r\n      this._geojson.bindPopup(...args)\r\n    }\r\n    return this\r\n  }\r\n  \r\n  /**\r\n   * @ignore\r\n   * @override\r\n   */\r\n  openPopup () {\r\n    this._geojson.openPopup()\r\n    return this\r\n  }\r\n  \r\n  /**\r\n   * @ignore\r\n   * @override\r\n   */\r\n  closePopup () {\r\n    this._geojson.closePopup()\r\n    return this\r\n  }\r\n  \r\n  /**\r\n   * The coverage object associated to this layer.\r\n   * \r\n   * @type {Coverage}\r\n   */\r\n  get coverage () {\r\n    return this._cov\r\n  }\r\n    \r\n  /**\r\n   * The parameter that is visualized.\r\n   * \r\n   * @type {Parameter}\r\n   */\r\n  get parameter () {\r\n    return this._param\r\n  }\r\n  \r\n  /**\r\n   * Sets the currently active time to the one closest to the given Date object.\r\n   * \r\n   * @type {Date|undefined}\r\n   */\r\n  set time (val) {\r\n    let old = this.time\r\n    this._axesSubset.t.coordPref = val ? val.toISOString() : undefined\r\n    \r\n    this._loadCoverageSubset()\r\n    if (old === this.time) return\r\n    this.redraw()\r\n    this.fire('axisChange', {axis: 'time'})\r\n  }\r\n  \r\n  /**\r\n   * The currently active time on the temporal axis as Date object, \r\n   * or undefined if no time is set.\r\n   * \r\n   * @type {Date|undefined}\r\n   */\r\n  get time () {\r\n    if (!this._axesSubset.t.coord) {\r\n      return\r\n    }\r\n    let time = this.domain.axes.get('t').values[this._axesSubset.t.idx]\r\n    return new Date(time)\r\n  }\r\n  \r\n  /**\r\n   * The time slices that make up the coverage.\r\n   * \r\n   * @type {Array<Date>}\r\n   */\r\n  get timeSlices () {\r\n    return this.domain.axes.get('t').values.map(t => new Date(t))\r\n  }\r\n    \r\n  /**\r\n   * See {@link PaletteMixin}.\r\n   * \r\n   * @ignore\r\n   */\r\n  canUsePalette () {\r\n    return this.time !== undefined\r\n  }\r\n    \r\n  /**\r\n   * See {@link PaletteMixin}.\r\n   * \r\n   * @ignore\r\n   */\r\n  computePaletteExtent (extent) {\r\n    if (extent === 'full') {\r\n      if (!this.parameter) {\r\n        throw new Error('palette extent cannot be computed when no parameter has been chosen')\r\n      }\r\n    \r\n      extent = minMaxOfRange(this.range)\r\n      extent = enlargeExtentIfEqual(extent)\r\n      return Promise.resolve(extent)\r\n    } else {\r\n      throw new Error('Unknown extent specification: ' + extent)\r\n    }\r\n  }\r\n  \r\n  _pointInPolygonPreprocess () {\r\n    let polygon = this._polygonLonLat\r\n    // TODO we assume spherical coordinates for now\r\n    let isCartesian = false\r\n    // A bit evil since this modifies in-place, but nothing bad should happen.\r\n    ensureClockwisePolygon(polygon, isCartesian)\r\n    let pointInPolygons = getPointInPolygonsFn([polygon])\r\n    this._pointInPolygon = point => pointInPolygons(point) !== -1\r\n  }\r\n  \r\n  _addPolygon () {\r\n    let polygon = this._polygonLonLat\r\n    \r\n    let geojson = {\r\n      \"type\": \"Feature\",\r\n      \"properties\": {\r\n        \"color\": this._getColor(this.getValue())\r\n      },\r\n      \"geometry\": {\r\n        \"type\": \"Polygon\",\r\n        \"coordinates\": polygon\r\n      }\r\n    }\r\n    \r\n    this._geojson = L.geoJson(geojson, {\r\n      style: feature => ({\r\n        color: feature.properties.color,\r\n        fillOpacity: 1,\r\n        stroke: false\r\n      }),\r\n      onEachFeature: (feature, layer) => {\r\n        layer.on('click', e => this.fire('click', e))\r\n      }\r\n    })\r\n    \r\n    if (this._popup) {\r\n      this._geojson.bindPopup(...this._popup)\r\n    }\r\n    \r\n    this._geojson.addTo(this._map)\r\n  }\r\n  \r\n  _removePolygon () {\r\n    this._map.removeLayer(this._geojson)\r\n    delete this._geojson\r\n  }\r\n    \r\n  /**\r\n   * Return the displayed value (number, or null for no-data),\r\n   * or undefined if not fixed to a t-coordinate or parameter.\r\n   * \r\n   * @returns {number|null|undefined}\r\n   */\r\n  getValue () {\r\n    if (this._param && this._axesSubset.t.coord !== undefined) {\r\n      let val = this.range.get({t: this._axesSubset.t.idx})\r\n      return val\r\n    }    \r\n  }\r\n  \r\n  /**\r\n   * Return the displayed value at a given geographic position.\r\n   * If out of bounds, then undefined is returned, otherwise a number or null (for no data).\r\n   * \r\n   * @param {L.LatLng} latlng\r\n   * @returns {number|null|undefined}\r\n   */\r\n  getValueAt (latlng) {\r\n    if (!latlng) throw new Error('latlng parameter missing')\r\n    \r\n    // TODO longitude wrapping\r\n    if (this._pointInPolygon([latlng.lng, latlng.lat])) {\r\n      return this.getValue()\r\n    }   \r\n  }\r\n  \r\n  // NOTE: this returns a string, not an {r,g,b} object as in other classes!\r\n  _getColor (val) {\r\n    if (val === null) {\r\n      // no-data\r\n      return this._defaultColor\r\n    } else if (val === undefined) {\r\n      // not fixed to a param or z-coordinate\r\n      return this._defaultColor\r\n    } else {\r\n      // use a palette\r\n      let idx = this.getPaletteIndex(val)\r\n      let {red, green, blue} = this.palette\r\n      return `rgb(${red[idx]}, ${green[idx]}, ${blue[idx]})`\r\n    }\r\n  }\r\n  \r\n  _updatePolygon () {\r\n    this._removePolygon()\r\n    this._addPolygon()\r\n  }\r\n  \r\n  /**\r\n   * Redraw the layer.\r\n   */\r\n  redraw () {\r\n    this._updatePolygon()\r\n    this._geojson.redraw()\r\n  }\r\n}\r\n","const COVJSON_PREFIX = 'https://covjson.org/def/'\r\nconst COVJSON_CORE_NS = COVJSON_PREFIX + 'core#'\r\nconst COVJSON_DOMAINTYPES_NS = COVJSON_PREFIX + 'domainTypes#'\r\n/** @ignore */\r\nexport const COVJSON_POINT = COVJSON_DOMAINTYPES_NS + 'Point'\r\n/** @ignore */\r\nexport const COVJSON_POINTSERIES = COVJSON_DOMAINTYPES_NS + 'PointSeries'\r\n/** @ignore */\r\nexport const COVJSON_VERTICALPROFILE = COVJSON_DOMAINTYPES_NS + 'VerticalProfile'\r\n/** @ignore */\r\nexport const COVJSON_GRID = COVJSON_DOMAINTYPES_NS + 'Grid'\r\n/** @ignore */\r\nexport const COVJSON_TRAJECTORY = COVJSON_DOMAINTYPES_NS + 'Trajectory'\r\n/** @ignore */\r\nexport const COVJSON_POLYGONSERIES = COVJSON_DOMAINTYPES_NS + 'PolygonSeries'\r\n/** @ignore */\r\nexport const COVJSON_MULTIPOLYGON = COVJSON_DOMAINTYPES_NS + 'MultiPolygon'\r\n\r\n/** @ignore */\r\nexport const COVJSON_DATATYPE_TUPLE = COVJSON_CORE_NS + 'tuple'\r\n/** @ignore */\r\nexport const COVJSON_DATATYPE_POLYGON = COVJSON_CORE_NS + 'polygon'\r\n\r\n// JS API object types\r\nexport {COVERAGE, COVERAGECOLLECTION, DOMAIN} from 'covutils'","import {Grid} from './Grid.js'\r\nimport {Trajectory} from './Trajectory.js'\r\nimport {Point} from './Point.js'\r\nimport {PointSeries} from './PointSeries.js'\r\nimport {PointCollection} from './PointCollection.js'\r\nimport {VerticalProfile} from './VerticalProfile.js'\r\nimport {VerticalProfileCollection} from './VerticalProfileCollection.js'\r\nimport {MultiPolygon} from './MultiPolygon.js'\r\nimport {PolygonSeries} from './PolygonSeries.js'\r\nimport {\r\n  COVJSON_POINT, \r\n  COVJSON_POINTSERIES, \r\n  COVJSON_VERTICALPROFILE, \r\n  COVJSON_GRID, \r\n  COVJSON_TRAJECTORY, \r\n  COVJSON_MULTIPOLYGON,\r\n  COVJSON_POLYGONSERIES,\r\n  COVERAGE,\r\n  COVERAGECOLLECTION,\r\n  DOMAIN\r\n  } from '../util/constants.js'\r\n\r\nconst DOMAIN_LAYER_CLASSES = {\r\n  [COVJSON_GRID]: Grid,\r\n  [COVJSON_POINT]: Point,\r\n  [COVJSON_POINTSERIES]: PointSeries,\r\n  [COVJSON_VERTICALPROFILE]: VerticalProfile,\r\n  [COVJSON_TRAJECTORY]: Trajectory,\r\n  [COVJSON_MULTIPOLYGON]: MultiPolygon,\r\n  [COVJSON_POLYGONSERIES]: PolygonSeries\r\n}\r\n  \r\nconst COLLECTION_LAYER_CLASSES = {\r\n  [COVJSON_POINT]: PointCollection,\r\n  [COVJSON_VERTICALPROFILE]: VerticalProfileCollection \r\n}\r\n\r\n/**\r\n * Creates a layer for a given coverage data object or throws an error if no layer class could be found.\r\n * \r\n * This is a convenience function over using {@link dataLayerClass} and manually\r\n * instantiating the layer.\r\n * \r\n * @example\r\n * var cov = ...\r\n * var layer = C.dataLayer(cov, {parameter: 'temperature'}).addTo(map)\r\n *  \r\n * @return {function} A function fn(cov, options) which returns a new layer for\r\n *   the given coverage data object and which is initialized with the given layer options.\r\n * @throws {Error} If no layer class could be found.\r\n */\r\nexport function dataLayer (cov, options) {\r\n  let clazz = dataLayerClass(cov)\r\n  if (!clazz) {\r\n    let coll = cov.type === COVERAGECOLLECTION ? 'collection ' : ''\r\n    throw new Error(`No ${coll}layer class found for domainType=${cov.domainType}`)\r\n  }\r\n  return new clazz(cov, options)\r\n}\r\n\r\n/**\r\n * Return a layer class usable for the given coverage data object,\r\n * or `undefined` if none was found.\r\n * If multiple layers match, then an arbitrary one is returned.\r\n *  \r\n * @example\r\n * var cov = ...\r\n * var clazz = C.dataLayerClass(cov)\r\n * if (clazz) {\r\n *   var layer = new clazz(cov, {parameter: 'temperature'}).addTo(map)\r\n * }\r\n * \r\n * @param {object} cov The coverage data object.\r\n * @return {class|undefined} The layer class.\r\n */\r\nexport function dataLayerClass (cov) {\r\n  if ((cov.type === COVERAGE || cov.type === DOMAIN ) && cov.domainType in DOMAIN_LAYER_CLASSES) {\r\n    return DOMAIN_LAYER_CLASSES[cov.domainType]\r\n  }\r\n  if (cov.type === COVERAGECOLLECTION && cov.domainType in COLLECTION_LAYER_CLASSES) {\r\n    return COLLECTION_LAYER_CLASSES[cov.domainType]\r\n  }\r\n}\r\n","import L from 'leaflet'\r\n\r\nimport {EventMixin} from '../util/EventMixin.js'\r\n\r\n/**\r\n * Default function that checks if two Parameter objects describe\r\n * the same thing. No magic is applied here. Exact match or nothing.\r\n */\r\nfunction defaultMatch (p1, p2) {\r\n  if (p1.id && p2.id && p1.id === p2.id) {\r\n    return true\r\n  }\r\n  if (!p1.observedProperty.id || !p2.observedProperty.id) {\r\n    return false\r\n  }\r\n  if (p1.observedProperty.id !== p2.observedProperty.id) {\r\n    return false\r\n  }\r\n  if (p1.unit && p2.unit) {\r\n    if (p1.unit.id && p2.unit.id && p1.unit.id !== p2.unit.id) {\r\n      return false\r\n    }\r\n    if (p1.unit.symbol && p2.unit.symbol && p1.unit.symbol !== p2.unit.symbol) {\r\n      return false\r\n    }\r\n  } else if (p1.unit || p2.unit) { // only one of both has units\r\n    return false\r\n  }\r\n  if (p1.categories && p2.categories) {\r\n    if (p1.categories.length !== p2.categories.length) {\r\n      return false\r\n    }\r\n    let idMissing = cat => !cat.id\r\n    if (p1.categories.some(idMissing) || p2.categories.some(idMissing)) {\r\n      return false\r\n    }\r\n    for (let cat1 of p1.categories) {\r\n      if (!p2.categories.some(cat2 => cat1.id === cat2.id)) {\r\n        return false\r\n      }\r\n    }\r\n  } else if (p1.categories || p2.categories) { // only one of both has categories\r\n    return false\r\n  }\r\n  return true\r\n}\r\n\r\n/**\r\n * Synchronizes visualization options of multiple renderer layers with matching Parameter\r\n * and exposes a combined view of those options in form of a virtual layer object.\r\n * \r\n * A common use case for this is to have equal palettes and only a single legend\r\n * for multiple layers describing the same parameter.\r\n * \r\n * Synchronizing visualization options means synchronizing certain common properties\r\n * of the layer instances. For example, the palette extents of two layers can be\r\n * synchronized by merging the extents of both. The logic for doing that has to\r\n * be specified in terms of binary functions supplied in the constructor.\r\n * \r\n * By default, a simple algorithm determines if two Parameter objects are equivalent\r\n * by checking whether things like observedPropery have the same ID, units are the same,\r\n * etc. This default algorithm can be replaced with a custom one. Such a custom\r\n * algorithm could relate different vocabularies with each other or perform other checks.\r\n * \r\n * @example\r\n * let paramSync = new C.ParameterSync({\r\n *   syncProperties: {\r\n *     palette: (p1, p2) => p1,\r\n *     paletteExtent: (e1, e2) => e1 && e2 ? [Math.min(e1[0], e2[0]), Math.max(e1[1], e2[1])] : null\r\n *   }\r\n * }).on('parameterAdd', e => {\r\n *   // The virtual sync layer proxies the synced palette, paletteExtent, and parameter.\r\n *   // The sync layer will fire a 'remove' event once all real layers for that parameter were removed.\r\n *   let layer = e.syncLayer\r\n *   if (layer.palette) {\r\n *     C.legend(layer, {\r\n *       position: 'bottomright'\r\n *     }).addTo(map)\r\n *   }\r\n * })\r\n * let layer = C.layerFactory()(cov).on('add', e => {\r\n *   // Only add the layer to the ParameterSync instance once it has initialized.\r\n *   // We can use the 'add' event for that.\r\n *   paramSync.addLayer(e.target)\r\n * })\r\n */\r\nexport class ParameterSync extends EventMixin(L.Class) {\r\n  \r\n  /**\r\n   * @param {Object} options\r\n   * @param {Object} options.syncProperties - \r\n   *   An object that defines which properties shall be synchronized and how.\r\n   *   Each key is a property name where the value is a binary function that merges\r\n   *   the values of two such properties.\r\n   * @param {Function} [options.match] - \r\n   *   Custom function that checks if two Parameter objects shall be equivalent.\r\n   *   The default function is simple and checks for identity of several properties.\r\n   */\r\n  constructor (options) {\r\n    super()\r\n    this._syncProps = options.syncProperties || {}\r\n    this._match = options.match || defaultMatch\r\n    this._paramLayers = new Map() // Map (Parameter -> Set(Layer))\r\n    this._layerListeners = new Map() // Map (Layer -> Map(type -> listener))\r\n    this._propSyncing = new Set() // Set (property name) \r\n  }\r\n  \r\n  /**\r\n   * Adds a layer that will be synchronized.\r\n   * \r\n   * Synchronization stops automatically when the layer fires a 'remove' event.\r\n   * \r\n   * @param {ILayer} layer - The layer to synchronize.\r\n   * @fires ParameterSync#parameterAdd - When a layer with a new parameter was added.\r\n   */\r\n  addLayer (layer) {\r\n    if (!layer.parameter) {\r\n      console.log('layer has no parameter, skipping parameter sync')\r\n      return   \r\n    }\r\n    let params = Array.from(this._paramLayers.keys())\r\n    let match = params.find(p => this._match(p, layer.parameter))\r\n    \r\n    let param\r\n    if (!match) {\r\n      param = layer.parameter\r\n      this._paramLayers.set(param, new Set([layer]))\r\n    } else {\r\n      param = match\r\n      this._paramLayers.get(param).add(layer)\r\n      this._syncProperties(param)\r\n    }\r\n    \r\n    this._registerLayerListeners(layer, param)\r\n    \r\n    if (!match) {\r\n      /**\r\n       * Parameter Add event.\r\n       * \r\n       * @event ParameterSync#parameterAdd\r\n       * @type {object}\r\n       * @property {SyncLayer} syncLayer - \r\n       *   A virtual layer that proxies the synchronized properties for a single parameter.\r\n       *   If all layers of that parameter are removed, this layer fires a 'remove' event,\r\n       *   signalling that the parameter is not present anymore.\r\n       */\r\n      this.fire('parameterAdd', {syncLayer: new SyncLayer(param, this)})\r\n    }\r\n  }\r\n  /**\r\n   * Pause synchronization. This is useful when a property of\r\n   * many layers has to be set manually (like paletteExtent = 'fov') and\r\n   * the synchronization shall happen afterwards (see resume()).\r\n   */\r\n  pause () {\r\n    this.paused = true\r\n  }\r\n  \r\n  /**\r\n   * Resumes synchronization.\r\n   * \r\n   * @param {bool} [sync] If true, then all layers will be synchronized immediately.\r\n   */\r\n  resume (sync) {\r\n    this.paused = false\r\n    if (sync) {\r\n      for (let param of this._paramLayers.keys()) {\r\n        this._syncProperties(param)\r\n      }\r\n    }\r\n  }\r\n  \r\n  _removeLayer (layer, param) {\r\n    for (let [type, fn] of this._layerListeners.get(layer)) {\r\n      layer.off(type, fn)\r\n    }\r\n    this._layerListeners.delete(layer)\r\n    this._paramLayers.get(param).delete(layer)\r\n    if (this._paramLayers.get(param).size === 0) {\r\n      this._paramLayers.delete(param)\r\n      // underscore since the 'remove' event of the syncLayer should be used\r\n      // from the outside\r\n      this.fire('_parameterRemove', {param: param})\r\n    }\r\n  }\r\n  \r\n  _registerLayerListeners (layer, param) {\r\n    let listeners = new Map([\r\n      ['remove', () => this._removeLayer(layer, param)]\r\n    ])\r\n    for (let prop of Object.keys(this._syncProps)) {\r\n      let type = prop + 'Change' // our convention is camel case\r\n      // TODO does it make sense to unify again, or should it just propagate unchanged?\r\n      listeners.set(type, () => this._syncProperty(param, prop))\r\n    }\r\n    for (let [type, fn] of listeners) {\r\n      layer.on(type, fn)\r\n    }\r\n    this._layerListeners.set(layer, listeners)\r\n  }\r\n  \r\n  _syncProperties (param) {\r\n    for (let prop of Object.keys(this._syncProps)) {\r\n      this._syncProperty(param, prop)\r\n    }\r\n  }\r\n  \r\n  _syncProperty (param, prop) {\r\n    if (this.paused || this._propSyncing.has(prop)) {\r\n      return\r\n    }\r\n    let propreduce = this._syncProps[prop]\r\n    let unified = [...this._paramLayers.get(param)].map(l => l[prop]).reduce(propreduce)\r\n    // While we unify properties, stop listening for changes to prevent a cycle.\r\n    this._propSyncing.add(prop)\r\n    for (let layer_ of this._paramLayers.get(param)) {\r\n      layer_[prop] = unified\r\n    }\r\n    this._propSyncing.delete(prop)\r\n    this.fire('_syncPropChange', {param: param, prop: prop})\r\n  }\r\n}\r\n\r\nclass SyncLayer extends EventMixin(L.Class) {\r\n  constructor (param, paramSync) {\r\n    super()\r\n    this._param = param\r\n    paramSync.on('_parameterRemove', e => {\r\n      if (e.param === param) {\r\n        this.fire('remove')\r\n      }\r\n    })\r\n    paramSync.on('_syncPropChange', e => {\r\n      if (e.param === param) {\r\n        this.fire(e.prop + 'Change')\r\n      }\r\n    })\r\n    let layers = () => paramSync._paramLayers.get(param)\r\n    for (let prop of Object.keys(paramSync._syncProps)) {\r\n      Object.defineProperty(this, prop, {\r\n        get: () => layers().values().next().value[prop],\r\n        set: v => {\r\n          paramSync._propSyncing.add(prop)\r\n          for (let layer of layers()) {\r\n            layer[prop] = v\r\n          }\r\n          paramSync._propSyncing.delete(prop)\r\n          this.fire(prop + 'Change')\r\n        },\r\n        enumerable: true\r\n      })\r\n    }\r\n  }\r\n  \r\n  get parameter () {\r\n    return this._param\r\n  }\r\n}\r\n","import L from 'leaflet'\r\nimport c3 from 'c3'\r\nimport {getLanguageString, stringifyUnit, getReferenceObject} from 'covutils'\r\n\r\n/**\r\n * Displays a popup with an interactive plot showing the data\r\n * of the vertical profile coverage.\r\n * \r\n * @example\r\n * layer.bindPopup(new C.VerticalProfilePlot(coverage))\r\n */\r\nexport class VerticalProfilePlot extends L.Popup {\r\n  \r\n  /**\r\n   * Creates a vertical profile plot popup.\r\n   * \r\n   * @param {Coverage|Array<Coverage>} coverage The vertical profile coverage to visualize.\r\n   *   If an array of vertical profile coverages is given, then the vertical reference systems\r\n   *   are assumed to be identical.\r\n   * @param {object} [options] Popup options. See also http://leafletjs.com/reference.html#popup-options.\r\n   * @param {Array|Array<Array>} [options.parameters] The parameters to display.\r\n   *   For a single coverage, an array of parameter keys, each parameter is accessible in a drop down.\r\n   *   The default for a single coverage is to display all parameters.\r\n   *   For multiple coverages, an array of parameter key groups, each group is accessible in a drop down.\r\n   *   Each group array is ordered as the coverage array and determines which parameter of each coverage\r\n   *   is displayed in a single plot. In each group, at least one item must be defined.\r\n   *   The default for multiple coverages is to display all parameters and treat each one as a separate group.\r\n   * @param {string} [options.language] A language tag, indicating the preferred language to use for labels.\r\n   * @param {string} [options.precision=4] The number of significant digits to display.\r\n   */\r\n  constructor (coverage, options = {}) {\r\n    options.maxWidth = options.maxWidth || 350\r\n    super(options)\r\n    this._covs = Array.isArray(coverage) ? coverage : [coverage]\r\n    this._language = options.language\r\n    this._precision = options.precision || 4\r\n    \r\n    this._labels = options.labels ? options.labels : new Array(this._covs.length)\r\n    \r\n    if (options.parameters) {\r\n      options.parameters = options.keys\r\n    }\r\n\r\n    let keyGroups = []\r\n    if (!options.keys) {\r\n      // treat all parameters of all coverages as separate\r\n      for (let i=0; i < this._covs.length; i++) {\r\n        for (let key of this._covs[i].parameters.keys()) {\r\n          let group = new Array(this._covs.length)\r\n          group[i] = key\r\n          keyGroups.push(group)\r\n        }        \r\n      }\r\n    } else if (!Array.isArray(options.keys[0])) {\r\n      // short-cut for a single coverage, acts as parameter selector\r\n      keyGroups = options.keys.map(key => [key])\r\n    } else {\r\n      // user defines which parameters to display and how to group them\r\n      keyGroups = options.keys\r\n    }\r\n    \r\n    // filter out groups which only contain null/undefined keys\r\n    keyGroups = keyGroups.filter(group => !group.every(key => !key))\r\n    \r\n    if (keyGroups.some(group => group.length !== this._covs.length)) {\r\n      throw new Error('Length of each parameter group must match number of coverages')\r\n    }\r\n    \r\n    // 2D array of parameter key groups, where each inner array is ordered like the coverages array\r\n    this._paramKeyGroups = keyGroups\r\n    \r\n    // Map from coverage to param keys\r\n    this._paramKeys = new Map()\r\n    for (let i=0; i < this._covs.length; i++) {\r\n      let keys = this._paramKeyGroups.map(group => group[i]).filter(key => key)\r\n      this._paramKeys.set(this._covs[i], keys)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * @ignore\r\n   */\r\n  onAdd (map) {\r\n    super.onAdd(map)\r\n    map.fire('dataloading')\r\n    let domainPromise = Promise.all(this._covs.map(cov => cov.loadDomain()))\r\n    let rangePromise = Promise.all(this._covs.map(cov => cov.loadRanges(this._paramKeys.get(cov))))\r\n    Promise.all([domainPromise, rangePromise]).then(([domains, ranges]) => {\r\n      this._domains = domains\r\n      this._ranges = ranges\r\n      this._addPlotToPopup()\r\n      this.fire('dataLoad')\r\n      this.fire('afterAdd')\r\n      map.fire('dataload')\r\n    }).catch(e => {\r\n      console.error(e)\r\n      this.fire('error', e)      \r\n      map.fire('dataload')\r\n    })\r\n  }\r\n  \r\n  _addPlotToPopup () {    \r\n    // display first parameter group\r\n    let paramKeyGroup = this._paramKeyGroups[0]    \r\n    let plot = this._getPlotElement(paramKeyGroup)\r\n    \r\n    let el = document.createElement('div')\r\n    \r\n    // display dropdown if multiple parameter groups\r\n    if (this._paramKeyGroups.length > 1) {\r\n      let select = document.createElement('select')\r\n      \r\n      for (let [paramKeyGroup,i] of this._paramKeyGroups.map((v,i) => [v,i])) {\r\n        let refParam = this._getRefParam(paramKeyGroup)\r\n        let option = document.createElement('option')\r\n        option.value = i\r\n        option.text = getLanguageString(refParam.observedProperty.label, this._language)\r\n        select.appendChild(option)\r\n      }\r\n      \r\n      select.addEventListener('change', () => {\r\n        el.removeChild(plot)\r\n        let group = this._paramKeyGroups[parseInt(select.value)]\r\n        plot = this._getPlotElement(group)\r\n        el.appendChild(plot)\r\n      })\r\n      \r\n      el.appendChild(select)\r\n    }\r\n    \r\n    el.appendChild(plot)\r\n    this.setContent(el)\r\n  }\r\n  \r\n  _getRefParam (paramKeyGroup) {\r\n    // use first defined parameter as representative for the group\r\n    let covsWithParamKey = zip(this._covs, paramKeyGroup)\r\n    let [refCov, refParamKey] = covsWithParamKey.filter(([,key]) => key)[0]\r\n    let refParam = refCov.parameters.get(refParamKey)\r\n    return refParam\r\n  }\r\n  \r\n  _getPlotElement (paramKeyGroup) {    \r\n    let refDomain = this._domains[0]\r\n    let covsWithParamKey = zip(this._covs, paramKeyGroup)\r\n    \r\n    let refParam = this._getRefParam(paramKeyGroup)\r\n    \r\n    // axis labels\r\n    let zName = 'Vertical'\r\n    let zUnit = ''\r\n    \r\n    let vertRef = getReferenceObject(refDomain, 'z')\r\n    if (vertRef && vertRef.coordinates.length === 1) {\r\n      let vertSrs = vertRef.system\r\n      if (vertSrs.cs && (vertSrs.cs.axes || vertSrs.cs.csAxes)) {\r\n        let ax = vertSrs.cs.axes ? vertSrs.cs.axes[0] : vertSrs.cs.csAxes[0]\r\n        zUnit = stringifyUnit(ax.unit, this._language)\r\n        if (ax.name) {\r\n          zName = getLanguageString(ax.name, this._language)\r\n        }\r\n      }\r\n    }\r\n    \r\n    let xLabel = zName\r\n    if (zUnit) {\r\n      xLabel += ' (' + zUnit + ')'\r\n    }\r\n    \r\n    let unit = stringifyUnit(refParam.unit, this._language)\r\n    let obsPropLabel = getLanguageString(refParam.observedProperty.label, this._language)\r\n    \r\n    // http://c3js.org/samples/simple_xy_multiple.html\r\n    \r\n    // axis values\r\n    let xs = {}\r\n    let columns = []\r\n    let names = {}\r\n        \r\n    for (let i=0; i < this._covs.length; i++) {\r\n      let paramKey = covsWithParamKey[i][1]\r\n      if (!paramKey) {\r\n        continue\r\n      }\r\n      \r\n      let xname = 'x' + i\r\n      let yname = refParam.key + i\r\n\r\n      names[yname] = this._labels[i] ? this._labels[i] : obsPropLabel\r\n      \r\n      xs[yname] = xname\r\n      \r\n      let zVals = this._domains[i].axes.get('z').values\r\n      let vals = this._ranges[i].get(paramKey)\r\n      let x = [xname]\r\n      let y = [yname]\r\n      for (let j=0; j < zVals.length; j++) {\r\n        let val = vals.get({z: j})\r\n        if (val === null) {\r\n          continue\r\n        }\r\n        let z = zVals[j]\r\n        x.push(z)\r\n        y.push(val)\r\n      }\r\n      \r\n      columns.push(x)\r\n      columns.push(y)\r\n    }\r\n    \r\n    let width = 350\r\n    let height = 300\r\n    \r\n    let el = document.createElement('div')\r\n    \r\n    // work-around, otherwise popup is too small\r\n    el.style.width = width + 'px'\r\n    el.style.height = height + 'px'\r\n\r\n    c3.generate({\r\n      bindto: el,\r\n      data: {\r\n        xs,\r\n        columns,\r\n        names\r\n      },\r\n      axis: {\r\n        rotated: true,\r\n        x: {\r\n          tick: {\r\n            count: 10,\r\n            format: x => x.toPrecision(this._precision)\r\n          },\r\n          label: {\r\n            text: xLabel,\r\n            position: 'outer-center'\r\n          }\r\n        },\r\n        y: {\r\n          tick: {\r\n            count: 7,\r\n            format: x => x.toPrecision(this._precision)\r\n          },\r\n          label: {\r\n            text: obsPropLabel + (unit ? ' (' + unit + ')' : ''),\r\n            position: 'outer-middle'\r\n          }\r\n        }\r\n      },\r\n      grid: {\r\n        x: {\r\n            show: true\r\n        },\r\n        y: {\r\n            show: true\r\n        }\r\n      },\r\n      legend: {\r\n        show: this._covs.length > 1 ? true : false\r\n      },\r\n      tooltip: {\r\n        format: {\r\n          title: d => zName + ': ' + d.toPrecision(this._precision) + ' ' + zUnit,\r\n          value: (value, ratio, id) => value.toPrecision(this._precision) + ' ' + unit\r\n        }\r\n      },\r\n      zoom: {\r\n        enabled: true,\r\n        rescale: true\r\n      },\r\n      size: {\r\n        height,\r\n        width\r\n      }\r\n    })\r\n    \r\n    return el\r\n  }\r\n}\r\n\r\nfunction zip (a, b) {\r\n  return a.map((e, i) => [a[i], b[i]])\r\n} \r\n","import L from 'leaflet'\r\nimport c3 from 'c3'\r\nimport {getLanguageString, stringifyUnit} from 'covutils'\r\n\r\n// TODO DRY: nearly identical to VerticalProfilePlot\r\n\r\n/**\r\n * Displays a popup with an interactive plot showing the data\r\n * of a time series coverage (all axes fixed except time).\r\n * \r\n * Examples are VerticalProfile or PointSeries coverages.\r\n * \r\n * @example\r\n * layer.bindPopup(new C.TimeSeriesPlot(coverage))\r\n */\r\nexport class TimeSeriesPlot extends L.Popup {\r\n  \r\n  /**\r\n   * Creates a time series plot popup.\r\n   * \r\n   * @param {Coverage|Array<Coverage>} coverage The time series coverage to visualize.\r\n   *   If an array of time series coverages is given, then the reference systems\r\n   *   are assumed to be identical.\r\n   * @param {object} [options] Popup options. See also http://leafletjs.com/reference.html#popup-options.\r\n   * @param {Array|Array<Array>} [options.parameters] The parameters to display.\r\n   *   For a single coverage, an array of parameter keys, each parameter is accessible in a drop down.\r\n   *   The default for a single coverage is to display all parameters.\r\n   *   For multiple coverages, an array of parameter key groups, each group is accessible in a drop down.\r\n   *   Each group array is ordered as the coverage array and determines which parameter of each coverage\r\n   *   is displayed in a single plot. In each group, at least one item must be defined.\r\n   *   The default for multiple coverages is to display all parameters and treat each one as a separate group.\r\n   * @param {string} [options.language] A language tag, indicating the preferred language to use for labels.\r\n   * @param {string} [options.precision=4] The number of significant digits to display.\r\n   */\r\n  constructor (coverage, options = {}) {\r\n    options.maxWidth = options.maxWidth || 350\r\n    super(options)\r\n    this._covs = Array.isArray(coverage) ? coverage : [coverage]\r\n    this._language = options.language\r\n    this._precision = options.precision || 4\r\n    \r\n    this._labels = options.labels ? options.labels : new Array(this._covs.length)\r\n\r\n    if (options.parameters) {\r\n      options.parameters = options.keys\r\n    }\r\n    \r\n    let keyGroups = []\r\n    if (!options.keys) {\r\n      // treat all parameters of all coverages as separate\r\n      for (let i=0; i < this._covs.length; i++) {\r\n        for (let key of this._covs[i].parameters.keys()) {\r\n          let group = new Array(this._covs.length)\r\n          group[i] = key\r\n          keyGroups.push(group)\r\n        }        \r\n      }\r\n    } else if (!Array.isArray(options.keys[0])) {\r\n      // short-cut for a single coverage, acts as parameter selector\r\n      keyGroups = options.keys.map(key => [key])\r\n    } else {\r\n      // user defines which parameters to display and how to group them\r\n      keyGroups = options.keys\r\n    }\r\n    \r\n    // filter out groups which only contain null/undefined keys\r\n    keyGroups = keyGroups.filter(group => !group.every(key => !key))\r\n    \r\n    if (keyGroups.some(group => group.length !== this._covs.length)) {\r\n      throw new Error('Length of each parameter group must match number of coverages')\r\n    }\r\n    \r\n    // 2D array of parameter key groups, where each inner array is ordered like the coverages array\r\n    this._paramKeyGroups = keyGroups\r\n    \r\n    // Map from coverage to param keys\r\n    this._paramKeys = new Map()\r\n    for (let i=0; i < this._covs.length; i++) {\r\n      let keys = this._paramKeyGroups.map(group => group[i]).filter(key => key)\r\n      this._paramKeys.set(this._covs[i], keys)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * @ignore\r\n   */\r\n  onAdd (map) {\r\n    super.onAdd(map)\r\n    map.fire('dataloading')\r\n    let domainPromise = Promise.all(this._covs.map(cov => cov.loadDomain()))\r\n    let rangePromise = Promise.all(this._covs.map(cov => cov.loadRanges(this._paramKeys.get(cov))))\r\n    Promise.all([domainPromise, rangePromise]).then(([domains, ranges]) => {\r\n      this._domains = domains\r\n      this._ranges = ranges\r\n      this._addPlotToPopup()\r\n      this.fire('dataLoad')\r\n      this.fire('afterAdd')\r\n      map.fire('dataload')\r\n    }).catch(e => {\r\n      console.error(e)\r\n      this.fire('error', e)      \r\n      map.fire('dataload')\r\n    })\r\n  }\r\n  \r\n  _addPlotToPopup () {\r\n    // display first parameter group\r\n    let paramKeyGroup = this._paramKeyGroups[0]    \r\n    let plot = this._getPlotElement(paramKeyGroup)\r\n    \r\n    let el = document.createElement('div')\r\n    \r\n    // display dropdown if multiple parameter groups\r\n    if (this._paramKeyGroups.length > 1) {\r\n      let select = document.createElement('select')\r\n      \r\n      for (let [paramKeyGroup,i] of this._paramKeyGroups.map((v,i) => [v,i])) {\r\n        let refParam = this._getRefParam(paramKeyGroup)\r\n        let option = document.createElement('option')\r\n        option.value = i\r\n        option.text = getLanguageString(refParam.observedProperty.label, this._language)\r\n        select.appendChild(option)\r\n      }\r\n      \r\n      select.addEventListener('change', () => {\r\n        el.removeChild(plot)\r\n        let group = this._paramKeyGroups[parseInt(select.value)]\r\n        plot = this._getPlotElement(group)\r\n        el.appendChild(plot)\r\n      })\r\n      \r\n      el.appendChild(select)\r\n    }\r\n    \r\n    el.appendChild(plot)\r\n    this.setContent(el)\r\n  }\r\n  \r\n  _getRefParam (paramKeyGroup) {\r\n    // use first defined parameter as representative for the group\r\n    let covsWithParamKey = zip(this._covs, paramKeyGroup)\r\n    let [refCov, refParamKey] = covsWithParamKey.filter(([,key]) => key)[0]\r\n    let refParam = refCov.parameters.get(refParamKey)\r\n    return refParam\r\n  }\r\n  \r\n  _getPlotElement (paramKeyGroup) {    \r\n    let refDomain = this._domains[0]\r\n    let covsWithParamKey = zip(this._covs, paramKeyGroup)\r\n    \r\n    let refParam = this._getRefParam(paramKeyGroup)\r\n    \r\n    // axis labels\r\n    let xLabel = 'Time'\r\n    \r\n    let unit = stringifyUnit(refParam.unit, this._language)\r\n    let obsPropLabel = getLanguageString(refParam.observedProperty.label, this._language)\r\n    \r\n    // http://c3js.org/samples/simple_xy_multiple.html\r\n    \r\n    // axis values\r\n    let xs = {}\r\n    let columns = []\r\n    let names = {}\r\n        \r\n    for (let i=0; i < this._covs.length; i++) {\r\n      let paramKey = covsWithParamKey[i][1]\r\n      if (!paramKey) {\r\n        continue\r\n      }\r\n      \r\n      let xname = 'x' + i\r\n      let yname = refParam.key + i\r\n\r\n      names[yname] = this._labels[i] ? this._labels[i] : obsPropLabel\r\n      \r\n      xs[yname] = xname\r\n      \r\n      let tVals = this._domains[i].axes.get('t').values\r\n      let vals = this._ranges[i].get(paramKey)\r\n      let x = [xname]\r\n      let y = [yname]\r\n      for (let j=0; j < tVals.length; j++) {\r\n        let val = vals.get({t: j})\r\n        if (val === null) {\r\n          continue\r\n        }\r\n        let t = new Date(tVals[j])\r\n        x.push(t)\r\n        y.push(val)\r\n      }\r\n      \r\n      columns.push(x)\r\n      columns.push(y)\r\n    }\r\n    \r\n    let height = 300\r\n    \r\n    let el = document.createElement('div')\r\n    \r\n    // work-around, otherwise popup is too small\r\n    el.style.width = this.options.maxWidth + 'px'\r\n    el.style.height = height + 'px'\r\n\r\n    c3.generate({\r\n      bindto: el,\r\n      data: {\r\n        xs,\r\n        columns,\r\n        names\r\n      },\r\n      axis: {\r\n        x: {\r\n          type: 'timeseries',\r\n          tick: {\r\n            format: this.options.timeFormat\r\n          },\r\n          label: {\r\n            text: xLabel,\r\n            position: 'outer-center'\r\n          }\r\n        },\r\n        y: {\r\n          tick: {\r\n            count: 7,\r\n            format: x => x.toPrecision(this._precision)\r\n          },\r\n          label: {\r\n            text: obsPropLabel + (unit ? ' (' + unit + ')' : ''),\r\n            position: 'outer-middle'\r\n          }\r\n        }\r\n      },\r\n      grid: {\r\n        x: {\r\n            show: true\r\n        },\r\n        y: {\r\n            show: true\r\n        }\r\n      },\r\n      legend: {\r\n        show: this._covs.length > 1 ? true : false\r\n      },\r\n      tooltip: {\r\n        format: {\r\n          value: (value, ratio, id) => value.toPrecision(this._precision) + ' ' + unit\r\n        }\r\n      },\r\n      zoom: {\r\n        enabled: true,\r\n        rescale: true\r\n      },\r\n      size: {\r\n        height: height,\r\n        width: this.options.maxWidth\r\n      }\r\n    })\r\n    \r\n    return el\r\n  }\r\n}\r\n\r\nfunction zip (a, b) {\r\n  return a.map((e, i) => [a[i], b[i]])\r\n} \r\n","import L from 'leaflet'\r\n\r\n/**\r\n * Makes {@link L.Popup} draggable and proxies all {@link L.Draggable} events.\r\n * \r\n * @example\r\n * let DraggablePopup = DraggablePopupMixin(L.Popup)\r\n * let popup = new DraggablePopup().setContent('I am draggable!')\r\n * \r\n * @param {class} base The base class.\r\n * @return {class} The base class with DraggablePopupMixin.\r\n */\r\nexport function DraggablePopupMixin (base) {\r\n  return class extends base {\r\n    constructor (options={}, source) {\r\n      options.className = options.className || 'leaflet-popup-draggable'\r\n      super(options, source)\r\n    }\r\n    \r\n    onAdd (map) {\r\n      super.onAdd(map)\r\n      this._draggable = new L.Draggable(this._container, this._wrapper)\r\n      this._draggable.enable()\r\n      this._draggable.on('drag', e => {\r\n        // Popup.setContent() resets to the pre-drag position and doesn't use L.DomUtil.setPosition\r\n        // the code below works around that\r\n        let pos = L.DomUtil.getPosition(this._wrapper.parentNode)\r\n        let latlng = map.layerPointToLatLng(pos)\r\n        this.setLatLng(latlng)\r\n        this.fire('drag', e)\r\n      })\r\n      this._draggable.on('dragstart predrag dragend', e => this.fire(e.type, e))\r\n    }\r\n    \r\n    onRemove (map) {\r\n      this._draggable.disable()\r\n      super.onRemove(map)\r\n    }\r\n  }\r\n}\r\n","import L from 'leaflet'\r\n\r\nimport {getLanguageString as i18n, stringifyUnit, getCategory} from 'covutils'\r\n\r\n/**\r\n * A popup that contains the parameter values of the given coverage layers at the location of the popup.\r\n * \r\n * The popup content is updated when one of the following occurs:\r\n * - popup is added to a map\r\n * - popup location is changed\r\n * - coverage layer is added or removed\r\n * - updateData() is called\r\n * \r\n * @extends {L.Popup}\r\n */\r\nexport class ValuePopup extends L.Popup {\r\n  /**\r\n   * @param {Object} [options] The options object.\r\n   * @param {number} [options.maxDistanceForPointsInPx=20]\r\n   *   The maximum distance in pixels from the popup location for which point-data values should be included.\r\n   * @param {Array<DataLayer>} [options.layers] An initial set of coverage data layers.\r\n   * @param {L.Layer} [source] Used to tag the popup with a reference to the Layer to which it refers.\r\n   */\r\n  constructor (options, source) {\r\n    super(options, source)\r\n    let layers = this.options.layers || []\r\n    this._maxDistanceForPointsInPx = this.options.maxDistanceForPointsInPx || 20\r\n\r\n    /**\r\n     * The coverage data layers added to this popup.\r\n     * \r\n     * @type {Set<DataLayer>}\r\n     */\r\n    this.coverageLayers = new Set(layers.filter(layer => layer.getValueAt))\r\n  }\r\n  \r\n  /**\r\n   * @param {DataLayer} layer The data layer to add.\r\n   * @return {this}\r\n   */\r\n  addCoverageLayer (layer) {\r\n    if (!layer.getValueAt) return this\r\n    this.coverageLayers.add(layer)\r\n    this.updateData()\r\n    return this\r\n  }\r\n  \r\n  /**\r\n   * @param {DataLayer} layer The data layer to remove.\r\n   * @return {this}\r\n   */\r\n  removeCoverageLayer (layer) {\r\n    this.coverageLayers.delete(layer)\r\n    this.updateData()\r\n    return this\r\n  }\r\n  \r\n  /**\r\n   * @ignore\r\n   * @override\r\n   */\r\n  onAdd (map) {\r\n    this._map = map\r\n    super.onAdd(map)\r\n    this.updateData()\r\n  }\r\n  \r\n  /**\r\n   * @ignore\r\n   * @override\r\n   */\r\n  onRemove (map) {\r\n    super.onRemove(map)\r\n    this._map = null\r\n  }\r\n  \r\n  /**\r\n   * @ignore\r\n   * @override\r\n   */\r\n  setLatLng (latlng) {\r\n    super.setLatLng(latlng)\r\n    this.updateData()\r\n    return this\r\n  }\r\n  \r\n  /**\r\n   * Returns whether there is any non-missing coverage data at the current popup location.\r\n   * This function only works after the popup has been added to the map.\r\n   * \r\n   * @return {boolean}\r\n   */\r\n  hasData () {\r\n    return this._hasData\r\n  }\r\n  \r\n  /**\r\n   * Updates the popup content from the data layers.\r\n   * Gets called automatically when `setLatLng` is called.\r\n   * \r\n   * @return {this}\r\n   */\r\n  updateData () {\r\n    if (!this._map) return\r\n    let html = ''\r\n      \r\n    let latlng = this.getLatLng()\r\n      \r\n    for (let layer of this.coverageLayers) {      \r\n      let maxDistance = getMetersPerPixel(this._map) * this._maxDistanceForPointsInPx\r\n      let val = layer.getValueAt(latlng, maxDistance)\r\n      if (val == null) continue\r\n      let param = layer.parameter\r\n      \r\n      let unit = !param.observedProperty.categories ? stringifyUnit(param.unit) : ''\r\n      if (param.categoryEncoding) {\r\n        let cat = getCategory(param, val)\r\n        val = i18n(cat.label)\r\n      }  \r\n      html += '<div><strong>' + i18n(param.observedProperty.label) + '</strong>: ' + val + ' ' + unit + '</div>'\r\n    }\r\n    if (!html) {\r\n      this._hasData = false\r\n      html = 'No data.'\r\n    }\r\n    this._hasData = true\r\n    this.setContent(html)\r\n    return this\r\n  }\r\n}\r\n\r\nfunction getMetersPerPixel (map) {\r\n  // from L.Control.Scale\r\n  let bounds = map.getBounds()\r\n  let centerLat = bounds.getCenter().lat\r\n  let halfWorldMeters = 6378137 * Math.PI * Math.cos(centerLat * Math.PI / 180)\r\n  let dist = halfWorldMeters * (bounds.getNorthEast().lng - bounds.getSouthWest().lng) / 180\r\n  let size = map.getSize()\r\n  let perpx = dist / size.x\r\n  return perpx\r\n}\r\n","import {DraggablePopupMixin} from './DraggablePopupMixin.js'\r\nimport {ValuePopup} from './ValuePopup.js'\r\n\r\n/**\r\n * Like {@link ValuePopup} but draggable and updates its content while dragging.\r\n * \r\n * @extends {ValuePopup}\r\n * @extends {DraggablePopupMixin}\r\n */\r\nexport class DraggableValuePopup extends DraggablePopupMixin(ValuePopup) {}"],"names":["$$","selector","parent","document","querySelector","$","querySelectorAll","HTML","html","div","createElement","innerHTML","element","firstChild","inject","css","body","appendChild","style","type","styleSheet","cssText","createTextNode","head","fromTemplate","id","node","content","importNode","children","DEFAULT_TEMPLATE_ID","DEFAULT_TEMPLATE","DiscreteLegend","covLayer","options","position","_covLayer","_templateId","templateId","_language","language","getElementById","on","_remove","remove","_update","_doUpdate","fullUpdate","el","_el","param","parameter","getLanguageTag","observedProperty","label","title","getLanguageString","palette","i","steps","cat","categories","red","green","blue","map","_map","update","off","L","Control","ContinuousLegend","unit","stringifyUnit","forEach","u","paletteExtent","low","high","toFixed","gradient","background","legend","layer","Evented","prototype","EventMixin","base","clazz","key","TimeAxis","_title","_axisListener","e","axis","timeSlices","dateMap","Map","t","dateTimestamp","Date","UTC","getUTCFullYear","getUTCMonth","getUTCDate","getTime","has","set","get","push","_dateMap","DomEvent","disableClickPropagation","keys","dateStr","getUTCDateString","disabled","size","addEventListener","getUTCTimestampDateOnly","event","target","value","timeSlice","time","_initTimeSelect","fire","timeStr","covTime","toISOString","substr","timeSelect","times","length","year","parseInt","month","day","timestamp","iso","date","Dropdown","choices","_choices","_value","val","VerticalAxis","_position","crsVertAxis","crsVerticalAxis","name","vals","verticalSlices","toString","_dropdown","_getVerticalIndex","vertical","addTo","indexOf","Layer","commonjsHelpers.interopDefault","linearPalette","colors","directPalette","canvas","width","height","ctx","getContext","createLinearGradient","num","addColorStop","fillStyle","fillRect","Uint8Array","pix","getImageData","data","j","cssToRGB","cssColor","r","g","b","paletteFromObject","paletteSpec","interpolation","scale","extent","scaled","Math","trunc","enlargeExtentIfEqual","amount","buffer","PaletteManager","defaultSteps","_defaultSteps","_palettes","Array","isArray","every","arr","Error","_asUint8Array","add","undefined","Symbol","iterator","ta","DEFAULT_CONTINUOUS_PALETTE","DEFAULT_CATEGORICAL_PALETTE","n","slice","PaletteMixin","Promise","resolve","_initCategoryIdxMap","_palette","preferredPalette","preferredColor","_paletteExtent","categoryEncoding","valIdxMap","_categoryIdxMap","max","getPaletteIndex","idx","canUsePalette","setPaletteExtent","then","_updatePaletteIndexFn","skipRedraw","oldExtent","hasChanged","newExtent","res","computePaletteExtent","isNaN","redraw","Infinity","min","encoding","category","p","CoverageMixin","promise","coverage","loadDomain","domain","getHorizontalCRSComponents","_projX","_projY","loadProjection","projection","proj","_loadCoverageSubset","loadRange","range","catch","console","error","Grid","cov","isDomain","fromDomain","parameters","next","Util","setOptions","_cov","_param","_axesSubset","coordPref","z","load","initializePalette","vertRef","getReferenceObject","coordinates","vertRefSys","system","cs","csAxes","axes","_errored","log","bbox","_getDomainBbox","p1","unproject","x","y","p2","p3","p4","latLngBounds","southWest","latLng","northEast","bounds","spec","Object","ax","values","subsetByValue","_subsetCov","subsetCov","cacheRanges","all","subsetDomain","subsetRange","_subsetDomain","_subsetRange","xlen","shape","ylen","minMaxOfRange","xconstraint","start","stop","step","round","yconstraint","subsetByIndex","getBounds","latlng","X","Y","lat","lng","project","lon","iy","indexOfNearest","ix","coords","tile","DomUtil","create","getTileSize","drawTile","tileSize","imgData","rgba","ndarray","setPixel","tileY","tileX","_isDomainUsingEllipsoidalCRS","_isRectilinearGeodeticMap","_drawGeodeticCRSWithRectilinearMapProjection","_drawGeodeticCRSWithAnyMapProjection","_drawProjectedCRSWithRectilinearMapProjection","_drawProjectedCRSWithAnyMapProjection","putImageData","xBounds","xend","xmin","xmax","xDescending","xAxis","yAxis","ymin","ymax","startX","startY","zoom","lonRange","point","wrapLongitude","iLat","iLon","lons","Float64Array","lats","latCache","iLatCache","Uint32Array","crs","recti","CRS","EPSG3857","EPSG4326","EPSG3395","Simple","isRecti","referencing","some","isEllipsoidalCRS","ref","getContainer","GridLayer","call","old","ArrayBuffer","isView","wrapNum","CircleMarkerMixin","getValue","showNoData","color","_getColor","getLatLng","strokeBrightness","_marker","circleMarker","fillColor","fillOpacity","radius","stroke","opacity","weight","_popup","bindPopup","removeLayer","args","openPopup","closePopup","__updateMarker","DEFAULT_COLOR","Point","paramKey","_defaultColor","defaultColor","_addMarker","_removeMarker","maxDistance","distanceTo","Trajectory","_addTrajectoryLayers","points","getLatLngs","marker","CircleMarker","_getValue","addLayer","polyline","coord","distances","minDistance","minIdx","distance","index","composite","clearLayers","FeatureGroup","PointSeries","v","Node","obj","dimension","left","right","kdTree","metric","dimensions","self","buildTree","depth","dim","median","sort","a","floor","loadTree","root","restoreParent","toJSON","src","dest","insert","innerSearch","insertPosition","newNode","nodeSearch","removeNode","nextNode","nextObj","pDimension","findMin","own","nearest","maxNodes","result","bestNodes","BinaryHeap","nearestSearch","bestChild","ownDistance","linearPoint","linearDistance","otherChild","saveNode","pop","peek","abs","balanceFactor","count","scoreFunction","bubbleUp","end","sinkDown","len","parentN","elemScore","child2N","child1N","swap","child1","child1Score","child2","child2Score","PointCollection","covcoll","_covcoll","_pointClass","pointClass","_layerGroup","layerGroup","_layers","_kdtree","_layerLoadCount","_layerErrors","pointOptionsFn","opts","coverages","_attachListeners","_popupFn","popup","fn","once","_fireIfOnAddDone","errors","_initKdtree","point1","point2","LatLng","layers","filter","contains","VerticalProfile","VerticalProfileCollection","_vertical","MultiPolygon","_unproject","_addPolygons","_pointInPolygonPreprocess","_polygonsLonLat","polygon","ring","_removePolygons","_geojson","getCenter","polygons","isCartesian","ensureClockwisePolygon","_pointInPolygons","getPointInPolygonsFn","geojson","geoJson","feature","properties","onEachFeature","_updatePolygons","PolygonSeries","_addPolygon","_polygonLonLat","_removePolygon","pointInPolygons","_pointInPolygon","_updatePolygon","COVJSON_PREFIX","COVJSON_CORE_NS","COVJSON_DOMAINTYPES_NS","COVJSON_POINT","COVJSON_POINTSERIES","COVJSON_VERTICALPROFILE","COVJSON_GRID","COVJSON_TRAJECTORY","COVJSON_POLYGONSERIES","COVJSON_MULTIPOLYGON","COVJSON_DATATYPE_TUPLE","COVJSON_DATATYPE_POLYGON","DOMAIN_LAYER_CLASSES","COLLECTION_LAYER_CLASSES","dataLayer","dataLayerClass","coll","COVERAGECOLLECTION","domainType","COVERAGE","DOMAIN","defaultMatch","symbol","idMissing","cat1","cat2","ParameterSync","_syncProps","syncProperties","_match","match","_paramLayers","_layerListeners","_propSyncing","Set","params","from","find","_syncProperties","_registerLayerListeners","syncLayer","SyncLayer","paused","sync","delete","listeners","_removeLayer","prop","_syncProperty","propreduce","unified","l","reduce","layer_","Class","paramSync","defineProperty","enumerable","VerticalProfilePlot","maxWidth","_covs","_precision","precision","_labels","labels","keyGroups","group","_paramKeyGroups","_paramKeys","domainPromise","rangePromise","loadRanges","domains","ranges","_domains","_ranges","_addPlotToPopup","paramKeyGroup","plot","_getPlotElement","select","refParam","_getRefParam","option","text","removeChild","setContent","covsWithParamKey","zip","refCov","refParamKey","refDomain","zName","zUnit","vertSrs","xLabel","obsPropLabel","xs","columns","names","xname","yname","zVals","c3","generate","bindto","rotated","tick","format","toPrecision","grid","show","tooltip","d","ratio","enabled","rescale","Popup","TimeSeriesPlot","tVals","timeFormat","DraggablePopupMixin","source","className","_draggable","Draggable","_container","_wrapper","enable","pos","getPosition","parentNode","layerPointToLatLng","setLatLng","disable","ValuePopup","_maxDistanceForPointsInPx","maxDistanceForPointsInPx","coverageLayers","getValueAt","updateData","_hasData","getMetersPerPixel","getCategory","i18n","centerLat","halfWorldMeters","PI","cos","dist","getNorthEast","getSouthWest","getSize","perpx","DraggableValuePopup"],"mappings":"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"}